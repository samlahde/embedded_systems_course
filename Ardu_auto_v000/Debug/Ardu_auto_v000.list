
Ardu_auto_v000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000626c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006598  08006598  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a0  080065a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001bc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d15e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020be  00000000  00000000  0002d1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  0002f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a38  00000000  00000000  0002fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f43  00000000  00000000  00030808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de15  00000000  00000000  0003374b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1dfc  00000000  00000000  00041560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012335c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003498  00000000  00000000  001233ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006404 	.word	0x08006404

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006404 	.word	0x08006404

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	e000      	b.n	80005c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <__io_putchar>:
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

//For printing debug data into monitoring
int __io_putchar(int ch)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffd1 	bl	8000594 <ITM_SendChar>
	return(ch);
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f001 f8bb 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f833 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f9d3 	bl	80009b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060e:	f000 f95d 	bl	80008cc <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000612:	f000 f9af 	bl	8000974 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000616:	f000 f983 	bl	8000920 <MX_USART6_UART_Init>
  MX_ADC3_Init();
 800061a:	f000 f895 	bl	8000748 <MX_ADC3_Init>
  MX_SPI1_Init();
 800061e:	f000 f91d 	bl	800085c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //SPI TX off
  HAL_GPIO_WritePin(GPIOF, SPI_CS_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <main+0x6c>)
 800062a:	f002 fc37 	bl	8002e9c <HAL_GPIO_WritePin>
	   * IR_data[0] = IR1 ... IR_data[4] = IR5
	   * IR_data[n] = 4095 -> distance > 10 cm
	   * IR_data[n] = 100-300 -> distance < 10 cm
	   * */

	  HAL_ADC_Start_DMA(&hadc3, IR_data, 5);
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2205      	movs	r2, #5
 8000634:	4619      	mov	r1, r3
 8000636:	480d      	ldr	r0, [pc, #52]	; (800066c <main+0x70>)
 8000638:	f001 f97a 	bl	8001930 <HAL_ADC_Start_DMA>

	  bt_msg = get_bt_msg();
 800063c:	f000 faea 	bl	8000c14 <get_bt_msg>
 8000640:	4603      	mov	r3, r0
 8000642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  //handle_bt_msg(bt_msg, cmd_holder);
	  self_driving(cmd_holder, IR_data);
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4619      	mov	r1, r3
 800064c:	6a38      	ldr	r0, [r7, #32]
 800064e:	f000 fd5f 	bl	8001110 <self_driving>
	  handle_driving(cmd_holder);
 8000652:	6a38      	ldr	r0, [r7, #32]
 8000654:	f000 fbdc 	bl	8000e10 <handle_driving>
	  print_driving_state(cmd_holder);
 8000658:	6a38      	ldr	r0, [r7, #32]
 800065a:	f000 fc89 	bl	8000f70 <print_driving_state>
	  //me = SPIRead(L3G4200D_REG_WHO_AM_I);
	  //gyro_data = Get_gyro_values();
	  //printf("%d %d %d %d\r\n", gyro_data.x, gyro_data.y, gyro_data.z, me);

	  // Delay for readability
	  HAL_Delay(1000);
 800065e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000662:	f001 f8fd 	bl	8001860 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc3, IR_data, 5);
 8000666:	e7e2      	b.n	800062e <main+0x32>
 8000668:	40021400 	.word	0x40021400
 800066c:	2000008c 	.word	0x2000008c

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	; 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 feb4 	bl	80053ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <SystemClock_Config+0xd0>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a28      	ldr	r2, [pc, #160]	; (8000740 <SystemClock_Config+0xd0>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <SystemClock_Config+0xd0>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <SystemClock_Config+0xd4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <SystemClock_Config+0xd4>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <SystemClock_Config+0xd4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006e8:	2332      	movs	r3, #50	; 0x32
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f0:	2307      	movs	r3, #7
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fbe9 	bl	8002ed0 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000704:	f000 faca 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2101      	movs	r1, #1
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fe4a 	bl	80033c0 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000732:	f000 fab3 	bl	8000c9c <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800075a:	4b3d      	ldr	r3, [pc, #244]	; (8000850 <MX_ADC3_Init+0x108>)
 800075c:	4a3d      	ldr	r2, [pc, #244]	; (8000854 <MX_ADC3_Init+0x10c>)
 800075e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000760:	4b3b      	ldr	r3, [pc, #236]	; (8000850 <MX_ADC3_Init+0x108>)
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000766:	4b3a      	ldr	r3, [pc, #232]	; (8000850 <MX_ADC3_Init+0x108>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800076c:	4b38      	ldr	r3, [pc, #224]	; (8000850 <MX_ADC3_Init+0x108>)
 800076e:	2201      	movs	r2, #1
 8000770:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000772:	4b37      	ldr	r3, [pc, #220]	; (8000850 <MX_ADC3_Init+0x108>)
 8000774:	2200      	movs	r2, #0
 8000776:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000778:	4b35      	ldr	r3, [pc, #212]	; (8000850 <MX_ADC3_Init+0x108>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000780:	4b33      	ldr	r3, [pc, #204]	; (8000850 <MX_ADC3_Init+0x108>)
 8000782:	2200      	movs	r2, #0
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000786:	4b32      	ldr	r3, [pc, #200]	; (8000850 <MX_ADC3_Init+0x108>)
 8000788:	4a33      	ldr	r2, [pc, #204]	; (8000858 <MX_ADC3_Init+0x110>)
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <MX_ADC3_Init+0x108>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 5;
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <MX_ADC3_Init+0x108>)
 8000794:	2205      	movs	r2, #5
 8000796:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000798:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <MX_ADC3_Init+0x108>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a0:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <MX_ADC3_Init+0x108>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007a6:	482a      	ldr	r0, [pc, #168]	; (8000850 <MX_ADC3_Init+0x108>)
 80007a8:	f001 f87e 	bl	80018a8 <HAL_ADC_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 fa73 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007b6:	2308      	movs	r3, #8
 80007b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	4619      	mov	r1, r3
 80007c6:	4822      	ldr	r0, [pc, #136]	; (8000850 <MX_ADC3_Init+0x108>)
 80007c8:	f001 f9e0 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80007d2:	f000 fa63 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007d6:	230f      	movs	r3, #15
 80007d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	481b      	ldr	r0, [pc, #108]	; (8000850 <MX_ADC3_Init+0x108>)
 80007e4:	f001 f9d2 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 80007ee:	f000 fa55 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007f2:	2309      	movs	r3, #9
 80007f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007f6:	2303      	movs	r3, #3
 80007f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_ADC3_Init+0x108>)
 8000800:	f001 f9c4 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 800080a:	f000 fa47 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800080e:	230d      	movs	r3, #13
 8000810:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000812:	2304      	movs	r3, #4
 8000814:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	480d      	ldr	r0, [pc, #52]	; (8000850 <MX_ADC3_Init+0x108>)
 800081c:	f001 f9b6 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8000826:	f000 fa39 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800082a:	230a      	movs	r3, #10
 800082c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800082e:	2305      	movs	r3, #5
 8000830:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_ADC3_Init+0x108>)
 8000838:	f001 f9a8 	bl	8001b8c <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8000842:	f000 fa2b 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000008c 	.word	0x2000008c
 8000854:	40012200 	.word	0x40012200
 8000858:	0f000001 	.word	0x0f000001

0800085c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_SPI1_Init+0x68>)
 8000862:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <MX_SPI1_Init+0x6c>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_SPI1_Init+0x68>)
 8000868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800086c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_SPI1_Init+0x68>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_SPI1_Init+0x68>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_SPI1_Init+0x68>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_SPI1_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_SPI1_Init+0x68>)
 8000888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_SPI1_Init+0x68>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_SPI1_Init+0x68>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_SPI1_Init+0x68>)
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_SPI1_Init+0x68>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_SPI1_Init+0x68>)
 80008a8:	220a      	movs	r2, #10
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_SPI1_Init+0x68>)
 80008ae:	f002 ffa7 	bl	8003800 <HAL_SPI_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b8:	f000 f9f0 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  gyroInit();
 80008bc:	f000 f9c2 	bl	8000c44 <gyroInit>
  /* USER CODE END SPI1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000134 	.word	0x20000134
 80008c8:	40013000 	.word	0x40013000

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_USART2_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 8000904:	f003 fd24 	bl	8004350 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 f9c5 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000018c 	.word	0x2000018c
 800091c:	40004400 	.word	0x40004400

08000920 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART6_UART_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_USART6_UART_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USART6_UART_Init+0x4c>)
 800092c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000930:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART6_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART6_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART6_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART6_UART_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART6_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART6_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART6_UART_Init+0x4c>)
 8000958:	f003 fcfa 	bl	8004350 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000962:	f000 f99b 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001d0 	.word	0x200001d0
 8000970:	40011400 	.word	0x40011400

08000974 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_DMA_Init+0x3c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <MX_DMA_Init+0x3c>)
 8000984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_DMA_Init+0x3c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2038      	movs	r0, #56	; 0x38
 800099c:	f001 fc81 	bl	80022a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009a0:	2038      	movs	r0, #56	; 0x38
 80009a2:	f001 fc9a 	bl	80022da <HAL_NVIC_EnableIRQ>

}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	4b5d      	ldr	r3, [pc, #372]	; (8000b44 <MX_GPIO_Init+0x190>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a5c      	ldr	r2, [pc, #368]	; (8000b44 <MX_GPIO_Init+0x190>)
 80009d4:	f043 0320 	orr.w	r3, r3, #32
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b5a      	ldr	r3, [pc, #360]	; (8000b44 <MX_GPIO_Init+0x190>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0320 	and.w	r3, r3, #32
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <MX_GPIO_Init+0x190>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a55      	ldr	r2, [pc, #340]	; (8000b44 <MX_GPIO_Init+0x190>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b53      	ldr	r3, [pc, #332]	; (8000b44 <MX_GPIO_Init+0x190>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b4f      	ldr	r3, [pc, #316]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a4e      	ldr	r2, [pc, #312]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b4c      	ldr	r3, [pc, #304]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b48      	ldr	r3, [pc, #288]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a47      	ldr	r2, [pc, #284]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a40      	ldr	r2, [pc, #256]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b3e      	ldr	r3, [pc, #248]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a39      	ldr	r2, [pc, #228]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <MX_GPIO_Init+0x190>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, IN1_Pin|ENA_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000a94:	482c      	ldr	r0, [pc, #176]	; (8000b48 <MX_GPIO_Init+0x194>)
 8000a96:	f002 fa01 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa0:	4829      	ldr	r0, [pc, #164]	; (8000b48 <MX_GPIO_Init+0x194>)
 8000aa2:	f002 f9fb 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI_INT_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8000aac:	4827      	ldr	r0, [pc, #156]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000aae:	f002 f9f5 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin|IN2_Pin, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000ab8:	4825      	ldr	r0, [pc, #148]	; (8000b50 <MX_GPIO_Init+0x19c>)
 8000aba:	f002 f9ef 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin ENB_Pin ENA_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|ENB_Pin|ENA_Pin;
 8000abe:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481c      	ldr	r0, [pc, #112]	; (8000b48 <MX_GPIO_Init+0x194>)
 8000ad8:	f002 f81c 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_INT_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = SPI_INT_Pin|IN3_Pin|IN4_Pin;
 8000adc:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4815      	ldr	r0, [pc, #84]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000af6:	f002 f80d 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin IN2_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|IN2_Pin;
 8000afa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b04:	2302      	movs	r3, #2
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	480f      	ldr	r0, [pc, #60]	; (8000b50 <MX_GPIO_Init+0x19c>)
 8000b14:	f001 fffe 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1e:	2312      	movs	r3, #18
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4807      	ldr	r0, [pc, #28]	; (8000b54 <MX_GPIO_Init+0x1a0>)
 8000b36:	f001 ffed 	bl	8002b14 <HAL_GPIO_Init>

}
 8000b3a:	bf00      	nop
 8000b3c:	3730      	adds	r7, #48	; 0x30
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40021400 	.word	0x40021400
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	40020400 	.word	0x40020400

08000b58 <SPIWrite>:

/* USER CODE BEGIN 4 */
void SPIWrite(uint8_t address, uint8_t data)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]
  address &= 0x7F;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	71fb      	strb	r3, [r7, #7]
  //SPI TX on
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <SPIWrite+0x58>)
 8000b7a:	f002 f98f 	bl	8002e9c <HAL_GPIO_WritePin>
  //SPI address transmit
  HAL_SPI_Transmit(&hspi1, &address, sizeof(address), HAL_MAX_DELAY);
 8000b7e:	1df9      	adds	r1, r7, #7
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	2201      	movs	r2, #1
 8000b86:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <SPIWrite+0x5c>)
 8000b88:	f002 fec3 	bl	8003912 <HAL_SPI_Transmit>
  //SPI data transmit
  HAL_SPI_Transmit(&hspi1, &data, sizeof(data), HAL_MAX_DELAY);
 8000b8c:	1db9      	adds	r1, r7, #6
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	2201      	movs	r2, #1
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <SPIWrite+0x5c>)
 8000b96:	f002 febc 	bl	8003912 <HAL_SPI_Transmit>
  //SPI TX off
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <SPIWrite+0x58>)
 8000ba2:	f002 f97b 	bl	8002e9c <HAL_GPIO_WritePin>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40020c00 	.word	0x40020c00
 8000bb4:	20000134 	.word	0x20000134

08000bb8 <SPIRead>:

uint8_t SPIRead(uint8_t address)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  address |= 0x80;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	71fb      	strb	r3, [r7, #7]
  //SPI TX on
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd2:	480e      	ldr	r0, [pc, #56]	; (8000c0c <SPIRead+0x54>)
 8000bd4:	f002 f962 	bl	8002e9c <HAL_GPIO_WritePin>
  //SPI address transmit
  HAL_SPI_Transmit(&hspi1, &address, sizeof(address), HAL_MAX_DELAY);
 8000bd8:	1df9      	adds	r1, r7, #7
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	2201      	movs	r2, #1
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <SPIRead+0x58>)
 8000be2:	f002 fe96 	bl	8003912 <HAL_SPI_Transmit>
  //SPI data receive
  HAL_SPI_Receive(&hspi1, &data, sizeof(data), HAL_MAX_DELAY);
 8000be6:	f107 010f 	add.w	r1, r7, #15
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4807      	ldr	r0, [pc, #28]	; (8000c10 <SPIRead+0x58>)
 8000bf2:	f002 ffca 	bl	8003b8a <HAL_SPI_Receive>
  //SPI TX off
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <SPIRead+0x54>)
 8000bfe:	f002 f94d 	bl	8002e9c <HAL_GPIO_WritePin>
  return data;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40020c00 	.word	0x40020c00
 8000c10:	20000134 	.word	0x20000134

08000c14 <get_bt_msg>:


uint8_t get_bt_msg() {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  uint8_t msg;
  HAL_UART_Receive(&huart6, &msg, sizeof(msg), 500);
 8000c1a:	1df9      	adds	r1, r7, #7
 8000c1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c20:	2201      	movs	r2, #1
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <get_bt_msg+0x28>)
 8000c24:	f003 fbe1 	bl	80043ea <HAL_UART_Receive>
  printf("%d\r\n", msg);
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <get_bt_msg+0x2c>)
 8000c2e:	f004 fbe5 	bl	80053fc <iprintf>
  return msg;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200001d0 	.word	0x200001d0
 8000c40:	0800641c 	.word	0x0800641c

08000c44 <gyroInit>:
	gyro_data.z = (z_l & 0xFF) | ((z_h & 0xFF) << 8);
	return gyro_data;
}

void gyroInit()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  uint8_t scale, status;
  status = SPIRead(L3G4200D_REG_WHO_AM_I);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f7ff ffb4 	bl	8000bb8 <SPIRead>
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
  printf("%d\r\n", status);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	4619      	mov	r1, r3
 8000c58:	480f      	ldr	r0, [pc, #60]	; (8000c98 <gyroInit+0x54>)
 8000c5a:	f004 fbcf 	bl	80053fc <iprintf>
  // Enable x, y, z and turn off power down mode:
  SPIWrite(L3G4200D_REG_CTRL_REG1, 0x0f);
 8000c5e:	210f      	movs	r1, #15
 8000c60:	2020      	movs	r0, #32
 8000c62:	f7ff ff79 	bl	8000b58 <SPIWrite>
  // HPF
  SPIWrite(L3G4200D_REG_CTRL_REG2, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2021      	movs	r0, #33	; 0x21
 8000c6a:	f7ff ff75 	bl	8000b58 <SPIWrite>
  // Configure CTRL_REG3 to generate data ready interrupt on INT2
  // No interrupts used on INT1, if you'd like to configure INT1
  // or INT2 otherwise, consult the datasheet:
  SPIWrite(L3G4200D_REG_CTRL_REG3, 0);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2022      	movs	r0, #34	; 0x22
 8000c72:	f7ff ff71 	bl	8000b58 <SPIWrite>
  // CTRL_REG4 controls the full-scale range, among other things:
  scale = 2 & 0x03;
 8000c76:	2302      	movs	r3, #2
 8000c78:	71bb      	strb	r3, [r7, #6]
  SPIWrite(L3G4200D_REG_CTRL_REG4, scale << 4);
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	4619      	mov	r1, r3
 8000c82:	2023      	movs	r0, #35	; 0x23
 8000c84:	f7ff ff68 	bl	8000b58 <SPIWrite>
  // CTRL_REG5 controls high-pass filtering of outputs, use it
  // if you'd like:
  SPIWrite(L3G4200D_REG_CTRL_REG5, 0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2024      	movs	r0, #36	; 0x24
 8000c8c:	f7ff ff64 	bl	8000b58 <SPIWrite>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	0800641c 	.word	0x0800641c

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <motor_set>:
	   * A high, B high -> fast motor stop
	   *
	   * enable low -> motor stop
	   * */

void motor_set(uint8_t motor, uint8_t command){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
	switch(motor){
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <motor_set+0x1c>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d04e      	beq.n	8000d60 <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_SET);
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_SET);
					break;
		}
	}
}
 8000cc2:	e09b      	b.n	8000dfc <motor_set+0x154>
			switch(command){
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d84a      	bhi.n	8000d60 <motor_set+0xb8>
 8000cca:	a201      	add	r2, pc, #4	; (adr r2, 8000cd0 <motor_set+0x28>)
 8000ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd0:	08000d2d 	.word	0x08000d2d
 8000cd4:	08000d3b 	.word	0x08000d3b
 8000cd8:	08000ce1 	.word	0x08000ce1
 8000cdc:	08000d07 	.word	0x08000d07
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce6:	4847      	ldr	r0, [pc, #284]	; (8000e04 <motor_set+0x15c>)
 8000ce8:	f002 f8d8 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, IN1_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf2:	4844      	ldr	r0, [pc, #272]	; (8000e04 <motor_set+0x15c>)
 8000cf4:	f002 f8d2 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, IN2_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cfe:	4842      	ldr	r0, [pc, #264]	; (8000e08 <motor_set+0x160>)
 8000d00:	f002 f8cc 	bl	8002e9c <HAL_GPIO_WritePin>
					break;
 8000d04:	e02c      	b.n	8000d60 <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0c:	483d      	ldr	r0, [pc, #244]	; (8000e04 <motor_set+0x15c>)
 8000d0e:	f002 f8c5 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, IN1_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d18:	483a      	ldr	r0, [pc, #232]	; (8000e04 <motor_set+0x15c>)
 8000d1a:	f002 f8bf 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, IN2_Pin, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d24:	4838      	ldr	r0, [pc, #224]	; (8000e08 <motor_set+0x160>)
 8000d26:	f002 f8b9 	bl	8002e9c <HAL_GPIO_WritePin>
					break;
 8000d2a:	e019      	b.n	8000d60 <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d32:	4834      	ldr	r0, [pc, #208]	; (8000e04 <motor_set+0x15c>)
 8000d34:	f002 f8b2 	bl	8002e9c <HAL_GPIO_WritePin>
					break;
 8000d38:	e012      	b.n	8000d60 <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d40:	4830      	ldr	r0, [pc, #192]	; (8000e04 <motor_set+0x15c>)
 8000d42:	f002 f8ab 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, IN1_Pin, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4c:	482d      	ldr	r0, [pc, #180]	; (8000e04 <motor_set+0x15c>)
 8000d4e:	f002 f8a5 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, IN2_Pin, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d58:	482b      	ldr	r0, [pc, #172]	; (8000e08 <motor_set+0x160>)
 8000d5a:	f002 f89f 	bl	8002e9c <HAL_GPIO_WritePin>
					break;
 8000d5e:	bf00      	nop
			switch(command){
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d84a      	bhi.n	8000dfc <motor_set+0x154>
 8000d66:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <motor_set+0xc4>)
 8000d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6c:	08000dc9 	.word	0x08000dc9
 8000d70:	08000dd7 	.word	0x08000dd7
 8000d74:	08000d7d 	.word	0x08000d7d
 8000d78:	08000da3 	.word	0x08000da3
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d82:	4820      	ldr	r0, [pc, #128]	; (8000e04 <motor_set+0x15c>)
 8000d84:	f002 f88a 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8e:	481f      	ldr	r0, [pc, #124]	; (8000e0c <motor_set+0x164>)
 8000d90:	f002 f884 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9a:	481c      	ldr	r0, [pc, #112]	; (8000e0c <motor_set+0x164>)
 8000d9c:	f002 f87e 	bl	8002e9c <HAL_GPIO_WritePin>
					break;
 8000da0:	e02c      	b.n	8000dfc <motor_set+0x154>
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da8:	4816      	ldr	r0, [pc, #88]	; (8000e04 <motor_set+0x15c>)
 8000daa:	f002 f877 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db4:	4815      	ldr	r0, [pc, #84]	; (8000e0c <motor_set+0x164>)
 8000db6:	f002 f871 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc0:	4812      	ldr	r0, [pc, #72]	; (8000e0c <motor_set+0x164>)
 8000dc2:	f002 f86b 	bl	8002e9c <HAL_GPIO_WritePin>
					break;
 8000dc6:	e019      	b.n	8000dfc <motor_set+0x154>
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <motor_set+0x15c>)
 8000dd0:	f002 f864 	bl	8002e9c <HAL_GPIO_WritePin>
					break;
 8000dd4:	e012      	b.n	8000dfc <motor_set+0x154>
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <motor_set+0x15c>)
 8000dde:	f002 f85d 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de8:	4808      	ldr	r0, [pc, #32]	; (8000e0c <motor_set+0x164>)
 8000dea:	f002 f857 	bl	8002e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <motor_set+0x164>)
 8000df6:	f002 f851 	bl	8002e9c <HAL_GPIO_WritePin>
					break;
 8000dfa:	bf00      	nop
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021400 	.word	0x40021400
 8000e08:	40020c00 	.word	0x40020c00
 8000e0c:	40021000 	.word	0x40021000

08000e10 <handle_driving>:

void handle_driving(Cmd_holder cmd){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	uint8_t old = cmd->old_cmd;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	73fb      	strb	r3, [r7, #15]
	uint8_t new = cmd->new_cmd;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	785b      	ldrb	r3, [r3, #1]
 8000e22:	73bb      	strb	r3, [r7, #14]
	if (new != old && new != CMD_NONE){
 8000e24:	7bba      	ldrb	r2, [r7, #14]
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f000 809d 	beq.w	8000f68 <handle_driving+0x158>
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8099 	beq.w	8000f68 <handle_driving+0x158>
		switch(new){
 8000e36:	7bbb      	ldrb	r3, [r7, #14]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	2b09      	cmp	r3, #9
 8000e3c:	f200 8090 	bhi.w	8000f60 <handle_driving+0x150>
 8000e40:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <handle_driving+0x38>)
 8000e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e46:	bf00      	nop
 8000e48:	08000ea1 	.word	0x08000ea1
 8000e4c:	08000eb9 	.word	0x08000eb9
 8000e50:	08000e71 	.word	0x08000e71
 8000e54:	08000e89 	.word	0x08000e89
 8000e58:	08000ed1 	.word	0x08000ed1
 8000e5c:	08000ee9 	.word	0x08000ee9
 8000e60:	08000f01 	.word	0x08000f01
 8000e64:	08000f19 	.word	0x08000f19
 8000e68:	08000f31 	.word	0x08000f31
 8000e6c:	08000f49 	.word	0x08000f49
		    case CMD_FORWARD:
		    	motor_set(LEFT_MT, MT_FORWARD);
 8000e70:	2102      	movs	r1, #2
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff ff18 	bl	8000ca8 <motor_set>
		    	motor_set(RIGHT_MT, MT_FORWARD);
 8000e78:	2102      	movs	r1, #2
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff ff14 	bl	8000ca8 <motor_set>
		    	cmd->moving = MOVING_FORWARD;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	709a      	strb	r2, [r3, #2]
		    	break;
 8000e86:	e06c      	b.n	8000f62 <handle_driving+0x152>

		    case CMD_REVERSE:
				motor_set(LEFT_MT, MT_REVERSE);
 8000e88:	2103      	movs	r1, #3
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff0c 	bl	8000ca8 <motor_set>
				motor_set(RIGHT_MT, MT_REVERSE);
 8000e90:	2103      	movs	r1, #3
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff ff08 	bl	8000ca8 <motor_set>
				cmd->moving = MOVING_REVERSE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	709a      	strb	r2, [r3, #2]
				break;
 8000e9e:	e060      	b.n	8000f62 <handle_driving+0x152>

		    case CMD_STOP:
		    	motor_set(LEFT_MT, MT_STOP);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff ff00 	bl	8000ca8 <motor_set>
				motor_set(RIGHT_MT, MT_STOP);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fefc 	bl	8000ca8 <motor_set>
				cmd->moving = STOPPED;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	709a      	strb	r2, [r3, #2]
				break;
 8000eb6:	e054      	b.n	8000f62 <handle_driving+0x152>

		    case CMD_FAST_STOP:
		    	motor_set(LEFT_MT, MT_FAST_STOP);
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fef4 	bl	8000ca8 <motor_set>
		    	motor_set(RIGHT_MT, MT_FAST_STOP);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f7ff fef0 	bl	8000ca8 <motor_set>
		    	cmd->moving = STOPPED;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	709a      	strb	r2, [r3, #2]
		    	break;
 8000ece:	e048      	b.n	8000f62 <handle_driving+0x152>

			case CMD_TURN_LEFT_FWD:
				motor_set(LEFT_MT, MT_STOP);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff fee8 	bl	8000ca8 <motor_set>
				motor_set(RIGHT_MT, MT_FORWARD);
 8000ed8:	2102      	movs	r1, #2
 8000eda:	2001      	movs	r0, #1
 8000edc:	f7ff fee4 	bl	8000ca8 <motor_set>
				cmd->moving = MOVING_FORWARD;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	709a      	strb	r2, [r3, #2]
				break;
 8000ee6:	e03c      	b.n	8000f62 <handle_driving+0x152>

			case CMD_TURN_LEFT_REV:
				motor_set(LEFT_MT, MT_STOP);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fedc 	bl	8000ca8 <motor_set>
				motor_set(RIGHT_MT, MT_REVERSE);
 8000ef0:	2103      	movs	r1, #3
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff fed8 	bl	8000ca8 <motor_set>
				cmd->moving = MOVING_REVERSE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2202      	movs	r2, #2
 8000efc:	709a      	strb	r2, [r3, #2]
				break;
 8000efe:	e030      	b.n	8000f62 <handle_driving+0x152>

			case CMD_TURN_LEFT_STOPPED:
				motor_set(LEFT_MT, MT_REVERSE);
 8000f00:	2103      	movs	r1, #3
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fed0 	bl	8000ca8 <motor_set>
				motor_set(RIGHT_MT, MT_FORWARD);
 8000f08:	2102      	movs	r1, #2
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff fecc 	bl	8000ca8 <motor_set>
				cmd->moving = STOPPED;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	709a      	strb	r2, [r3, #2]
				break;
 8000f16:	e024      	b.n	8000f62 <handle_driving+0x152>

			case CMD_TURN_RIGHT_FWD:
				motor_set(LEFT_MT, MT_FORWARD);
 8000f18:	2102      	movs	r1, #2
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff fec4 	bl	8000ca8 <motor_set>
				motor_set(RIGHT_MT, MT_STOP);
 8000f20:	2100      	movs	r1, #0
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff fec0 	bl	8000ca8 <motor_set>
				cmd->moving = MOVING_FORWARD;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	709a      	strb	r2, [r3, #2]
				break;
 8000f2e:	e018      	b.n	8000f62 <handle_driving+0x152>

			case CMD_TURN_RIGHT_REV:
				motor_set(LEFT_MT, MT_REVERSE);
 8000f30:	2103      	movs	r1, #3
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff feb8 	bl	8000ca8 <motor_set>
				motor_set(RIGHT_MT, MT_STOP);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff feb4 	bl	8000ca8 <motor_set>
				cmd->moving = MOVING_REVERSE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2202      	movs	r2, #2
 8000f44:	709a      	strb	r2, [r3, #2]
				break;
 8000f46:	e00c      	b.n	8000f62 <handle_driving+0x152>

			case CMD_TURN_RIGHT_STOPPED:
				motor_set(LEFT_MT, MT_FORWARD);
 8000f48:	2102      	movs	r1, #2
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff feac 	bl	8000ca8 <motor_set>
				motor_set(RIGHT_MT, MT_REVERSE);
 8000f50:	2103      	movs	r1, #3
 8000f52:	2001      	movs	r0, #1
 8000f54:	f7ff fea8 	bl	8000ca8 <motor_set>
				cmd->moving = STOPPED;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	709a      	strb	r2, [r3, #2]
				break;
 8000f5e:	e000      	b.n	8000f62 <handle_driving+0x152>

			default:
				break;
 8000f60:	bf00      	nop
		}
		cmd->old_cmd = new;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7bba      	ldrb	r2, [r7, #14]
 8000f66:	701a      	strb	r2, [r3, #0]
	}
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <print_driving_state>:

void print_driving_state(Cmd_holder cmd){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	uint8_t left_state, right_state;
	left_state = get_motor_state(LEFT_MT);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f871 	bl	8001060 <get_motor_state>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
	right_state = get_motor_state(RIGHT_MT);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f000 f86c 	bl	8001060 <get_motor_state>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73bb      	strb	r3, [r7, #14]
	if(left_state == MT_FORWARD && right_state == MT_REVERSE){
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d106      	bne.n	8000fa0 <print_driving_state+0x30>
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d103      	bne.n	8000fa0 <print_driving_state+0x30>
		printf("Turning right in place\r\n");
 8000f98:	4828      	ldr	r0, [pc, #160]	; (800103c <print_driving_state+0xcc>)
 8000f9a:	f004 fab5 	bl	8005508 <puts>
 8000f9e:	e049      	b.n	8001034 <print_driving_state+0xc4>
	}
	else if(left_state == MT_REVERSE && right_state == MT_FORWARD){
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d106      	bne.n	8000fb4 <print_driving_state+0x44>
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d103      	bne.n	8000fb4 <print_driving_state+0x44>
			printf("Turning left in place\r\n");
 8000fac:	4824      	ldr	r0, [pc, #144]	; (8001040 <print_driving_state+0xd0>)
 8000fae:	f004 faab 	bl	8005508 <puts>
 8000fb2:	e03f      	b.n	8001034 <print_driving_state+0xc4>
		}
	else if (left_state == MT_FORWARD && right_state != MT_FORWARD){
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d106      	bne.n	8000fc8 <print_driving_state+0x58>
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d003      	beq.n	8000fc8 <print_driving_state+0x58>
		printf("Turning forward right\r\n");
 8000fc0:	4820      	ldr	r0, [pc, #128]	; (8001044 <print_driving_state+0xd4>)
 8000fc2:	f004 faa1 	bl	8005508 <puts>
 8000fc6:	e035      	b.n	8001034 <print_driving_state+0xc4>
	}
	else if(left_state != MT_FORWARD && right_state == MT_FORWARD){
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d006      	beq.n	8000fdc <print_driving_state+0x6c>
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d103      	bne.n	8000fdc <print_driving_state+0x6c>
		printf("Turning forward left\r\n");
 8000fd4:	481c      	ldr	r0, [pc, #112]	; (8001048 <print_driving_state+0xd8>)
 8000fd6:	f004 fa97 	bl	8005508 <puts>
 8000fda:	e02b      	b.n	8001034 <print_driving_state+0xc4>
	}
	else if(left_state == MT_REVERSE && right_state != MT_REVERSE){
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d106      	bne.n	8000ff0 <print_driving_state+0x80>
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d003      	beq.n	8000ff0 <print_driving_state+0x80>
			printf("Turning reverse right\r\n");
 8000fe8:	4818      	ldr	r0, [pc, #96]	; (800104c <print_driving_state+0xdc>)
 8000fea:	f004 fa8d 	bl	8005508 <puts>
 8000fee:	e021      	b.n	8001034 <print_driving_state+0xc4>
		}
	else if(left_state != MT_REVERSE && right_state == MT_REVERSE){
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d006      	beq.n	8001004 <print_driving_state+0x94>
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d103      	bne.n	8001004 <print_driving_state+0x94>
			printf("Turning reverse left\r\n");
 8000ffc:	4814      	ldr	r0, [pc, #80]	; (8001050 <print_driving_state+0xe0>)
 8000ffe:	f004 fa83 	bl	8005508 <puts>
 8001002:	e017      	b.n	8001034 <print_driving_state+0xc4>
		}
	else if(left_state == MT_FORWARD && right_state == MT_FORWARD){
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d106      	bne.n	8001018 <print_driving_state+0xa8>
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d103      	bne.n	8001018 <print_driving_state+0xa8>
			printf("Moving forward\r\n");
 8001010:	4810      	ldr	r0, [pc, #64]	; (8001054 <print_driving_state+0xe4>)
 8001012:	f004 fa79 	bl	8005508 <puts>
 8001016:	e00d      	b.n	8001034 <print_driving_state+0xc4>
		}
	else if(left_state == MT_REVERSE && right_state == MT_REVERSE){
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b03      	cmp	r3, #3
 800101c:	d106      	bne.n	800102c <print_driving_state+0xbc>
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	2b03      	cmp	r3, #3
 8001022:	d103      	bne.n	800102c <print_driving_state+0xbc>
			printf("Moving reverse\r\n");
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <print_driving_state+0xe8>)
 8001026:	f004 fa6f 	bl	8005508 <puts>
 800102a:	e003      	b.n	8001034 <print_driving_state+0xc4>
		}
	else
		printf("Stopped\r\n");
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <print_driving_state+0xec>)
 800102e:	f004 fa6b 	bl	8005508 <puts>

}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	08006424 	.word	0x08006424
 8001040:	0800643c 	.word	0x0800643c
 8001044:	08006454 	.word	0x08006454
 8001048:	0800646c 	.word	0x0800646c
 800104c:	08006484 	.word	0x08006484
 8001050:	0800649c 	.word	0x0800649c
 8001054:	080064b4 	.word	0x080064b4
 8001058:	080064c4 	.word	0x080064c4
 800105c:	080064d4 	.word	0x080064d4

08001060 <get_motor_state>:

uint8_t get_motor_state(uint8_t motor){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	uint8_t motor_state = MT_STOP;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState enable, in1, in2;
	if(motor == LEFT_MT){
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d115      	bne.n	80010a0 <get_motor_state+0x40>
		enable = HAL_GPIO_ReadPin(GPIOF, ENA_Pin);
 8001074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001078:	4822      	ldr	r0, [pc, #136]	; (8001104 <get_motor_state+0xa4>)
 800107a:	f001 fef7 	bl	8002e6c <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	73bb      	strb	r3, [r7, #14]
		in1 = HAL_GPIO_ReadPin(GPIOF, IN1_Pin);
 8001082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001086:	481f      	ldr	r0, [pc, #124]	; (8001104 <get_motor_state+0xa4>)
 8001088:	f001 fef0 	bl	8002e6c <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	737b      	strb	r3, [r7, #13]
		in2 = HAL_GPIO_ReadPin(GPIOD, IN2_Pin);
 8001090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001094:	481c      	ldr	r0, [pc, #112]	; (8001108 <get_motor_state+0xa8>)
 8001096:	f001 fee9 	bl	8002e6c <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	733b      	strb	r3, [r7, #12]
 800109e:	e017      	b.n	80010d0 <get_motor_state+0x70>
	}
	else if(motor == RIGHT_MT){
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d114      	bne.n	80010d0 <get_motor_state+0x70>
		enable = HAL_GPIO_ReadPin(ENB_GPIO_Port, ENB_Pin);
 80010a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010aa:	4816      	ldr	r0, [pc, #88]	; (8001104 <get_motor_state+0xa4>)
 80010ac:	f001 fede 	bl	8002e6c <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73bb      	strb	r3, [r7, #14]
		in1 = HAL_GPIO_ReadPin(GPIOE, IN3_Pin);
 80010b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <get_motor_state+0xac>)
 80010ba:	f001 fed7 	bl	8002e6c <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	737b      	strb	r3, [r7, #13]
		in2 = HAL_GPIO_ReadPin(GPIOE, IN4_Pin);
 80010c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c6:	4811      	ldr	r0, [pc, #68]	; (800110c <get_motor_state+0xac>)
 80010c8:	f001 fed0 	bl	8002e6c <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	733b      	strb	r3, [r7, #12]
	}
	if(enable){
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d010      	beq.n	80010f8 <get_motor_state+0x98>
		if(in1 && !in2){
 80010d6:	7b7b      	ldrb	r3, [r7, #13]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <get_motor_state+0x88>
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <get_motor_state+0x88>
			motor_state = MT_FORWARD;
 80010e2:	2302      	movs	r3, #2
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e007      	b.n	80010f8 <get_motor_state+0x98>
		}
		else if(!in1 && in2){
 80010e8:	7b7b      	ldrb	r3, [r7, #13]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d104      	bne.n	80010f8 <get_motor_state+0x98>
 80010ee:	7b3b      	ldrb	r3, [r7, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <get_motor_state+0x98>
			motor_state = MT_REVERSE;
 80010f4:	2303      	movs	r3, #3
 80010f6:	73fb      	strb	r3, [r7, #15]
		}
	}
	return motor_state;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]

}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021400 	.word	0x40021400
 8001108:	40020c00 	.word	0x40020c00
 800110c:	40021000 	.word	0x40021000

08001110 <self_driving>:
#include "self_driving.h"
#include "bt_control.h"
#include "motor_control.h"


void self_driving(Cmd_holder cmd_holder, uint32_t * IR_data){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
    uint8_t command;
    IR_data_type IR_output_data = get_ir(IR_data);
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	f000 f845 	bl	80011aa <get_ir>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	733a      	strb	r2, [r7, #12]
 8001126:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800112a:	737a      	strb	r2, [r7, #13]
 800112c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001130:	73bb      	strb	r3, [r7, #14]
    if(IR_output_data.LEFT && !IR_output_data.FRONT && !IR_output_data.RIGHT){
 8001132:	7b3b      	ldrb	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00e      	beq.n	8001156 <self_driving+0x46>
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <self_driving+0x46>
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	f083 0301 	eor.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <self_driving+0x46>
        command = CMD_TURN_RIGHT_FWD;
 8001150:	2308      	movs	r3, #8
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e022      	b.n	800119c <self_driving+0x8c>
    }
    else if(!IR_output_data.LEFT && !IR_output_data.FRONT && IR_output_data.RIGHT){
 8001156:	7b3b      	ldrb	r3, [r7, #12]
 8001158:	f083 0301 	eor.w	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <self_driving+0x6a>
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	f083 0301 	eor.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <self_driving+0x6a>
 800116e:	7b7b      	ldrb	r3, [r7, #13]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <self_driving+0x6a>
        command = CMD_TURN_LEFT_FWD;
 8001174:	2305      	movs	r3, #5
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e010      	b.n	800119c <self_driving+0x8c>
    }
    else if(IR_output_data.FRONT){
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00b      	beq.n	8001198 <self_driving+0x88>
        if(!IR_output_data.LEFT){
 8001180:	7b3b      	ldrb	r3, [r7, #12]
 8001182:	f083 0301 	eor.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <self_driving+0x82>
            command = CMD_TURN_LEFT_STOPPED;
 800118c:	2307      	movs	r3, #7
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e004      	b.n	800119c <self_driving+0x8c>
        }
        else {
            command = CMD_TURN_RIGHT_STOPPED;
 8001192:	230a      	movs	r3, #10
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e001      	b.n	800119c <self_driving+0x8c>
        }
    }
    else{
        command = CMD_FORWARD;
 8001198:	2303      	movs	r3, #3
 800119a:	73fb      	strb	r3, [r7, #15]
    }
    cmd_holder->new_cmd = command;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	705a      	strb	r2, [r3, #1]

}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <get_ir>:

IR_data_type get_ir(uint32_t * IR_data)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b085      	sub	sp, #20
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	IR_data_type IR_output_data;
	if(IR_data[2] < 4000) IR_output_data.LEFT = true;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3308      	adds	r3, #8
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80011bc:	d202      	bcs.n	80011c4 <get_ir+0x1a>
 80011be:	2301      	movs	r3, #1
 80011c0:	723b      	strb	r3, [r7, #8]
 80011c2:	e001      	b.n	80011c8 <get_ir+0x1e>
	else IR_output_data.LEFT = false;
 80011c4:	2300      	movs	r3, #0
 80011c6:	723b      	strb	r3, [r7, #8]
	if(IR_data[3] < 4000) IR_output_data.RIGHT = true;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	330c      	adds	r3, #12
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80011d2:	d202      	bcs.n	80011da <get_ir+0x30>
 80011d4:	2301      	movs	r3, #1
 80011d6:	727b      	strb	r3, [r7, #9]
 80011d8:	e001      	b.n	80011de <get_ir+0x34>
	else IR_output_data.RIGHT = false;
 80011da:	2300      	movs	r3, #0
 80011dc:	727b      	strb	r3, [r7, #9]
	if(IR_data[4] < 4000) IR_output_data.FRONT = true;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3310      	adds	r3, #16
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80011e8:	d202      	bcs.n	80011f0 <get_ir+0x46>
 80011ea:	2301      	movs	r3, #1
 80011ec:	72bb      	strb	r3, [r7, #10]
 80011ee:	e001      	b.n	80011f4 <get_ir+0x4a>
	else IR_output_data.FRONT = false;
 80011f0:	2300      	movs	r3, #0
 80011f2:	72bb      	strb	r3, [r7, #10]
	return IR_output_data;
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	f107 0208 	add.w	r2, r7, #8
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	4611      	mov	r1, r2
 8001200:	8019      	strh	r1, [r3, #0]
 8001202:	3302      	adds	r3, #2
 8001204:	0c12      	lsrs	r2, r2, #16
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	7b3a      	ldrb	r2, [r7, #12]
 800120c:	f362 0307 	bfi	r3, r2, #0, #8
 8001210:	7b7a      	ldrb	r2, [r7, #13]
 8001212:	f362 230f 	bfi	r3, r2, #8, #8
 8001216:	7bba      	ldrb	r2, [r7, #14]
 8001218:	f362 4317 	bfi	r3, r2, #16, #8
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <HAL_MspInit+0x4c>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x4c>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a3d      	ldr	r2, [pc, #244]	; (800138c <HAL_ADC_MspInit+0x114>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d173      	bne.n	8001382 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <HAL_ADC_MspInit+0x118>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a3b      	ldr	r2, [pc, #236]	; (8001390 <HAL_ADC_MspInit+0x118>)
 80012a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <HAL_ADC_MspInit+0x118>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <HAL_ADC_MspInit+0x118>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a34      	ldr	r2, [pc, #208]	; (8001390 <HAL_ADC_MspInit+0x118>)
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_ADC_MspInit+0x118>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <HAL_ADC_MspInit+0x118>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_ADC_MspInit+0x118>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_ADC_MspInit+0x118>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
    PF5     ------> ADC3_IN15
    PF10     ------> ADC3_IN8
    PC0     ------> ADC3_IN10
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = IR3_Pin|IR2_Pin|IR1_Pin;
 80012ee:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f4:	2303      	movs	r3, #3
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4824      	ldr	r0, [pc, #144]	; (8001394 <HAL_ADC_MspInit+0x11c>)
 8001304:	f001 fc06 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR5_Pin|IR4_Pin;
 8001308:	2309      	movs	r3, #9
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130c:	2303      	movs	r3, #3
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	481f      	ldr	r0, [pc, #124]	; (8001398 <HAL_ADC_MspInit+0x120>)
 800131c:	f001 fbfa 	bl	8002b14 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <HAL_ADC_MspInit+0x124>)
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_ADC_MspInit+0x128>)
 8001324:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_ADC_MspInit+0x124>)
 8001328:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800132c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_ADC_MspInit+0x124>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_ADC_MspInit+0x124>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_ADC_MspInit+0x124>)
 800133c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001340:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_ADC_MspInit+0x124>)
 8001344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001348:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_ADC_MspInit+0x124>)
 800134c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001350:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_ADC_MspInit+0x124>)
 8001354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001358:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_ADC_MspInit+0x124>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_ADC_MspInit+0x124>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <HAL_ADC_MspInit+0x124>)
 8001368:	f000 ffd2 	bl	8002310 <HAL_DMA_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_ADC_MspInit+0xfe>
    {
      Error_Handler();
 8001372:	f7ff fc93 	bl	8000c9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_ADC_MspInit+0x124>)
 800137a:	639a      	str	r2, [r3, #56]	; 0x38
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_ADC_MspInit+0x124>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40012200 	.word	0x40012200
 8001390:	40023800 	.word	0x40023800
 8001394:	40021400 	.word	0x40021400
 8001398:	40020800 	.word	0x40020800
 800139c:	200000d4 	.word	0x200000d4
 80013a0:	40026410 	.word	0x40026410

080013a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_SPI_MspInit+0x84>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12b      	bne.n	800141e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_SPI_MspInit+0x88>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_SPI_MspInit+0x88>)
 80013d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_SPI_MspInit+0x88>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_SPI_MspInit+0x88>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_SPI_MspInit+0x88>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_SPI_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDA_Pin;
 80013fe:	23e0      	movs	r3, #224	; 0xe0
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140e:	2305      	movs	r3, #5
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_SPI_MspInit+0x8c>)
 800141a:	f001 fb7b 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40013000 	.word	0x40013000
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a36      	ldr	r2, [pc, #216]	; (800152c <HAL_UART_MspInit+0xf8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d12c      	bne.n	80014b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_UART_MspInit+0xfc>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a34      	ldr	r2, [pc, #208]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <HAL_UART_MspInit+0xfc>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800148e:	230c      	movs	r3, #12
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149e:	2307      	movs	r3, #7
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4822      	ldr	r0, [pc, #136]	; (8001534 <HAL_UART_MspInit+0x100>)
 80014aa:	f001 fb33 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80014ae:	e039      	b.n	8001524 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a20      	ldr	r2, [pc, #128]	; (8001538 <HAL_UART_MspInit+0x104>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d134      	bne.n	8001524 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014c4:	f043 0320 	orr.w	r3, r3, #32
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BT_RX_Pin|BT_TX_Pin;
 80014f2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001504:	2308      	movs	r3, #8
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <HAL_UART_MspInit+0x108>)
 8001510:	f001 fb00 	bl	8002b14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2047      	movs	r0, #71	; 0x47
 800151a:	f000 fec2 	bl	80022a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800151e:	2047      	movs	r0, #71	; 0x47
 8001520:	f000 fedb 	bl	80022da <HAL_NVIC_EnableIRQ>
}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40004400 	.word	0x40004400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	40011400 	.word	0x40011400
 800153c:	40021800 	.word	0x40021800

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f000 f948 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <DMA2_Stream0_IRQHandler+0x10>)
 800159a:	f001 f851 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200000d4 	.word	0x200000d4

080015a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <USART6_IRQHandler+0x10>)
 80015ae:	f002 ffbf 	bl	8004530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200001d0 	.word	0x200001d0

080015bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	e00a      	b.n	80015e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ce:	f3af 8000 	nop.w
 80015d2:	4601      	mov	r1, r0
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	60ba      	str	r2, [r7, #8]
 80015da:	b2ca      	uxtb	r2, r1
 80015dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbf0      	blt.n	80015ce <_read+0x12>
	}

return len;
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e009      	b.n	800161c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60ba      	str	r2, [r7, #8]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffe6 	bl	80005e2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbf1      	blt.n	8001608 <_write+0x12>
	}
	return len;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_close>:

int _close(int file)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	return -1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001656:	605a      	str	r2, [r3, #4]
	return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_isatty>:

int _isatty(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	return 1;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
	return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f003 fe66 	bl	8005398 <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20030000 	.word	0x20030000
 80016f8:	00000400 	.word	0x00000400
 80016fc:	20000214 	.word	0x20000214
 8001700:	20000230 	.word	0x20000230

08001704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001760 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172e:	490e      	ldr	r1, [pc, #56]	; (8001768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001730:	4a0e      	ldr	r2, [pc, #56]	; (800176c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001744:	4c0b      	ldr	r4, [pc, #44]	; (8001774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001752:	f7ff ffd7 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001756:	f003 fe25 	bl	80053a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7fe ff4f 	bl	80005fc <main>
  bx  lr    
 800175e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001760:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800176c:	080065a8 	.word	0x080065a8
  ldr r2, =_sbss
 8001770:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001774:	2000022c 	.word	0x2000022c

08001778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_Init+0x40>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_Init+0x40>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x40>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 fd71 	bl	800228c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fd3a 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fd89 	bl	80022f6 <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 fd51 	bl	80022a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	20000008 	.word	0x20000008
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	20000218 	.word	0x20000218

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000218 	.word	0x20000218

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008

080018a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e033      	b.n	8001926 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fcd6 	bl	8001278 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ee:	f023 0302 	bic.w	r3, r3, #2
 80018f2:	f043 0202 	orr.w	r2, r3, #2
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fa78 	bl	8001df0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
 8001916:	e001      	b.n	800191c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_ADC_Start_DMA+0x1e>
 800194a:	2302      	movs	r3, #2
 800194c:	e0e9      	b.n	8001b22 <HAL_ADC_Start_DMA+0x1f2>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d018      	beq.n	8001996 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001974:	4b6d      	ldr	r3, [pc, #436]	; (8001b2c <HAL_ADC_Start_DMA+0x1fc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6d      	ldr	r2, [pc, #436]	; (8001b30 <HAL_ADC_Start_DMA+0x200>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	0c9a      	lsrs	r2, r3, #18
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001988:	e002      	b.n	8001990 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	3b01      	subs	r3, #1
 800198e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f9      	bne.n	800198a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a4:	d107      	bne.n	80019b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	f040 80a1 	bne.w	8001b08 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d007      	beq.n	80019f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a04:	d106      	bne.n	8001a14 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f023 0206 	bic.w	r2, r3, #6
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
 8001a12:	e002      	b.n	8001a1a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_ADC_Start_DMA+0x204>)
 8001a24:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2a:	4a43      	ldr	r2, [pc, #268]	; (8001b38 <HAL_ADC_Start_DMA+0x208>)
 8001a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a32:	4a42      	ldr	r2, [pc, #264]	; (8001b3c <HAL_ADC_Start_DMA+0x20c>)
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	4a41      	ldr	r2, [pc, #260]	; (8001b40 <HAL_ADC_Start_DMA+0x210>)
 8001a3c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a56:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a66:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	334c      	adds	r3, #76	; 0x4c
 8001a72:	4619      	mov	r1, r3
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f000 fcf8 	bl	800246c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d12a      	bne.n	8001ade <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2d      	ldr	r2, [pc, #180]	; (8001b44 <HAL_ADC_Start_DMA+0x214>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d015      	beq.n	8001abe <HAL_ADC_Start_DMA+0x18e>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a2c      	ldr	r2, [pc, #176]	; (8001b48 <HAL_ADC_Start_DMA+0x218>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d105      	bne.n	8001aa8 <HAL_ADC_Start_DMA+0x178>
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_ADC_Start_DMA+0x204>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00a      	beq.n	8001abe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <HAL_ADC_Start_DMA+0x21c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d136      	bne.n	8001b20 <HAL_ADC_Start_DMA+0x1f0>
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_ADC_Start_DMA+0x204>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d130      	bne.n	8001b20 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d129      	bne.n	8001b20 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	e020      	b.n	8001b20 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_ADC_Start_DMA+0x214>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d11b      	bne.n	8001b20 <HAL_ADC_Start_DMA+0x1f0>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d114      	bne.n	8001b20 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	e00b      	b.n	8001b20 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f043 0210 	orr.w	r2, r3, #16
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	431bde83 	.word	0x431bde83
 8001b34:	40012300 	.word	0x40012300
 8001b38:	08001fe9 	.word	0x08001fe9
 8001b3c:	080020a3 	.word	0x080020a3
 8001b40:	080020bf 	.word	0x080020bf
 8001b44:	40012000 	.word	0x40012000
 8001b48:	40012100 	.word	0x40012100
 8001b4c:	40012200 	.word	0x40012200

08001b50 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1c>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e113      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x244>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	d925      	bls.n	8001c04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68d9      	ldr	r1, [r3, #12]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b1e      	subs	r3, #30
 8001bce:	2207      	movs	r2, #7
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	400a      	ands	r2, r1
 8001bdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4403      	add	r3, r0
 8001bf6:	3b1e      	subs	r3, #30
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	e022      	b.n	8001c4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6919      	ldr	r1, [r3, #16]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	2207      	movs	r2, #7
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	400a      	ands	r2, r1
 8001c26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6919      	ldr	r1, [r3, #16]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4403      	add	r3, r0
 8001c40:	409a      	lsls	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d824      	bhi.n	8001c9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	3b05      	subs	r3, #5
 8001c64:	221f      	movs	r2, #31
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	400a      	ands	r2, r1
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b05      	subs	r3, #5
 8001c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9a:	e04c      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d824      	bhi.n	8001cee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b23      	subs	r3, #35	; 0x23
 8001cb6:	221f      	movs	r2, #31
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b23      	subs	r3, #35	; 0x23
 8001ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
 8001cec:	e023      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b41      	subs	r3, #65	; 0x41
 8001d00:	221f      	movs	r2, #31
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	3b41      	subs	r3, #65	; 0x41
 8001d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_ADC_ConfigChannel+0x250>)
 8001d38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <HAL_ADC_ConfigChannel+0x254>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d10f      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1d8>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b12      	cmp	r3, #18
 8001d4a:	d10b      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_ADC_ConfigChannel+0x254>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d12b      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x23a>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_ADC_ConfigChannel+0x258>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d003      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0x1f4>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b11      	cmp	r3, #17
 8001d7e:	d122      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_ADC_ConfigChannel+0x258>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d111      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_ADC_ConfigChannel+0x25c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_ADC_ConfigChannel+0x260>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	0c9a      	lsrs	r2, r3, #18
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f9      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40012300 	.word	0x40012300
 8001de0:	40012000 	.word	0x40012000
 8001de4:	10000012 	.word	0x10000012
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df8:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <ADC_Init+0x1f0>)
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	021a      	lsls	r2, r3, #8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6899      	ldr	r1, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <ADC_Init+0x1f4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d022      	beq.n	8001ece <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6899      	ldr	r1, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	e00f      	b.n	8001eee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0202 	bic.w	r2, r2, #2
 8001efc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6899      	ldr	r1, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7e1b      	ldrb	r3, [r3, #24]
 8001f08:	005a      	lsls	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01b      	beq.n	8001f54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	3b01      	subs	r3, #1
 8001f48:	035a      	lsls	r2, r3, #13
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	e007      	b.n	8001f64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	051a      	lsls	r2, r3, #20
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6899      	ldr	r1, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fa6:	025a      	lsls	r2, r3, #9
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6899      	ldr	r1, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	029a      	lsls	r2, r3, #10
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	40012300 	.word	0x40012300
 8001fe4:	0f000001 	.word	0x0f000001

08001fe8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d13c      	bne.n	800207c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d12b      	bne.n	8002074 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002020:	2b00      	cmp	r3, #0
 8002022:	d127      	bne.n	8002074 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800202e:	2b00      	cmp	r3, #0
 8002030:	d006      	beq.n	8002040 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800203c:	2b00      	cmp	r3, #0
 800203e:	d119      	bne.n	8002074 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0220 	bic.w	r2, r2, #32
 800204e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff fd6b 	bl	8001b50 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800207a:	e00e      	b.n	800209a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f7ff fd75 	bl	8001b78 <HAL_ADC_ErrorCallback>
}
 800208e:	e004      	b.n	800209a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff fd57 	bl	8001b64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2240      	movs	r2, #64	; 0x40
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f043 0204 	orr.w	r2, r3, #4
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff fd4a 	bl	8001b78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <__NVIC_SetPriorityGrouping>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_EnableIRQ>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db0b      	blt.n	800217a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4907      	ldr	r1, [pc, #28]	; (8002188 <__NVIC_EnableIRQ+0x38>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000e100 	.word	0xe000e100

0800218c <__NVIC_SetPriority>:
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	db0a      	blt.n	80021b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	490c      	ldr	r1, [pc, #48]	; (80021d8 <__NVIC_SetPriority+0x4c>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	0112      	lsls	r2, r2, #4
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	440b      	add	r3, r1
 80021b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021b4:	e00a      	b.n	80021cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4908      	ldr	r1, [pc, #32]	; (80021dc <__NVIC_SetPriority+0x50>)
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	3b04      	subs	r3, #4
 80021c4:	0112      	lsls	r2, r2, #4
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	440b      	add	r3, r1
 80021ca:	761a      	strb	r2, [r3, #24]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000e100 	.word	0xe000e100
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <NVIC_EncodePriority>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f1c3 0307 	rsb	r3, r3, #7
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	bf28      	it	cs
 80021fe:	2304      	movcs	r3, #4
 8002200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3304      	adds	r3, #4
 8002206:	2b06      	cmp	r3, #6
 8002208:	d902      	bls.n	8002210 <NVIC_EncodePriority+0x30>
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3b03      	subs	r3, #3
 800220e:	e000      	b.n	8002212 <NVIC_EncodePriority+0x32>
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	401a      	ands	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002228:	f04f 31ff 	mov.w	r1, #4294967295
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	43d9      	mvns	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	4313      	orrs	r3, r2
}
 800223a:	4618      	mov	r0, r3
 800223c:	3724      	adds	r7, #36	; 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <SysTick_Config>:
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002258:	d301      	bcc.n	800225e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <SysTick_Config+0x40>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002266:	210f      	movs	r1, #15
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f7ff ff8e 	bl	800218c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <SysTick_Config+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <SysTick_Config+0x40>)
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e010 	.word	0xe000e010

0800228c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff29 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff ff3e 	bl	8002134 <__NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff8e 	bl	80021e0 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5d 	bl	800218c <__NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff31 	bl	8002150 <__NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffa2 	bl	8002248 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff fa94 	bl	8001848 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e099      	b.n	8002460 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234c:	e00f      	b.n	800236e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800234e:	f7ff fa7b 	bl	8001848 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b05      	cmp	r3, #5
 800235a:	d908      	bls.n	800236e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e078      	b.n	8002460 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e8      	bne.n	800234e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_DMA_Init+0x158>)
 8002388:	4013      	ands	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d107      	bne.n	80023d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4313      	orrs	r3, r2
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0307 	bic.w	r3, r3, #7
 80023ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d117      	bne.n	8002432 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00e      	beq.n	8002432 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fb01 	bl	8002a1c <DMA_CheckFifoParam>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800242e:	2301      	movs	r3, #1
 8002430:	e016      	b.n	8002460 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fab8 	bl	80029b0 <DMA_CalcBaseAndBitshift>
 8002440:	4603      	mov	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	223f      	movs	r2, #63	; 0x3f
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	f010803f 	.word	0xf010803f

0800246c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_DMA_Start_IT+0x26>
 800248e:	2302      	movs	r3, #2
 8002490:	e040      	b.n	8002514 <HAL_DMA_Start_IT+0xa8>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d12f      	bne.n	8002506 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fa4a 	bl	8002954 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	223f      	movs	r2, #63	; 0x3f
 80024c6:	409a      	lsls	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0216 	orr.w	r2, r2, #22
 80024da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0208 	orr.w	r2, r2, #8
 80024f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e005      	b.n	8002512 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800250e:	2302      	movs	r3, #2
 8002510:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800252a:	f7ff f98d 	bl	8001848 <HAL_GetTick>
 800252e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d008      	beq.n	800254e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e052      	b.n	80025f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0216 	bic.w	r2, r2, #22
 800255c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_DMA_Abort+0x62>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0208 	bic.w	r2, r2, #8
 800258c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259e:	e013      	b.n	80025c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a0:	f7ff f952 	bl	8001848 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d90c      	bls.n	80025c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e015      	b.n	80025f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e4      	bne.n	80025a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	223f      	movs	r2, #63	; 0x3f
 80025dc:	409a      	lsls	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d004      	beq.n	800261a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e00c      	b.n	8002634 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2205      	movs	r2, #5
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800264c:	4b8e      	ldr	r3, [pc, #568]	; (8002888 <HAL_DMA_IRQHandler+0x248>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a8e      	ldr	r2, [pc, #568]	; (800288c <HAL_DMA_IRQHandler+0x24c>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0a9b      	lsrs	r3, r3, #10
 8002658:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2208      	movs	r2, #8
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01a      	beq.n	80026ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2208      	movs	r2, #8
 800269a:	409a      	lsls	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2201      	movs	r2, #1
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d012      	beq.n	80026e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	2201      	movs	r2, #1
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0202 	orr.w	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2204      	movs	r2, #4
 80026e8:	409a      	lsls	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d012      	beq.n	8002718 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2204      	movs	r2, #4
 8002706:	409a      	lsls	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0204 	orr.w	r2, r3, #4
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	2210      	movs	r2, #16
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d043      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d03c      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2210      	movs	r2, #16
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d018      	beq.n	8002782 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d024      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
 800276e:	e01f      	b.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01b      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
 8002780:	e016      	b.n	80027b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0208 	bic.w	r2, r2, #8
 800279e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	2220      	movs	r2, #32
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 808f 	beq.w	80028e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8087 	beq.w	80028e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2220      	movs	r2, #32
 80027d8:	409a      	lsls	r2, r3
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d136      	bne.n	8002858 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0216 	bic.w	r2, r2, #22
 80027f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002808:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_DMA_IRQHandler+0x1da>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0208 	bic.w	r2, r2, #8
 8002828:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	223f      	movs	r2, #63	; 0x3f
 8002830:	409a      	lsls	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284a:	2b00      	cmp	r3, #0
 800284c:	d07e      	beq.n	800294c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
        }
        return;
 8002856:	e079      	b.n	800294c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01d      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10d      	bne.n	8002890 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	2b00      	cmp	r3, #0
 800287a:	d031      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
 8002884:	e02c      	b.n	80028e0 <HAL_DMA_IRQHandler+0x2a0>
 8002886:	bf00      	nop
 8002888:	20000000 	.word	0x20000000
 800288c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d023      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
 80028a0:	e01e      	b.n	80028e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10f      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0210 	bic.w	r2, r2, #16
 80028be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d032      	beq.n	800294e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d022      	beq.n	800293a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2205      	movs	r2, #5
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	3301      	adds	r3, #1
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	d307      	bcc.n	8002928 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f2      	bne.n	800290c <HAL_DMA_IRQHandler+0x2cc>
 8002926:	e000      	b.n	800292a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002928:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
 800294a:	e000      	b.n	800294e <HAL_DMA_IRQHandler+0x30e>
        return;
 800294c:	bf00      	nop
    }
  }
}
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002970:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d108      	bne.n	8002994 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002992:	e007      	b.n	80029a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	3b10      	subs	r3, #16
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <DMA_CalcBaseAndBitshift+0x64>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <DMA_CalcBaseAndBitshift+0x68>)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d909      	bls.n	80029f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	1d1a      	adds	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	659a      	str	r2, [r3, #88]	; 0x58
 80029f0:	e007      	b.n	8002a02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	aaaaaaab 	.word	0xaaaaaaab
 8002a18:	080064f8 	.word	0x080064f8

08002a1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11f      	bne.n	8002a76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d856      	bhi.n	8002aea <DMA_CheckFifoParam+0xce>
 8002a3c:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <DMA_CheckFifoParam+0x28>)
 8002a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a42:	bf00      	nop
 8002a44:	08002a55 	.word	0x08002a55
 8002a48:	08002a67 	.word	0x08002a67
 8002a4c:	08002a55 	.word	0x08002a55
 8002a50:	08002aeb 	.word	0x08002aeb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d046      	beq.n	8002aee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a64:	e043      	b.n	8002aee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a6e:	d140      	bne.n	8002af2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a74:	e03d      	b.n	8002af2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7e:	d121      	bne.n	8002ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d837      	bhi.n	8002af6 <DMA_CheckFifoParam+0xda>
 8002a86:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <DMA_CheckFifoParam+0x70>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002aa3 	.word	0x08002aa3
 8002a94:	08002a9d 	.word	0x08002a9d
 8002a98:	08002ab5 	.word	0x08002ab5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa0:	e030      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d025      	beq.n	8002afa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab2:	e022      	b.n	8002afa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002abc:	d11f      	bne.n	8002afe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ac2:	e01c      	b.n	8002afe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d903      	bls.n	8002ad2 <DMA_CheckFifoParam+0xb6>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d003      	beq.n	8002ad8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ad0:	e018      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad6:	e015      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00e      	beq.n	8002b02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e00b      	b.n	8002b02 <DMA_CheckFifoParam+0xe6>
      break;
 8002aea:	bf00      	nop
 8002aec:	e00a      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
 8002af0:	e008      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e006      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002af6:	bf00      	nop
 8002af8:	e004      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
 8002afc:	e002      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;   
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
    }
  } 
  
  return status; 
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e177      	b.n	8002e20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f040 8166 	bne.w	8002e1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d005      	beq.n	8002b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d130      	bne.n	8002bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2203      	movs	r2, #3
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 0201 	and.w	r2, r3, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d017      	beq.n	8002c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d123      	bne.n	8002c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	08da      	lsrs	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	69b9      	ldr	r1, [r7, #24]
 8002c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0203 	and.w	r2, r3, #3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80c0 	beq.w	8002e1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <HAL_GPIO_Init+0x324>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_GPIO_Init+0x324>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b63      	ldr	r3, [pc, #396]	; (8002e38 <HAL_GPIO_Init+0x324>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb6:	4a61      	ldr	r2, [pc, #388]	; (8002e3c <HAL_GPIO_Init+0x328>)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	; (8002e40 <HAL_GPIO_Init+0x32c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d037      	beq.n	8002d52 <HAL_GPIO_Init+0x23e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a57      	ldr	r2, [pc, #348]	; (8002e44 <HAL_GPIO_Init+0x330>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d031      	beq.n	8002d4e <HAL_GPIO_Init+0x23a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a56      	ldr	r2, [pc, #344]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d02b      	beq.n	8002d4a <HAL_GPIO_Init+0x236>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a55      	ldr	r2, [pc, #340]	; (8002e4c <HAL_GPIO_Init+0x338>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d025      	beq.n	8002d46 <HAL_GPIO_Init+0x232>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a54      	ldr	r2, [pc, #336]	; (8002e50 <HAL_GPIO_Init+0x33c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01f      	beq.n	8002d42 <HAL_GPIO_Init+0x22e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a53      	ldr	r2, [pc, #332]	; (8002e54 <HAL_GPIO_Init+0x340>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d019      	beq.n	8002d3e <HAL_GPIO_Init+0x22a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a52      	ldr	r2, [pc, #328]	; (8002e58 <HAL_GPIO_Init+0x344>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0x226>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a51      	ldr	r2, [pc, #324]	; (8002e5c <HAL_GPIO_Init+0x348>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00d      	beq.n	8002d36 <HAL_GPIO_Init+0x222>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a50      	ldr	r2, [pc, #320]	; (8002e60 <HAL_GPIO_Init+0x34c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <HAL_GPIO_Init+0x21e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4f      	ldr	r2, [pc, #316]	; (8002e64 <HAL_GPIO_Init+0x350>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_GPIO_Init+0x21a>
 8002d2a:	2309      	movs	r3, #9
 8002d2c:	e012      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d2e:	230a      	movs	r3, #10
 8002d30:	e010      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d32:	2308      	movs	r3, #8
 8002d34:	e00e      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d36:	2307      	movs	r3, #7
 8002d38:	e00c      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d3a:	2306      	movs	r3, #6
 8002d3c:	e00a      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d3e:	2305      	movs	r3, #5
 8002d40:	e008      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d46:	2303      	movs	r3, #3
 8002d48:	e004      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d52:	2300      	movs	r3, #0
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f002 0203 	and.w	r2, r2, #3
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	4093      	lsls	r3, r2
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d64:	4935      	ldr	r1, [pc, #212]	; (8002e3c <HAL_GPIO_Init+0x328>)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d72:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d96:	4a34      	ldr	r2, [pc, #208]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d9c:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc0:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dea:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e14:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <HAL_GPIO_Init+0x354>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b0f      	cmp	r3, #15
 8002e24:	f67f ae84 	bls.w	8002b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40020400 	.word	0x40020400
 8002e48:	40020800 	.word	0x40020800
 8002e4c:	40020c00 	.word	0x40020c00
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40021400 	.word	0x40021400
 8002e58:	40021800 	.word	0x40021800
 8002e5c:	40021c00 	.word	0x40021c00
 8002e60:	40022000 	.word	0x40022000
 8002e64:	40022400 	.word	0x40022400
 8002e68:	40013c00 	.word	0x40013c00

08002e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
 8002e88:	e001      	b.n	8002e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eac:	787b      	ldrb	r3, [r7, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb8:	e003      	b.n	8002ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	041a      	lsls	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	619a      	str	r2, [r3, #24]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e267      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d075      	beq.n	8002fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eee:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d00c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efa:	4b85      	ldr	r3, [pc, #532]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d112      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f06:	4b82      	ldr	r3, [pc, #520]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f12:	d10b      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	4b7e      	ldr	r3, [pc, #504]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d05b      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x108>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d157      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e242      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x74>
 8002f36:	4b76      	ldr	r3, [pc, #472]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a75      	ldr	r2, [pc, #468]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xb0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x98>
 8002f4e:	4b70      	ldr	r3, [pc, #448]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6f      	ldr	r2, [pc, #444]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6c      	ldr	r2, [pc, #432]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xb0>
 8002f68:	4b69      	ldr	r3, [pc, #420]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a68      	ldr	r2, [pc, #416]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b66      	ldr	r3, [pc, #408]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a65      	ldr	r2, [pc, #404]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fc5e 	bl	8001848 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fc5a 	bl	8001848 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e207      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b5b      	ldr	r3, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xc0>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fc4a 	bl	8001848 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fc46 	bl	8001848 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e1f3      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	4b51      	ldr	r3, [pc, #324]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xe8>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b47      	ldr	r3, [pc, #284]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b44      	ldr	r3, [pc, #272]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	4b41      	ldr	r3, [pc, #260]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x152>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e1c7      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4937      	ldr	r1, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	e03a      	b.n	80030ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_RCC_OscConfig+0x244>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fe fbff 	bl	8001848 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304e:	f7fe fbfb 	bl	8001848 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1a8      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4925      	ldr	r1, [pc, #148]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_OscConfig+0x244>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fbde 	bl	8001848 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003090:	f7fe fbda 	bl	8001848 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e187      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d036      	beq.n	8003128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_RCC_OscConfig+0x248>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe fbbe 	bl	8001848 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe fbba 	bl	8001848 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e167      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 80030e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x200>
 80030ee:	e01b      	b.n	8003128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_OscConfig+0x248>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fe fba7 	bl	8001848 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	e00e      	b.n	800311c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fe fba3 	bl	8001848 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d907      	bls.n	800311c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e150      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
 8003110:	40023800 	.word	0x40023800
 8003114:	42470000 	.word	0x42470000
 8003118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	4b88      	ldr	r3, [pc, #544]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ea      	bne.n	80030fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8097 	beq.w	8003264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4b81      	ldr	r3, [pc, #516]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	4b7d      	ldr	r3, [pc, #500]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a7c      	ldr	r2, [pc, #496]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b7a      	ldr	r3, [pc, #488]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b77      	ldr	r3, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b74      	ldr	r3, [pc, #464]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a73      	ldr	r2, [pc, #460]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe fb63 	bl	8001848 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe fb5f 	bl	8001848 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e10c      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x2ea>
 80031ac:	4b64      	ldr	r3, [pc, #400]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a63      	ldr	r2, [pc, #396]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	e01c      	b.n	80031f4 <HAL_RCC_OscConfig+0x324>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x30c>
 80031c2:	4b5f      	ldr	r3, [pc, #380]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	4b5c      	ldr	r3, [pc, #368]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a5b      	ldr	r2, [pc, #364]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0x324>
 80031dc:	4b58      	ldr	r3, [pc, #352]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a57      	ldr	r2, [pc, #348]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	4b55      	ldr	r3, [pc, #340]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a54      	ldr	r2, [pc, #336]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ee:	f023 0304 	bic.w	r3, r3, #4
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fe fb24 	bl	8001848 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fe fb20 	bl	8001848 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0cb      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321a:	4b49      	ldr	r3, [pc, #292]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ee      	beq.n	8003204 <HAL_RCC_OscConfig+0x334>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7fe fb0e 	bl	8001848 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe fb0a 	bl	8001848 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0b5      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003246:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1ee      	bne.n	8003230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003258:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	4a38      	ldr	r2, [pc, #224]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800325e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a1 	beq.w	80033b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800326e:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b08      	cmp	r3, #8
 8003278:	d05c      	beq.n	8003334 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d141      	bne.n	8003306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fade 	bl	8001848 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe fada 	bl	8001848 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e087      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	041b      	lsls	r3, r3, #16
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	491b      	ldr	r1, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fe fab3 	bl	8001848 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fe faaf 	bl	8001848 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e05c      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x416>
 8003304:	e054      	b.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe fa9c 	bl	8001848 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe fa98 	bl	8001848 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e045      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x444>
 8003332:	e03d      	b.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e038      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
 8003340:	40023800 	.word	0x40023800
 8003344:	40007000 	.word	0x40007000
 8003348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d028      	beq.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d121      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d11a      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	4293      	cmp	r3, r2
 8003386:	d111      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	3b01      	subs	r3, #1
 8003396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d107      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0cc      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d90c      	bls.n	80033fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b8      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d044      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d119      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d003      	beq.n	800347e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	2b03      	cmp	r3, #3
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e067      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 0203 	bic.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4934      	ldr	r1, [pc, #208]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b0:	f7fe f9ca 	bl	8001848 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7fe f9c6 	bl	8001848 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e04f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 020c 	and.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1eb      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d20c      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e032      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f821 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800354a:	4602      	mov	r2, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	5ccb      	ldrb	r3, [r1, r3]
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe f92a 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023c00 	.word	0x40023c00
 800357c:	40023800 	.word	0x40023800
 8003580:	080064e0 	.word	0x080064e0
 8003584:	20000000 	.word	0x20000000
 8003588:	20000004 	.word	0x20000004

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003590:	b094      	sub	sp, #80	; 0x50
 8003592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	647b      	str	r3, [r7, #68]	; 0x44
 8003598:	2300      	movs	r3, #0
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800359c:	2300      	movs	r3, #0
 800359e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a4:	4b79      	ldr	r3, [pc, #484]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d00d      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x40>
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	f200 80e1 	bhi.w	8003778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035be:	e0db      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c0:	4b73      	ldr	r3, [pc, #460]	; (8003790 <HAL_RCC_GetSysClockFreq+0x204>)
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035c4:	e0db      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c6:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_GetSysClockFreq+0x208>)
 80035c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ca:	e0d8      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d6:	4b6d      	ldr	r3, [pc, #436]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d063      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e2:	4b6a      	ldr	r3, [pc, #424]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	099b      	lsrs	r3, r3, #6
 80035e8:	2200      	movs	r2, #0
 80035ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
 80035fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035fe:	4622      	mov	r2, r4
 8003600:	462b      	mov	r3, r5
 8003602:	f04f 0000 	mov.w	r0, #0
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	0159      	lsls	r1, r3, #5
 800360c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003610:	0150      	lsls	r0, r2, #5
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4621      	mov	r1, r4
 8003618:	1a51      	subs	r1, r2, r1
 800361a:	6139      	str	r1, [r7, #16]
 800361c:	4629      	mov	r1, r5
 800361e:	eb63 0301 	sbc.w	r3, r3, r1
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003630:	4659      	mov	r1, fp
 8003632:	018b      	lsls	r3, r1, #6
 8003634:	4651      	mov	r1, sl
 8003636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800363a:	4651      	mov	r1, sl
 800363c:	018a      	lsls	r2, r1, #6
 800363e:	4651      	mov	r1, sl
 8003640:	ebb2 0801 	subs.w	r8, r2, r1
 8003644:	4659      	mov	r1, fp
 8003646:	eb63 0901 	sbc.w	r9, r3, r1
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800365a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800365e:	4690      	mov	r8, r2
 8003660:	4699      	mov	r9, r3
 8003662:	4623      	mov	r3, r4
 8003664:	eb18 0303 	adds.w	r3, r8, r3
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	462b      	mov	r3, r5
 800366c:	eb49 0303 	adc.w	r3, r9, r3
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800367e:	4629      	mov	r1, r5
 8003680:	024b      	lsls	r3, r1, #9
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003688:	4621      	mov	r1, r4
 800368a:	024a      	lsls	r2, r1, #9
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	2200      	movs	r2, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
 8003696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800369c:	f7fc fdf8 	bl	8000290 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4613      	mov	r3, r2
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a8:	e058      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036aa:	4b38      	ldr	r3, [pc, #224]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	2200      	movs	r2, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	4611      	mov	r1, r2
 80036b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ba:	623b      	str	r3, [r7, #32]
 80036bc:	2300      	movs	r3, #0
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
 80036c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036c4:	4642      	mov	r2, r8
 80036c6:	464b      	mov	r3, r9
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	0159      	lsls	r1, r3, #5
 80036d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d6:	0150      	lsls	r0, r2, #5
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4641      	mov	r1, r8
 80036de:	ebb2 0a01 	subs.w	sl, r2, r1
 80036e2:	4649      	mov	r1, r9
 80036e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003700:	eb63 050b 	sbc.w	r5, r3, fp
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	00eb      	lsls	r3, r5, #3
 800370e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003712:	00e2      	lsls	r2, r4, #3
 8003714:	4614      	mov	r4, r2
 8003716:	461d      	mov	r5, r3
 8003718:	4643      	mov	r3, r8
 800371a:	18e3      	adds	r3, r4, r3
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	464b      	mov	r3, r9
 8003720:	eb45 0303 	adc.w	r3, r5, r3
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003732:	4629      	mov	r1, r5
 8003734:	028b      	lsls	r3, r1, #10
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800373c:	4621      	mov	r1, r4
 800373e:	028a      	lsls	r2, r1, #10
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003746:	2200      	movs	r2, #0
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	61fa      	str	r2, [r7, #28]
 800374c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003750:	f7fc fd9e 	bl	8000290 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	3301      	adds	r3, #1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800376c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800376e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003776:	e002      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetSysClockFreq+0x204>)
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800377c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003780:	4618      	mov	r0, r3
 8003782:	3750      	adds	r7, #80	; 0x50
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	00f42400 	.word	0x00f42400
 8003794:	007a1200 	.word	0x007a1200

08003798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_RCC_GetHCLKFreq+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000000 	.word	0x20000000

080037b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037b4:	f7ff fff0 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0a9b      	lsrs	r3, r3, #10
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4903      	ldr	r1, [pc, #12]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800
 80037d4:	080064f0 	.word	0x080064f0

080037d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037dc:	f7ff ffdc 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	0b5b      	lsrs	r3, r3, #13
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4903      	ldr	r1, [pc, #12]	; (80037fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	080064f0 	.word	0x080064f0

08003800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e07b      	b.n	800390a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003822:	d009      	beq.n	8003838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	61da      	str	r2, [r3, #28]
 800382a:	e005      	b.n	8003838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fda6 	bl	80013a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	ea42 0103 	orr.w	r1, r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 0104 	and.w	r1, r3, #4
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 0210 	and.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b088      	sub	sp, #32
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_SPI_Transmit+0x22>
 8003930:	2302      	movs	r3, #2
 8003932:	e126      	b.n	8003b82 <HAL_SPI_Transmit+0x270>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800393c:	f7fd ff84 	bl	8001848 <HAL_GetTick>
 8003940:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d002      	beq.n	8003958 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003952:	2302      	movs	r3, #2
 8003954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003956:	e10b      	b.n	8003b70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Transmit+0x52>
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003968:	e102      	b.n	8003b70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2203      	movs	r2, #3
 800396e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	88fa      	ldrh	r2, [r7, #6]
 8003982:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	88fa      	ldrh	r2, [r7, #6]
 8003988:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b0:	d10f      	bne.n	80039d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d007      	beq.n	80039f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f8:	d14b      	bne.n	8003a92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_Transmit+0xf6>
 8003a02:	8afb      	ldrh	r3, [r7, #22]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d13e      	bne.n	8003a86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	881a      	ldrh	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	1c9a      	adds	r2, r3, #2
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a2c:	e02b      	b.n	8003a86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d112      	bne.n	8003a62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	881a      	ldrh	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	1c9a      	adds	r2, r3, #2
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a60:	e011      	b.n	8003a86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a62:	f7fd fef1 	bl	8001848 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d803      	bhi.n	8003a7a <HAL_SPI_Transmit+0x168>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d102      	bne.n	8003a80 <HAL_SPI_Transmit+0x16e>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a84:	e074      	b.n	8003b70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ce      	bne.n	8003a2e <HAL_SPI_Transmit+0x11c>
 8003a90:	e04c      	b.n	8003b2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_SPI_Transmit+0x18e>
 8003a9a:	8afb      	ldrh	r3, [r7, #22]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d140      	bne.n	8003b22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	7812      	ldrb	r2, [r2, #0]
 8003aac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ac6:	e02c      	b.n	8003b22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d113      	bne.n	8003afe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	7812      	ldrb	r2, [r2, #0]
 8003ae2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	86da      	strh	r2, [r3, #54]	; 0x36
 8003afc:	e011      	b.n	8003b22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003afe:	f7fd fea3 	bl	8001848 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d803      	bhi.n	8003b16 <HAL_SPI_Transmit+0x204>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d102      	bne.n	8003b1c <HAL_SPI_Transmit+0x20a>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b20:	e026      	b.n	8003b70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1cd      	bne.n	8003ac8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	6839      	ldr	r1, [r7, #0]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fbcb 	bl	80042cc <SPI_EndRxTxTransaction>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e000      	b.n	8003b70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b088      	sub	sp, #32
 8003b8e:	af02      	add	r7, sp, #8
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	4613      	mov	r3, r2
 8003b98:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ba6:	d112      	bne.n	8003bce <HAL_SPI_Receive+0x44>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10e      	bne.n	8003bce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f8f1 	bl	8003dac <HAL_SPI_TransmitReceive>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	e0ea      	b.n	8003da4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_SPI_Receive+0x52>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e0e3      	b.n	8003da4 <HAL_SPI_Receive+0x21a>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be4:	f7fd fe30 	bl	8001848 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d002      	beq.n	8003bfc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bfa:	e0ca      	b.n	8003d92 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_SPI_Receive+0x7e>
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c0c:	e0c1      	b.n	8003d92 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2204      	movs	r2, #4
 8003c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c54:	d10f      	bne.n	8003c76 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d007      	beq.n	8003c94 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d162      	bne.n	8003d62 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c9c:	e02e      	b.n	8003cfc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d115      	bne.n	8003cd8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f103 020c 	add.w	r2, r3, #12
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	7812      	ldrb	r2, [r2, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cd6:	e011      	b.n	8003cfc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd8:	f7fd fdb6 	bl	8001848 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d803      	bhi.n	8003cf0 <HAL_SPI_Receive+0x166>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d102      	bne.n	8003cf6 <HAL_SPI_Receive+0x16c>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d102      	bne.n	8003cfc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cfa:	e04a      	b.n	8003d92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1cb      	bne.n	8003c9e <HAL_SPI_Receive+0x114>
 8003d06:	e031      	b.n	8003d6c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d113      	bne.n	8003d3e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	b292      	uxth	r2, r2
 8003d22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	1c9a      	adds	r2, r3, #2
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d3c:	e011      	b.n	8003d62 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d3e:	f7fd fd83 	bl	8001848 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d803      	bhi.n	8003d56 <HAL_SPI_Receive+0x1cc>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d102      	bne.n	8003d5c <HAL_SPI_Receive+0x1d2>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d60:	e017      	b.n	8003d92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1cd      	bne.n	8003d08 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	6839      	ldr	r1, [r7, #0]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fa45 	bl	8004200 <SPI_EndRxTransaction>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
 8003d8e:	e000      	b.n	8003d92 <HAL_SPI_Receive+0x208>
  }

error :
 8003d90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x26>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e18a      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x33c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dda:	f7fd fd35 	bl	8001848 <HAL_GetTick>
 8003dde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003df0:	887b      	ldrh	r3, [r7, #2]
 8003df2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003df4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d00f      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0x70>
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d107      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x68>
 8003e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d003      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e1a:	e15b      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_SPI_TransmitReceive+0x82>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_SPI_TransmitReceive+0x82>
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e34:	e14e      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d003      	beq.n	8003e4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2205      	movs	r2, #5
 8003e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	887a      	ldrh	r2, [r7, #2]
 8003e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	887a      	ldrh	r2, [r7, #2]
 8003e60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	887a      	ldrh	r2, [r7, #2]
 8003e72:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d007      	beq.n	8003e9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea6:	d178      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_SPI_TransmitReceive+0x10a>
 8003eb0:	8b7b      	ldrh	r3, [r7, #26]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d166      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	881a      	ldrh	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	1c9a      	adds	r2, r3, #2
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eda:	e053      	b.n	8003f84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d11b      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x176>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d016      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x176>
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d113      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d119      	bne.n	8003f64 <HAL_SPI_TransmitReceive+0x1b8>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d014      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	b292      	uxth	r2, r2
 8003f46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	1c9a      	adds	r2, r3, #2
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f60:	2301      	movs	r3, #1
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f64:	f7fd fc70 	bl	8001848 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d807      	bhi.n	8003f84 <HAL_SPI_TransmitReceive+0x1d8>
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d003      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f82:	e0a7      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1a6      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x130>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1a1      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x130>
 8003f98:	e07c      	b.n	8004094 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_TransmitReceive+0x1fc>
 8003fa2:	8b7b      	ldrh	r3, [r7, #26]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d16b      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fce:	e057      	b.n	8004080 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d11c      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x26c>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d017      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x26c>
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d114      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	330c      	adds	r3, #12
 8003ff8:	7812      	ldrb	r2, [r2, #0]
 8003ffa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b01      	cmp	r3, #1
 8004024:	d119      	bne.n	800405a <HAL_SPI_TransmitReceive+0x2ae>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d014      	beq.n	800405a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004056:	2301      	movs	r3, #1
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800405a:	f7fd fbf5 	bl	8001848 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004066:	429a      	cmp	r2, r3
 8004068:	d803      	bhi.n	8004072 <HAL_SPI_TransmitReceive+0x2c6>
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d102      	bne.n	8004078 <HAL_SPI_TransmitReceive+0x2cc>
 8004072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800407e:	e029      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1a2      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x224>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d19d      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f917 	bl	80042cc <SPI_EndRxTxTransaction>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040b0:	e010      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	e000      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80040d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3730      	adds	r7, #48	; 0x30
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004100:	f7fd fba2 	bl	8001848 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	4413      	add	r3, r2
 800410e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004110:	f7fd fb9a 	bl	8001848 <HAL_GetTick>
 8004114:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004116:	4b39      	ldr	r3, [pc, #228]	; (80041fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	015b      	lsls	r3, r3, #5
 800411c:	0d1b      	lsrs	r3, r3, #20
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004126:	e054      	b.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d050      	beq.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004130:	f7fd fb8a 	bl	8001848 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	429a      	cmp	r2, r3
 800413e:	d902      	bls.n	8004146 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d13d      	bne.n	80041c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004154:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800415e:	d111      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004168:	d004      	beq.n	8004174 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	d107      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004182:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418c:	d10f      	bne.n	80041ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e017      	b.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d19b      	bne.n	8004128 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000000 	.word	0x20000000

08004200 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004214:	d111      	bne.n	800423a <SPI_EndRxTransaction+0x3a>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421e:	d004      	beq.n	800422a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004228:	d107      	bne.n	800423a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004238:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004242:	d12a      	bne.n	800429a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424c:	d012      	beq.n	8004274 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff ff49 	bl	80040f0 <SPI_WaitFlagStateUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d02d      	beq.n	80042c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e026      	b.n	80042c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2200      	movs	r2, #0
 800427c:	2101      	movs	r1, #1
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7ff ff36 	bl	80040f0 <SPI_WaitFlagStateUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01a      	beq.n	80042c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e013      	b.n	80042c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2200      	movs	r2, #0
 80042a2:	2101      	movs	r1, #1
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff ff23 	bl	80040f0 <SPI_WaitFlagStateUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e000      	b.n	80042c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042d8:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <SPI_EndRxTxTransaction+0x7c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <SPI_EndRxTxTransaction+0x80>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0d5b      	lsrs	r3, r3, #21
 80042e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042e8:	fb02 f303 	mul.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f6:	d112      	bne.n	800431e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2200      	movs	r2, #0
 8004300:	2180      	movs	r1, #128	; 0x80
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff fef4 	bl	80040f0 <SPI_WaitFlagStateUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d016      	beq.n	800433c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e00f      	b.n	800433e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3b01      	subs	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004334:	2b80      	cmp	r3, #128	; 0x80
 8004336:	d0f2      	beq.n	800431e <SPI_EndRxTxTransaction+0x52>
 8004338:	e000      	b.n	800433c <SPI_EndRxTxTransaction+0x70>
        break;
 800433a:	bf00      	nop
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000000 	.word	0x20000000
 800434c:	165e9f81 	.word	0x165e9f81

08004350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e03f      	b.n	80043e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd f85c 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	; 0x24
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fd8b 	bl	8004eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b08a      	sub	sp, #40	; 0x28
 80043ee:	af02      	add	r7, sp, #8
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b20      	cmp	r3, #32
 8004408:	f040 808c 	bne.w	8004524 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_UART_Receive+0x2e>
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e084      	b.n	8004526 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_UART_Receive+0x40>
 8004426:	2302      	movs	r3, #2
 8004428:	e07d      	b.n	8004526 <HAL_UART_Receive+0x13c>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2222      	movs	r2, #34	; 0x22
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004446:	f7fd f9ff 	bl	8001848 <HAL_GetTick>
 800444a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004460:	d108      	bne.n	8004474 <HAL_UART_Receive+0x8a>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e003      	b.n	800447c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004484:	e043      	b.n	800450e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	2120      	movs	r1, #32
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fb05 	bl	8004aa0 <UART_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e042      	b.n	8004526 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	3302      	adds	r3, #2
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e01f      	b.n	8004500 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c8:	d007      	beq.n	80044da <HAL_UART_Receive+0xf0>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <HAL_UART_Receive+0xfe>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e008      	b.n	80044fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3301      	adds	r3, #1
 80044fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1b6      	bne.n	8004486 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b0ba      	sub	sp, #232	; 0xe8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004556:	2300      	movs	r3, #0
 8004558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800456e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_UART_IRQHandler+0x66>
 8004582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fbd3 	bl	8004d3a <UART_Receive_IT>
      return;
 8004594:	e256      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80de 	beq.w	800475c <HAL_UART_IRQHandler+0x22c>
 80045a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80d1 	beq.w	800475c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_UART_IRQHandler+0xae>
 80045c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0201 	orr.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <HAL_UART_IRQHandler+0xd2>
 80045ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f043 0202 	orr.w	r2, r3, #2
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <HAL_UART_IRQHandler+0xf6>
 800460e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0204 	orr.w	r2, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d011      	beq.n	8004656 <HAL_UART_IRQHandler+0x126>
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800463e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f043 0208 	orr.w	r2, r3, #8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 81ed 	beq.w	8004a3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_UART_IRQHandler+0x14e>
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fb5e 	bl	8004d3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <HAL_UART_IRQHandler+0x17a>
 80046a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d04f      	beq.n	800474a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa66 	bl	8004b7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d141      	bne.n	8004742 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3314      	adds	r3, #20
 80046e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1d9      	bne.n	80046be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	2b00      	cmp	r3, #0
 8004710:	d013      	beq.n	800473a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	4a7d      	ldr	r2, [pc, #500]	; (800490c <HAL_UART_IRQHandler+0x3dc>)
 8004718:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd ff6c 	bl	80025fc <HAL_DMA_Abort_IT>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004734:	4610      	mov	r0, r2
 8004736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e00e      	b.n	8004758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f99a 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e00a      	b.n	8004758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f996 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e006      	b.n	8004758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f992 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004756:	e170      	b.n	8004a3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	bf00      	nop
    return;
 800475a:	e16e      	b.n	8004a3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	2b01      	cmp	r3, #1
 8004762:	f040 814a 	bne.w	80049fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8143 	beq.w	80049fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 813c 	beq.w	80049fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004782:	2300      	movs	r3, #0
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	f040 80b4 	bne.w	8004910 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8140 	beq.w	8004a3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047c6:	429a      	cmp	r2, r3
 80047c8:	f080 8139 	bcs.w	8004a3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047de:	f000 8088 	beq.w	80048f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	330c      	adds	r3, #12
 800480a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800480e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800481a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1d9      	bne.n	80047e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3314      	adds	r3, #20
 8004834:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800483e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3314      	adds	r3, #20
 800484e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004852:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004856:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800485a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e1      	bne.n	800482e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800487a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3314      	adds	r3, #20
 800488a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800488e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004890:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004894:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800489c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e3      	bne.n	800486a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c2:	f023 0310 	bic.w	r3, r3, #16
 80048c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80048d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e3      	bne.n	80048b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fd fe15 	bl	800251c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f8c0 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004908:	e099      	b.n	8004a3e <HAL_UART_IRQHandler+0x50e>
 800490a:	bf00      	nop
 800490c:	08004c43 	.word	0x08004c43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004918:	b29b      	uxth	r3, r3
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 808b 	beq.w	8004a42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800492c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8086 	beq.w	8004a42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800494c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800495a:	647a      	str	r2, [r7, #68]	; 0x44
 800495c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e3      	bne.n	8004936 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	623b      	str	r3, [r7, #32]
   return(result);
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f023 0301 	bic.w	r3, r3, #1
 8004984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3314      	adds	r3, #20
 800498e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004992:	633a      	str	r2, [r7, #48]	; 0x30
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e3      	bne.n	800496e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0310 	bic.w	r3, r3, #16
 80049ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049d8:	61fa      	str	r2, [r7, #28]
 80049da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	69b9      	ldr	r1, [r7, #24]
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	617b      	str	r3, [r7, #20]
   return(result);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e3      	bne.n	80049b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f0:	4619      	mov	r1, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f848 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049f8:	e023      	b.n	8004a42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_UART_IRQHandler+0x4ea>
 8004a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f929 	bl	8004c6a <UART_Transmit_IT>
    return;
 8004a18:	e014      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00e      	beq.n	8004a44 <HAL_UART_IRQHandler+0x514>
 8004a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f969 	bl	8004d0a <UART_EndTransmit_IT>
    return;
 8004a38:	e004      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
    return;
 8004a3a:	bf00      	nop
 8004a3c:	e002      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
      return;
 8004a3e:	bf00      	nop
 8004a40:	e000      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
      return;
 8004a42:	bf00      	nop
  }
}
 8004a44:	37e8      	adds	r7, #232	; 0xe8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop

08004a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b090      	sub	sp, #64	; 0x40
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab0:	e050      	b.n	8004b54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d04c      	beq.n	8004b54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ac0:	f7fc fec2 	bl	8001848 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d241      	bcs.n	8004b54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004af0:	637a      	str	r2, [r7, #52]	; 0x34
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e5      	bne.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3314      	adds	r3, #20
 8004b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	613b      	str	r3, [r7, #16]
   return(result);
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3314      	adds	r3, #20
 8004b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b24:	623a      	str	r2, [r7, #32]
 8004b26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	69f9      	ldr	r1, [r7, #28]
 8004b2a:	6a3a      	ldr	r2, [r7, #32]
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e5      	bne.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e00f      	b.n	8004b74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d09f      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3740      	adds	r7, #64	; 0x40
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b095      	sub	sp, #84	; 0x54
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ba4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004baa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e5      	bne.n	8004b84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3314      	adds	r3, #20
 8004bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e5      	bne.n	8004bb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d119      	bne.n	8004c28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	330c      	adds	r3, #12
 8004bfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f023 0310 	bic.w	r3, r3, #16
 8004c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c14:	61ba      	str	r2, [r7, #24]
 8004c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	6979      	ldr	r1, [r7, #20]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	613b      	str	r3, [r7, #16]
   return(result);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e5      	bne.n	8004bf4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c36:	bf00      	nop
 8004c38:	3754      	adds	r7, #84	; 0x54
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff09 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b21      	cmp	r3, #33	; 0x21
 8004c7c:	d13e      	bne.n	8004cfc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c86:	d114      	bne.n	8004cb2 <UART_Transmit_IT+0x48>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d110      	bne.n	8004cb2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	621a      	str	r2, [r3, #32]
 8004cb0:	e008      	b.n	8004cc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	1c59      	adds	r1, r3, #1
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6211      	str	r1, [r2, #32]
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10f      	bne.n	8004cf8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ce6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fe8e 	bl	8004a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b08c      	sub	sp, #48	; 0x30
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b22      	cmp	r3, #34	; 0x22
 8004d4c:	f040 80ab 	bne.w	8004ea6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d58:	d117      	bne.n	8004d8a <UART_Receive_IT+0x50>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d113      	bne.n	8004d8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	1c9a      	adds	r2, r3, #2
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
 8004d88:	e026      	b.n	8004dd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9c:	d007      	beq.n	8004dae <UART_Receive_IT+0x74>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <UART_Receive_IT+0x82>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e008      	b.n	8004dce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4619      	mov	r1, r3
 8004de6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d15a      	bne.n	8004ea2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0220 	bic.w	r2, r2, #32
 8004dfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0201 	bic.w	r2, r2, #1
 8004e1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d135      	bne.n	8004e98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	613b      	str	r3, [r7, #16]
   return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f023 0310 	bic.w	r3, r3, #16
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e52:	623a      	str	r2, [r7, #32]
 8004e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	69f9      	ldr	r1, [r7, #28]
 8004e58:	6a3a      	ldr	r2, [r7, #32]
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e5      	bne.n	8004e32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d10a      	bne.n	8004e8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff fdf9 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
 8004e96:	e002      	b.n	8004e9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff fde1 	bl	8004a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e002      	b.n	8004ea8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3730      	adds	r7, #48	; 0x30
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb4:	b0c0      	sub	sp, #256	; 0x100
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ecc:	68d9      	ldr	r1, [r3, #12]
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	ea40 0301 	orr.w	r3, r0, r1
 8004ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f08:	f021 010c 	bic.w	r1, r1, #12
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f16:	430b      	orrs	r3, r1
 8004f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2a:	6999      	ldr	r1, [r3, #24]
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	ea40 0301 	orr.w	r3, r0, r1
 8004f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4b8f      	ldr	r3, [pc, #572]	; (800517c <UART_SetConfig+0x2cc>)
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d005      	beq.n	8004f50 <UART_SetConfig+0xa0>
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b8d      	ldr	r3, [pc, #564]	; (8005180 <UART_SetConfig+0x2d0>)
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d104      	bne.n	8004f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f50:	f7fe fc42 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8004f54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f58:	e003      	b.n	8004f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f5a:	f7fe fc29 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8004f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6c:	f040 810c 	bne.w	8005188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f82:	4622      	mov	r2, r4
 8004f84:	462b      	mov	r3, r5
 8004f86:	1891      	adds	r1, r2, r2
 8004f88:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f8a:	415b      	adcs	r3, r3
 8004f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f92:	4621      	mov	r1, r4
 8004f94:	eb12 0801 	adds.w	r8, r2, r1
 8004f98:	4629      	mov	r1, r5
 8004f9a:	eb43 0901 	adc.w	r9, r3, r1
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fb2:	4690      	mov	r8, r2
 8004fb4:	4699      	mov	r9, r3
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	eb18 0303 	adds.w	r3, r8, r3
 8004fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fc0:	462b      	mov	r3, r5
 8004fc2:	eb49 0303 	adc.w	r3, r9, r3
 8004fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fde:	460b      	mov	r3, r1
 8004fe0:	18db      	adds	r3, r3, r3
 8004fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	eb42 0303 	adc.w	r3, r2, r3
 8004fea:	657b      	str	r3, [r7, #84]	; 0x54
 8004fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ff4:	f7fb f94c 	bl	8000290 <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4b61      	ldr	r3, [pc, #388]	; (8005184 <UART_SetConfig+0x2d4>)
 8004ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	011c      	lsls	r4, r3, #4
 8005006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800500a:	2200      	movs	r2, #0
 800500c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005010:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	1891      	adds	r1, r2, r2
 800501e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005020:	415b      	adcs	r3, r3
 8005022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005028:	4641      	mov	r1, r8
 800502a:	eb12 0a01 	adds.w	sl, r2, r1
 800502e:	4649      	mov	r1, r9
 8005030:	eb43 0b01 	adc.w	fp, r3, r1
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005048:	4692      	mov	sl, r2
 800504a:	469b      	mov	fp, r3
 800504c:	4643      	mov	r3, r8
 800504e:	eb1a 0303 	adds.w	r3, sl, r3
 8005052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005056:	464b      	mov	r3, r9
 8005058:	eb4b 0303 	adc.w	r3, fp, r3
 800505c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800506c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005074:	460b      	mov	r3, r1
 8005076:	18db      	adds	r3, r3, r3
 8005078:	643b      	str	r3, [r7, #64]	; 0x40
 800507a:	4613      	mov	r3, r2
 800507c:	eb42 0303 	adc.w	r3, r2, r3
 8005080:	647b      	str	r3, [r7, #68]	; 0x44
 8005082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800508a:	f7fb f901 	bl	8000290 <__aeabi_uldivmod>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4611      	mov	r1, r2
 8005094:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <UART_SetConfig+0x2d4>)
 8005096:	fba3 2301 	umull	r2, r3, r3, r1
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	2264      	movs	r2, #100	; 0x64
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	1acb      	subs	r3, r1, r3
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050aa:	4b36      	ldr	r3, [pc, #216]	; (8005184 <UART_SetConfig+0x2d4>)
 80050ac:	fba3 2302 	umull	r2, r3, r3, r2
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050b8:	441c      	add	r4, r3
 80050ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050cc:	4642      	mov	r2, r8
 80050ce:	464b      	mov	r3, r9
 80050d0:	1891      	adds	r1, r2, r2
 80050d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80050d4:	415b      	adcs	r3, r3
 80050d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050dc:	4641      	mov	r1, r8
 80050de:	1851      	adds	r1, r2, r1
 80050e0:	6339      	str	r1, [r7, #48]	; 0x30
 80050e2:	4649      	mov	r1, r9
 80050e4:	414b      	adcs	r3, r1
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050f4:	4659      	mov	r1, fp
 80050f6:	00cb      	lsls	r3, r1, #3
 80050f8:	4651      	mov	r1, sl
 80050fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050fe:	4651      	mov	r1, sl
 8005100:	00ca      	lsls	r2, r1, #3
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	4603      	mov	r3, r0
 8005108:	4642      	mov	r2, r8
 800510a:	189b      	adds	r3, r3, r2
 800510c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005110:	464b      	mov	r3, r9
 8005112:	460a      	mov	r2, r1
 8005114:	eb42 0303 	adc.w	r3, r2, r3
 8005118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005128:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800512c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005130:	460b      	mov	r3, r1
 8005132:	18db      	adds	r3, r3, r3
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
 8005136:	4613      	mov	r3, r2
 8005138:	eb42 0303 	adc.w	r3, r2, r3
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005146:	f7fb f8a3 	bl	8000290 <__aeabi_uldivmod>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <UART_SetConfig+0x2d4>)
 8005150:	fba3 1302 	umull	r1, r3, r3, r2
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	2164      	movs	r1, #100	; 0x64
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	3332      	adds	r3, #50	; 0x32
 8005162:	4a08      	ldr	r2, [pc, #32]	; (8005184 <UART_SetConfig+0x2d4>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	f003 0207 	and.w	r2, r3, #7
 800516e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4422      	add	r2, r4
 8005176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005178:	e105      	b.n	8005386 <UART_SetConfig+0x4d6>
 800517a:	bf00      	nop
 800517c:	40011000 	.word	0x40011000
 8005180:	40011400 	.word	0x40011400
 8005184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800518c:	2200      	movs	r2, #0
 800518e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005192:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800519a:	4642      	mov	r2, r8
 800519c:	464b      	mov	r3, r9
 800519e:	1891      	adds	r1, r2, r2
 80051a0:	6239      	str	r1, [r7, #32]
 80051a2:	415b      	adcs	r3, r3
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
 80051a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051aa:	4641      	mov	r1, r8
 80051ac:	1854      	adds	r4, r2, r1
 80051ae:	4649      	mov	r1, r9
 80051b0:	eb43 0501 	adc.w	r5, r3, r1
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	00eb      	lsls	r3, r5, #3
 80051be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051c2:	00e2      	lsls	r2, r4, #3
 80051c4:	4614      	mov	r4, r2
 80051c6:	461d      	mov	r5, r3
 80051c8:	4643      	mov	r3, r8
 80051ca:	18e3      	adds	r3, r4, r3
 80051cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051d0:	464b      	mov	r3, r9
 80051d2:	eb45 0303 	adc.w	r3, r5, r3
 80051d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051f6:	4629      	mov	r1, r5
 80051f8:	008b      	lsls	r3, r1, #2
 80051fa:	4621      	mov	r1, r4
 80051fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005200:	4621      	mov	r1, r4
 8005202:	008a      	lsls	r2, r1, #2
 8005204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005208:	f7fb f842 	bl	8000290 <__aeabi_uldivmod>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4b60      	ldr	r3, [pc, #384]	; (8005394 <UART_SetConfig+0x4e4>)
 8005212:	fba3 2302 	umull	r2, r3, r3, r2
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	011c      	lsls	r4, r3, #4
 800521a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800521e:	2200      	movs	r2, #0
 8005220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005224:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800522c:	4642      	mov	r2, r8
 800522e:	464b      	mov	r3, r9
 8005230:	1891      	adds	r1, r2, r2
 8005232:	61b9      	str	r1, [r7, #24]
 8005234:	415b      	adcs	r3, r3
 8005236:	61fb      	str	r3, [r7, #28]
 8005238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800523c:	4641      	mov	r1, r8
 800523e:	1851      	adds	r1, r2, r1
 8005240:	6139      	str	r1, [r7, #16]
 8005242:	4649      	mov	r1, r9
 8005244:	414b      	adcs	r3, r1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005254:	4659      	mov	r1, fp
 8005256:	00cb      	lsls	r3, r1, #3
 8005258:	4651      	mov	r1, sl
 800525a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800525e:	4651      	mov	r1, sl
 8005260:	00ca      	lsls	r2, r1, #3
 8005262:	4610      	mov	r0, r2
 8005264:	4619      	mov	r1, r3
 8005266:	4603      	mov	r3, r0
 8005268:	4642      	mov	r2, r8
 800526a:	189b      	adds	r3, r3, r2
 800526c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005270:	464b      	mov	r3, r9
 8005272:	460a      	mov	r2, r1
 8005274:	eb42 0303 	adc.w	r3, r2, r3
 8005278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	67bb      	str	r3, [r7, #120]	; 0x78
 8005286:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005294:	4649      	mov	r1, r9
 8005296:	008b      	lsls	r3, r1, #2
 8005298:	4641      	mov	r1, r8
 800529a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800529e:	4641      	mov	r1, r8
 80052a0:	008a      	lsls	r2, r1, #2
 80052a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052a6:	f7fa fff3 	bl	8000290 <__aeabi_uldivmod>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4b39      	ldr	r3, [pc, #228]	; (8005394 <UART_SetConfig+0x4e4>)
 80052b0:	fba3 1302 	umull	r1, r3, r3, r2
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	2164      	movs	r1, #100	; 0x64
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	3332      	adds	r3, #50	; 0x32
 80052c2:	4a34      	ldr	r2, [pc, #208]	; (8005394 <UART_SetConfig+0x4e4>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	095b      	lsrs	r3, r3, #5
 80052ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ce:	441c      	add	r4, r3
 80052d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d4:	2200      	movs	r2, #0
 80052d6:	673b      	str	r3, [r7, #112]	; 0x70
 80052d8:	677a      	str	r2, [r7, #116]	; 0x74
 80052da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052de:	4642      	mov	r2, r8
 80052e0:	464b      	mov	r3, r9
 80052e2:	1891      	adds	r1, r2, r2
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	415b      	adcs	r3, r3
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ee:	4641      	mov	r1, r8
 80052f0:	1851      	adds	r1, r2, r1
 80052f2:	6039      	str	r1, [r7, #0]
 80052f4:	4649      	mov	r1, r9
 80052f6:	414b      	adcs	r3, r1
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005306:	4659      	mov	r1, fp
 8005308:	00cb      	lsls	r3, r1, #3
 800530a:	4651      	mov	r1, sl
 800530c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005310:	4651      	mov	r1, sl
 8005312:	00ca      	lsls	r2, r1, #3
 8005314:	4610      	mov	r0, r2
 8005316:	4619      	mov	r1, r3
 8005318:	4603      	mov	r3, r0
 800531a:	4642      	mov	r2, r8
 800531c:	189b      	adds	r3, r3, r2
 800531e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005320:	464b      	mov	r3, r9
 8005322:	460a      	mov	r2, r1
 8005324:	eb42 0303 	adc.w	r3, r2, r3
 8005328:	66fb      	str	r3, [r7, #108]	; 0x6c
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	663b      	str	r3, [r7, #96]	; 0x60
 8005334:	667a      	str	r2, [r7, #100]	; 0x64
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005342:	4649      	mov	r1, r9
 8005344:	008b      	lsls	r3, r1, #2
 8005346:	4641      	mov	r1, r8
 8005348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800534c:	4641      	mov	r1, r8
 800534e:	008a      	lsls	r2, r1, #2
 8005350:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005354:	f7fa ff9c 	bl	8000290 <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <UART_SetConfig+0x4e4>)
 800535e:	fba3 1302 	umull	r1, r3, r3, r2
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2164      	movs	r1, #100	; 0x64
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	3332      	adds	r3, #50	; 0x32
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <UART_SetConfig+0x4e4>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	f003 020f 	and.w	r2, r3, #15
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4422      	add	r2, r4
 8005384:	609a      	str	r2, [r3, #8]
}
 8005386:	bf00      	nop
 8005388:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800538c:	46bd      	mov	sp, r7
 800538e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005392:	bf00      	nop
 8005394:	51eb851f 	.word	0x51eb851f

08005398 <__errno>:
 8005398:	4b01      	ldr	r3, [pc, #4]	; (80053a0 <__errno+0x8>)
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	2000000c 	.word	0x2000000c

080053a4 <__libc_init_array>:
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	4d0d      	ldr	r5, [pc, #52]	; (80053dc <__libc_init_array+0x38>)
 80053a8:	4c0d      	ldr	r4, [pc, #52]	; (80053e0 <__libc_init_array+0x3c>)
 80053aa:	1b64      	subs	r4, r4, r5
 80053ac:	10a4      	asrs	r4, r4, #2
 80053ae:	2600      	movs	r6, #0
 80053b0:	42a6      	cmp	r6, r4
 80053b2:	d109      	bne.n	80053c8 <__libc_init_array+0x24>
 80053b4:	4d0b      	ldr	r5, [pc, #44]	; (80053e4 <__libc_init_array+0x40>)
 80053b6:	4c0c      	ldr	r4, [pc, #48]	; (80053e8 <__libc_init_array+0x44>)
 80053b8:	f001 f824 	bl	8006404 <_init>
 80053bc:	1b64      	subs	r4, r4, r5
 80053be:	10a4      	asrs	r4, r4, #2
 80053c0:	2600      	movs	r6, #0
 80053c2:	42a6      	cmp	r6, r4
 80053c4:	d105      	bne.n	80053d2 <__libc_init_array+0x2e>
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
 80053c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053cc:	4798      	blx	r3
 80053ce:	3601      	adds	r6, #1
 80053d0:	e7ee      	b.n	80053b0 <__libc_init_array+0xc>
 80053d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d6:	4798      	blx	r3
 80053d8:	3601      	adds	r6, #1
 80053da:	e7f2      	b.n	80053c2 <__libc_init_array+0x1e>
 80053dc:	080065a0 	.word	0x080065a0
 80053e0:	080065a0 	.word	0x080065a0
 80053e4:	080065a0 	.word	0x080065a0
 80053e8:	080065a4 	.word	0x080065a4

080053ec <memset>:
 80053ec:	4402      	add	r2, r0
 80053ee:	4603      	mov	r3, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	f803 1b01 	strb.w	r1, [r3], #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <iprintf>:
 80053fc:	b40f      	push	{r0, r1, r2, r3}
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <iprintf+0x2c>)
 8005400:	b513      	push	{r0, r1, r4, lr}
 8005402:	681c      	ldr	r4, [r3, #0]
 8005404:	b124      	cbz	r4, 8005410 <iprintf+0x14>
 8005406:	69a3      	ldr	r3, [r4, #24]
 8005408:	b913      	cbnz	r3, 8005410 <iprintf+0x14>
 800540a:	4620      	mov	r0, r4
 800540c:	f000 fa5e 	bl	80058cc <__sinit>
 8005410:	ab05      	add	r3, sp, #20
 8005412:	9a04      	ldr	r2, [sp, #16]
 8005414:	68a1      	ldr	r1, [r4, #8]
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	4620      	mov	r0, r4
 800541a:	f000 fc67 	bl	8005cec <_vfiprintf_r>
 800541e:	b002      	add	sp, #8
 8005420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005424:	b004      	add	sp, #16
 8005426:	4770      	bx	lr
 8005428:	2000000c 	.word	0x2000000c

0800542c <_puts_r>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	460e      	mov	r6, r1
 8005430:	4605      	mov	r5, r0
 8005432:	b118      	cbz	r0, 800543c <_puts_r+0x10>
 8005434:	6983      	ldr	r3, [r0, #24]
 8005436:	b90b      	cbnz	r3, 800543c <_puts_r+0x10>
 8005438:	f000 fa48 	bl	80058cc <__sinit>
 800543c:	69ab      	ldr	r3, [r5, #24]
 800543e:	68ac      	ldr	r4, [r5, #8]
 8005440:	b913      	cbnz	r3, 8005448 <_puts_r+0x1c>
 8005442:	4628      	mov	r0, r5
 8005444:	f000 fa42 	bl	80058cc <__sinit>
 8005448:	4b2c      	ldr	r3, [pc, #176]	; (80054fc <_puts_r+0xd0>)
 800544a:	429c      	cmp	r4, r3
 800544c:	d120      	bne.n	8005490 <_puts_r+0x64>
 800544e:	686c      	ldr	r4, [r5, #4]
 8005450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005452:	07db      	lsls	r3, r3, #31
 8005454:	d405      	bmi.n	8005462 <_puts_r+0x36>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	0598      	lsls	r0, r3, #22
 800545a:	d402      	bmi.n	8005462 <_puts_r+0x36>
 800545c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800545e:	f000 fad3 	bl	8005a08 <__retarget_lock_acquire_recursive>
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	0719      	lsls	r1, r3, #28
 8005466:	d51d      	bpl.n	80054a4 <_puts_r+0x78>
 8005468:	6923      	ldr	r3, [r4, #16]
 800546a:	b1db      	cbz	r3, 80054a4 <_puts_r+0x78>
 800546c:	3e01      	subs	r6, #1
 800546e:	68a3      	ldr	r3, [r4, #8]
 8005470:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005474:	3b01      	subs	r3, #1
 8005476:	60a3      	str	r3, [r4, #8]
 8005478:	bb39      	cbnz	r1, 80054ca <_puts_r+0x9e>
 800547a:	2b00      	cmp	r3, #0
 800547c:	da38      	bge.n	80054f0 <_puts_r+0xc4>
 800547e:	4622      	mov	r2, r4
 8005480:	210a      	movs	r1, #10
 8005482:	4628      	mov	r0, r5
 8005484:	f000 f848 	bl	8005518 <__swbuf_r>
 8005488:	3001      	adds	r0, #1
 800548a:	d011      	beq.n	80054b0 <_puts_r+0x84>
 800548c:	250a      	movs	r5, #10
 800548e:	e011      	b.n	80054b4 <_puts_r+0x88>
 8005490:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <_puts_r+0xd4>)
 8005492:	429c      	cmp	r4, r3
 8005494:	d101      	bne.n	800549a <_puts_r+0x6e>
 8005496:	68ac      	ldr	r4, [r5, #8]
 8005498:	e7da      	b.n	8005450 <_puts_r+0x24>
 800549a:	4b1a      	ldr	r3, [pc, #104]	; (8005504 <_puts_r+0xd8>)
 800549c:	429c      	cmp	r4, r3
 800549e:	bf08      	it	eq
 80054a0:	68ec      	ldreq	r4, [r5, #12]
 80054a2:	e7d5      	b.n	8005450 <_puts_r+0x24>
 80054a4:	4621      	mov	r1, r4
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 f888 	bl	80055bc <__swsetup_r>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d0dd      	beq.n	800546c <_puts_r+0x40>
 80054b0:	f04f 35ff 	mov.w	r5, #4294967295
 80054b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054b6:	07da      	lsls	r2, r3, #31
 80054b8:	d405      	bmi.n	80054c6 <_puts_r+0x9a>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	059b      	lsls	r3, r3, #22
 80054be:	d402      	bmi.n	80054c6 <_puts_r+0x9a>
 80054c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054c2:	f000 faa2 	bl	8005a0a <__retarget_lock_release_recursive>
 80054c6:	4628      	mov	r0, r5
 80054c8:	bd70      	pop	{r4, r5, r6, pc}
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	da04      	bge.n	80054d8 <_puts_r+0xac>
 80054ce:	69a2      	ldr	r2, [r4, #24]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	dc06      	bgt.n	80054e2 <_puts_r+0xb6>
 80054d4:	290a      	cmp	r1, #10
 80054d6:	d004      	beq.n	80054e2 <_puts_r+0xb6>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	6022      	str	r2, [r4, #0]
 80054de:	7019      	strb	r1, [r3, #0]
 80054e0:	e7c5      	b.n	800546e <_puts_r+0x42>
 80054e2:	4622      	mov	r2, r4
 80054e4:	4628      	mov	r0, r5
 80054e6:	f000 f817 	bl	8005518 <__swbuf_r>
 80054ea:	3001      	adds	r0, #1
 80054ec:	d1bf      	bne.n	800546e <_puts_r+0x42>
 80054ee:	e7df      	b.n	80054b0 <_puts_r+0x84>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	250a      	movs	r5, #10
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	6022      	str	r2, [r4, #0]
 80054f8:	701d      	strb	r5, [r3, #0]
 80054fa:	e7db      	b.n	80054b4 <_puts_r+0x88>
 80054fc:	08006524 	.word	0x08006524
 8005500:	08006544 	.word	0x08006544
 8005504:	08006504 	.word	0x08006504

08005508 <puts>:
 8005508:	4b02      	ldr	r3, [pc, #8]	; (8005514 <puts+0xc>)
 800550a:	4601      	mov	r1, r0
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	f7ff bf8d 	b.w	800542c <_puts_r>
 8005512:	bf00      	nop
 8005514:	2000000c 	.word	0x2000000c

08005518 <__swbuf_r>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	460e      	mov	r6, r1
 800551c:	4614      	mov	r4, r2
 800551e:	4605      	mov	r5, r0
 8005520:	b118      	cbz	r0, 800552a <__swbuf_r+0x12>
 8005522:	6983      	ldr	r3, [r0, #24]
 8005524:	b90b      	cbnz	r3, 800552a <__swbuf_r+0x12>
 8005526:	f000 f9d1 	bl	80058cc <__sinit>
 800552a:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <__swbuf_r+0x98>)
 800552c:	429c      	cmp	r4, r3
 800552e:	d12b      	bne.n	8005588 <__swbuf_r+0x70>
 8005530:	686c      	ldr	r4, [r5, #4]
 8005532:	69a3      	ldr	r3, [r4, #24]
 8005534:	60a3      	str	r3, [r4, #8]
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	071a      	lsls	r2, r3, #28
 800553a:	d52f      	bpl.n	800559c <__swbuf_r+0x84>
 800553c:	6923      	ldr	r3, [r4, #16]
 800553e:	b36b      	cbz	r3, 800559c <__swbuf_r+0x84>
 8005540:	6923      	ldr	r3, [r4, #16]
 8005542:	6820      	ldr	r0, [r4, #0]
 8005544:	1ac0      	subs	r0, r0, r3
 8005546:	6963      	ldr	r3, [r4, #20]
 8005548:	b2f6      	uxtb	r6, r6
 800554a:	4283      	cmp	r3, r0
 800554c:	4637      	mov	r7, r6
 800554e:	dc04      	bgt.n	800555a <__swbuf_r+0x42>
 8005550:	4621      	mov	r1, r4
 8005552:	4628      	mov	r0, r5
 8005554:	f000 f926 	bl	80057a4 <_fflush_r>
 8005558:	bb30      	cbnz	r0, 80055a8 <__swbuf_r+0x90>
 800555a:	68a3      	ldr	r3, [r4, #8]
 800555c:	3b01      	subs	r3, #1
 800555e:	60a3      	str	r3, [r4, #8]
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	6022      	str	r2, [r4, #0]
 8005566:	701e      	strb	r6, [r3, #0]
 8005568:	6963      	ldr	r3, [r4, #20]
 800556a:	3001      	adds	r0, #1
 800556c:	4283      	cmp	r3, r0
 800556e:	d004      	beq.n	800557a <__swbuf_r+0x62>
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	07db      	lsls	r3, r3, #31
 8005574:	d506      	bpl.n	8005584 <__swbuf_r+0x6c>
 8005576:	2e0a      	cmp	r6, #10
 8005578:	d104      	bne.n	8005584 <__swbuf_r+0x6c>
 800557a:	4621      	mov	r1, r4
 800557c:	4628      	mov	r0, r5
 800557e:	f000 f911 	bl	80057a4 <_fflush_r>
 8005582:	b988      	cbnz	r0, 80055a8 <__swbuf_r+0x90>
 8005584:	4638      	mov	r0, r7
 8005586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <__swbuf_r+0x9c>)
 800558a:	429c      	cmp	r4, r3
 800558c:	d101      	bne.n	8005592 <__swbuf_r+0x7a>
 800558e:	68ac      	ldr	r4, [r5, #8]
 8005590:	e7cf      	b.n	8005532 <__swbuf_r+0x1a>
 8005592:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <__swbuf_r+0xa0>)
 8005594:	429c      	cmp	r4, r3
 8005596:	bf08      	it	eq
 8005598:	68ec      	ldreq	r4, [r5, #12]
 800559a:	e7ca      	b.n	8005532 <__swbuf_r+0x1a>
 800559c:	4621      	mov	r1, r4
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 f80c 	bl	80055bc <__swsetup_r>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d0cb      	beq.n	8005540 <__swbuf_r+0x28>
 80055a8:	f04f 37ff 	mov.w	r7, #4294967295
 80055ac:	e7ea      	b.n	8005584 <__swbuf_r+0x6c>
 80055ae:	bf00      	nop
 80055b0:	08006524 	.word	0x08006524
 80055b4:	08006544 	.word	0x08006544
 80055b8:	08006504 	.word	0x08006504

080055bc <__swsetup_r>:
 80055bc:	4b32      	ldr	r3, [pc, #200]	; (8005688 <__swsetup_r+0xcc>)
 80055be:	b570      	push	{r4, r5, r6, lr}
 80055c0:	681d      	ldr	r5, [r3, #0]
 80055c2:	4606      	mov	r6, r0
 80055c4:	460c      	mov	r4, r1
 80055c6:	b125      	cbz	r5, 80055d2 <__swsetup_r+0x16>
 80055c8:	69ab      	ldr	r3, [r5, #24]
 80055ca:	b913      	cbnz	r3, 80055d2 <__swsetup_r+0x16>
 80055cc:	4628      	mov	r0, r5
 80055ce:	f000 f97d 	bl	80058cc <__sinit>
 80055d2:	4b2e      	ldr	r3, [pc, #184]	; (800568c <__swsetup_r+0xd0>)
 80055d4:	429c      	cmp	r4, r3
 80055d6:	d10f      	bne.n	80055f8 <__swsetup_r+0x3c>
 80055d8:	686c      	ldr	r4, [r5, #4]
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e0:	0719      	lsls	r1, r3, #28
 80055e2:	d42c      	bmi.n	800563e <__swsetup_r+0x82>
 80055e4:	06dd      	lsls	r5, r3, #27
 80055e6:	d411      	bmi.n	800560c <__swsetup_r+0x50>
 80055e8:	2309      	movs	r3, #9
 80055ea:	6033      	str	r3, [r6, #0]
 80055ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055f0:	81a3      	strh	r3, [r4, #12]
 80055f2:	f04f 30ff 	mov.w	r0, #4294967295
 80055f6:	e03e      	b.n	8005676 <__swsetup_r+0xba>
 80055f8:	4b25      	ldr	r3, [pc, #148]	; (8005690 <__swsetup_r+0xd4>)
 80055fa:	429c      	cmp	r4, r3
 80055fc:	d101      	bne.n	8005602 <__swsetup_r+0x46>
 80055fe:	68ac      	ldr	r4, [r5, #8]
 8005600:	e7eb      	b.n	80055da <__swsetup_r+0x1e>
 8005602:	4b24      	ldr	r3, [pc, #144]	; (8005694 <__swsetup_r+0xd8>)
 8005604:	429c      	cmp	r4, r3
 8005606:	bf08      	it	eq
 8005608:	68ec      	ldreq	r4, [r5, #12]
 800560a:	e7e6      	b.n	80055da <__swsetup_r+0x1e>
 800560c:	0758      	lsls	r0, r3, #29
 800560e:	d512      	bpl.n	8005636 <__swsetup_r+0x7a>
 8005610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005612:	b141      	cbz	r1, 8005626 <__swsetup_r+0x6a>
 8005614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005618:	4299      	cmp	r1, r3
 800561a:	d002      	beq.n	8005622 <__swsetup_r+0x66>
 800561c:	4630      	mov	r0, r6
 800561e:	f000 fa5b 	bl	8005ad8 <_free_r>
 8005622:	2300      	movs	r3, #0
 8005624:	6363      	str	r3, [r4, #52]	; 0x34
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800562c:	81a3      	strh	r3, [r4, #12]
 800562e:	2300      	movs	r3, #0
 8005630:	6063      	str	r3, [r4, #4]
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	89a3      	ldrh	r3, [r4, #12]
 8005638:	f043 0308 	orr.w	r3, r3, #8
 800563c:	81a3      	strh	r3, [r4, #12]
 800563e:	6923      	ldr	r3, [r4, #16]
 8005640:	b94b      	cbnz	r3, 8005656 <__swsetup_r+0x9a>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800564c:	d003      	beq.n	8005656 <__swsetup_r+0x9a>
 800564e:	4621      	mov	r1, r4
 8005650:	4630      	mov	r0, r6
 8005652:	f000 fa01 	bl	8005a58 <__smakebuf_r>
 8005656:	89a0      	ldrh	r0, [r4, #12]
 8005658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800565c:	f010 0301 	ands.w	r3, r0, #1
 8005660:	d00a      	beq.n	8005678 <__swsetup_r+0xbc>
 8005662:	2300      	movs	r3, #0
 8005664:	60a3      	str	r3, [r4, #8]
 8005666:	6963      	ldr	r3, [r4, #20]
 8005668:	425b      	negs	r3, r3
 800566a:	61a3      	str	r3, [r4, #24]
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	b943      	cbnz	r3, 8005682 <__swsetup_r+0xc6>
 8005670:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005674:	d1ba      	bne.n	80055ec <__swsetup_r+0x30>
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	0781      	lsls	r1, r0, #30
 800567a:	bf58      	it	pl
 800567c:	6963      	ldrpl	r3, [r4, #20]
 800567e:	60a3      	str	r3, [r4, #8]
 8005680:	e7f4      	b.n	800566c <__swsetup_r+0xb0>
 8005682:	2000      	movs	r0, #0
 8005684:	e7f7      	b.n	8005676 <__swsetup_r+0xba>
 8005686:	bf00      	nop
 8005688:	2000000c 	.word	0x2000000c
 800568c:	08006524 	.word	0x08006524
 8005690:	08006544 	.word	0x08006544
 8005694:	08006504 	.word	0x08006504

08005698 <__sflush_r>:
 8005698:	898a      	ldrh	r2, [r1, #12]
 800569a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800569e:	4605      	mov	r5, r0
 80056a0:	0710      	lsls	r0, r2, #28
 80056a2:	460c      	mov	r4, r1
 80056a4:	d458      	bmi.n	8005758 <__sflush_r+0xc0>
 80056a6:	684b      	ldr	r3, [r1, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	dc05      	bgt.n	80056b8 <__sflush_r+0x20>
 80056ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	dc02      	bgt.n	80056b8 <__sflush_r+0x20>
 80056b2:	2000      	movs	r0, #0
 80056b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056ba:	2e00      	cmp	r6, #0
 80056bc:	d0f9      	beq.n	80056b2 <__sflush_r+0x1a>
 80056be:	2300      	movs	r3, #0
 80056c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056c4:	682f      	ldr	r7, [r5, #0]
 80056c6:	602b      	str	r3, [r5, #0]
 80056c8:	d032      	beq.n	8005730 <__sflush_r+0x98>
 80056ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	075a      	lsls	r2, r3, #29
 80056d0:	d505      	bpl.n	80056de <__sflush_r+0x46>
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	1ac0      	subs	r0, r0, r3
 80056d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056d8:	b10b      	cbz	r3, 80056de <__sflush_r+0x46>
 80056da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056dc:	1ac0      	subs	r0, r0, r3
 80056de:	2300      	movs	r3, #0
 80056e0:	4602      	mov	r2, r0
 80056e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056e4:	6a21      	ldr	r1, [r4, #32]
 80056e6:	4628      	mov	r0, r5
 80056e8:	47b0      	blx	r6
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	d106      	bne.n	80056fe <__sflush_r+0x66>
 80056f0:	6829      	ldr	r1, [r5, #0]
 80056f2:	291d      	cmp	r1, #29
 80056f4:	d82c      	bhi.n	8005750 <__sflush_r+0xb8>
 80056f6:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <__sflush_r+0x108>)
 80056f8:	40ca      	lsrs	r2, r1
 80056fa:	07d6      	lsls	r6, r2, #31
 80056fc:	d528      	bpl.n	8005750 <__sflush_r+0xb8>
 80056fe:	2200      	movs	r2, #0
 8005700:	6062      	str	r2, [r4, #4]
 8005702:	04d9      	lsls	r1, r3, #19
 8005704:	6922      	ldr	r2, [r4, #16]
 8005706:	6022      	str	r2, [r4, #0]
 8005708:	d504      	bpl.n	8005714 <__sflush_r+0x7c>
 800570a:	1c42      	adds	r2, r0, #1
 800570c:	d101      	bne.n	8005712 <__sflush_r+0x7a>
 800570e:	682b      	ldr	r3, [r5, #0]
 8005710:	b903      	cbnz	r3, 8005714 <__sflush_r+0x7c>
 8005712:	6560      	str	r0, [r4, #84]	; 0x54
 8005714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005716:	602f      	str	r7, [r5, #0]
 8005718:	2900      	cmp	r1, #0
 800571a:	d0ca      	beq.n	80056b2 <__sflush_r+0x1a>
 800571c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005720:	4299      	cmp	r1, r3
 8005722:	d002      	beq.n	800572a <__sflush_r+0x92>
 8005724:	4628      	mov	r0, r5
 8005726:	f000 f9d7 	bl	8005ad8 <_free_r>
 800572a:	2000      	movs	r0, #0
 800572c:	6360      	str	r0, [r4, #52]	; 0x34
 800572e:	e7c1      	b.n	80056b4 <__sflush_r+0x1c>
 8005730:	6a21      	ldr	r1, [r4, #32]
 8005732:	2301      	movs	r3, #1
 8005734:	4628      	mov	r0, r5
 8005736:	47b0      	blx	r6
 8005738:	1c41      	adds	r1, r0, #1
 800573a:	d1c7      	bne.n	80056cc <__sflush_r+0x34>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0c4      	beq.n	80056cc <__sflush_r+0x34>
 8005742:	2b1d      	cmp	r3, #29
 8005744:	d001      	beq.n	800574a <__sflush_r+0xb2>
 8005746:	2b16      	cmp	r3, #22
 8005748:	d101      	bne.n	800574e <__sflush_r+0xb6>
 800574a:	602f      	str	r7, [r5, #0]
 800574c:	e7b1      	b.n	80056b2 <__sflush_r+0x1a>
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005754:	81a3      	strh	r3, [r4, #12]
 8005756:	e7ad      	b.n	80056b4 <__sflush_r+0x1c>
 8005758:	690f      	ldr	r7, [r1, #16]
 800575a:	2f00      	cmp	r7, #0
 800575c:	d0a9      	beq.n	80056b2 <__sflush_r+0x1a>
 800575e:	0793      	lsls	r3, r2, #30
 8005760:	680e      	ldr	r6, [r1, #0]
 8005762:	bf08      	it	eq
 8005764:	694b      	ldreq	r3, [r1, #20]
 8005766:	600f      	str	r7, [r1, #0]
 8005768:	bf18      	it	ne
 800576a:	2300      	movne	r3, #0
 800576c:	eba6 0807 	sub.w	r8, r6, r7
 8005770:	608b      	str	r3, [r1, #8]
 8005772:	f1b8 0f00 	cmp.w	r8, #0
 8005776:	dd9c      	ble.n	80056b2 <__sflush_r+0x1a>
 8005778:	6a21      	ldr	r1, [r4, #32]
 800577a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800577c:	4643      	mov	r3, r8
 800577e:	463a      	mov	r2, r7
 8005780:	4628      	mov	r0, r5
 8005782:	47b0      	blx	r6
 8005784:	2800      	cmp	r0, #0
 8005786:	dc06      	bgt.n	8005796 <__sflush_r+0xfe>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800578e:	81a3      	strh	r3, [r4, #12]
 8005790:	f04f 30ff 	mov.w	r0, #4294967295
 8005794:	e78e      	b.n	80056b4 <__sflush_r+0x1c>
 8005796:	4407      	add	r7, r0
 8005798:	eba8 0800 	sub.w	r8, r8, r0
 800579c:	e7e9      	b.n	8005772 <__sflush_r+0xda>
 800579e:	bf00      	nop
 80057a0:	20400001 	.word	0x20400001

080057a4 <_fflush_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	690b      	ldr	r3, [r1, #16]
 80057a8:	4605      	mov	r5, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	b913      	cbnz	r3, 80057b4 <_fflush_r+0x10>
 80057ae:	2500      	movs	r5, #0
 80057b0:	4628      	mov	r0, r5
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	b118      	cbz	r0, 80057be <_fflush_r+0x1a>
 80057b6:	6983      	ldr	r3, [r0, #24]
 80057b8:	b90b      	cbnz	r3, 80057be <_fflush_r+0x1a>
 80057ba:	f000 f887 	bl	80058cc <__sinit>
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <_fflush_r+0x6c>)
 80057c0:	429c      	cmp	r4, r3
 80057c2:	d11b      	bne.n	80057fc <_fflush_r+0x58>
 80057c4:	686c      	ldr	r4, [r5, #4]
 80057c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0ef      	beq.n	80057ae <_fflush_r+0xa>
 80057ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057d0:	07d0      	lsls	r0, r2, #31
 80057d2:	d404      	bmi.n	80057de <_fflush_r+0x3a>
 80057d4:	0599      	lsls	r1, r3, #22
 80057d6:	d402      	bmi.n	80057de <_fflush_r+0x3a>
 80057d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057da:	f000 f915 	bl	8005a08 <__retarget_lock_acquire_recursive>
 80057de:	4628      	mov	r0, r5
 80057e0:	4621      	mov	r1, r4
 80057e2:	f7ff ff59 	bl	8005698 <__sflush_r>
 80057e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057e8:	07da      	lsls	r2, r3, #31
 80057ea:	4605      	mov	r5, r0
 80057ec:	d4e0      	bmi.n	80057b0 <_fflush_r+0xc>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	059b      	lsls	r3, r3, #22
 80057f2:	d4dd      	bmi.n	80057b0 <_fflush_r+0xc>
 80057f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057f6:	f000 f908 	bl	8005a0a <__retarget_lock_release_recursive>
 80057fa:	e7d9      	b.n	80057b0 <_fflush_r+0xc>
 80057fc:	4b05      	ldr	r3, [pc, #20]	; (8005814 <_fflush_r+0x70>)
 80057fe:	429c      	cmp	r4, r3
 8005800:	d101      	bne.n	8005806 <_fflush_r+0x62>
 8005802:	68ac      	ldr	r4, [r5, #8]
 8005804:	e7df      	b.n	80057c6 <_fflush_r+0x22>
 8005806:	4b04      	ldr	r3, [pc, #16]	; (8005818 <_fflush_r+0x74>)
 8005808:	429c      	cmp	r4, r3
 800580a:	bf08      	it	eq
 800580c:	68ec      	ldreq	r4, [r5, #12]
 800580e:	e7da      	b.n	80057c6 <_fflush_r+0x22>
 8005810:	08006524 	.word	0x08006524
 8005814:	08006544 	.word	0x08006544
 8005818:	08006504 	.word	0x08006504

0800581c <std>:
 800581c:	2300      	movs	r3, #0
 800581e:	b510      	push	{r4, lr}
 8005820:	4604      	mov	r4, r0
 8005822:	e9c0 3300 	strd	r3, r3, [r0]
 8005826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800582a:	6083      	str	r3, [r0, #8]
 800582c:	8181      	strh	r1, [r0, #12]
 800582e:	6643      	str	r3, [r0, #100]	; 0x64
 8005830:	81c2      	strh	r2, [r0, #14]
 8005832:	6183      	str	r3, [r0, #24]
 8005834:	4619      	mov	r1, r3
 8005836:	2208      	movs	r2, #8
 8005838:	305c      	adds	r0, #92	; 0x5c
 800583a:	f7ff fdd7 	bl	80053ec <memset>
 800583e:	4b05      	ldr	r3, [pc, #20]	; (8005854 <std+0x38>)
 8005840:	6263      	str	r3, [r4, #36]	; 0x24
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <std+0x3c>)
 8005844:	62a3      	str	r3, [r4, #40]	; 0x28
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <std+0x40>)
 8005848:	62e3      	str	r3, [r4, #44]	; 0x2c
 800584a:	4b05      	ldr	r3, [pc, #20]	; (8005860 <std+0x44>)
 800584c:	6224      	str	r4, [r4, #32]
 800584e:	6323      	str	r3, [r4, #48]	; 0x30
 8005850:	bd10      	pop	{r4, pc}
 8005852:	bf00      	nop
 8005854:	08006295 	.word	0x08006295
 8005858:	080062b7 	.word	0x080062b7
 800585c:	080062ef 	.word	0x080062ef
 8005860:	08006313 	.word	0x08006313

08005864 <_cleanup_r>:
 8005864:	4901      	ldr	r1, [pc, #4]	; (800586c <_cleanup_r+0x8>)
 8005866:	f000 b8af 	b.w	80059c8 <_fwalk_reent>
 800586a:	bf00      	nop
 800586c:	080057a5 	.word	0x080057a5

08005870 <__sfmoreglue>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	2268      	movs	r2, #104	; 0x68
 8005874:	1e4d      	subs	r5, r1, #1
 8005876:	4355      	muls	r5, r2
 8005878:	460e      	mov	r6, r1
 800587a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800587e:	f000 f997 	bl	8005bb0 <_malloc_r>
 8005882:	4604      	mov	r4, r0
 8005884:	b140      	cbz	r0, 8005898 <__sfmoreglue+0x28>
 8005886:	2100      	movs	r1, #0
 8005888:	e9c0 1600 	strd	r1, r6, [r0]
 800588c:	300c      	adds	r0, #12
 800588e:	60a0      	str	r0, [r4, #8]
 8005890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005894:	f7ff fdaa 	bl	80053ec <memset>
 8005898:	4620      	mov	r0, r4
 800589a:	bd70      	pop	{r4, r5, r6, pc}

0800589c <__sfp_lock_acquire>:
 800589c:	4801      	ldr	r0, [pc, #4]	; (80058a4 <__sfp_lock_acquire+0x8>)
 800589e:	f000 b8b3 	b.w	8005a08 <__retarget_lock_acquire_recursive>
 80058a2:	bf00      	nop
 80058a4:	2000021d 	.word	0x2000021d

080058a8 <__sfp_lock_release>:
 80058a8:	4801      	ldr	r0, [pc, #4]	; (80058b0 <__sfp_lock_release+0x8>)
 80058aa:	f000 b8ae 	b.w	8005a0a <__retarget_lock_release_recursive>
 80058ae:	bf00      	nop
 80058b0:	2000021d 	.word	0x2000021d

080058b4 <__sinit_lock_acquire>:
 80058b4:	4801      	ldr	r0, [pc, #4]	; (80058bc <__sinit_lock_acquire+0x8>)
 80058b6:	f000 b8a7 	b.w	8005a08 <__retarget_lock_acquire_recursive>
 80058ba:	bf00      	nop
 80058bc:	2000021e 	.word	0x2000021e

080058c0 <__sinit_lock_release>:
 80058c0:	4801      	ldr	r0, [pc, #4]	; (80058c8 <__sinit_lock_release+0x8>)
 80058c2:	f000 b8a2 	b.w	8005a0a <__retarget_lock_release_recursive>
 80058c6:	bf00      	nop
 80058c8:	2000021e 	.word	0x2000021e

080058cc <__sinit>:
 80058cc:	b510      	push	{r4, lr}
 80058ce:	4604      	mov	r4, r0
 80058d0:	f7ff fff0 	bl	80058b4 <__sinit_lock_acquire>
 80058d4:	69a3      	ldr	r3, [r4, #24]
 80058d6:	b11b      	cbz	r3, 80058e0 <__sinit+0x14>
 80058d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058dc:	f7ff bff0 	b.w	80058c0 <__sinit_lock_release>
 80058e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058e4:	6523      	str	r3, [r4, #80]	; 0x50
 80058e6:	4b13      	ldr	r3, [pc, #76]	; (8005934 <__sinit+0x68>)
 80058e8:	4a13      	ldr	r2, [pc, #76]	; (8005938 <__sinit+0x6c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	bf04      	itt	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	61a3      	streq	r3, [r4, #24]
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 f820 	bl	800593c <__sfp>
 80058fc:	6060      	str	r0, [r4, #4]
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 f81c 	bl	800593c <__sfp>
 8005904:	60a0      	str	r0, [r4, #8]
 8005906:	4620      	mov	r0, r4
 8005908:	f000 f818 	bl	800593c <__sfp>
 800590c:	2200      	movs	r2, #0
 800590e:	60e0      	str	r0, [r4, #12]
 8005910:	2104      	movs	r1, #4
 8005912:	6860      	ldr	r0, [r4, #4]
 8005914:	f7ff ff82 	bl	800581c <std>
 8005918:	68a0      	ldr	r0, [r4, #8]
 800591a:	2201      	movs	r2, #1
 800591c:	2109      	movs	r1, #9
 800591e:	f7ff ff7d 	bl	800581c <std>
 8005922:	68e0      	ldr	r0, [r4, #12]
 8005924:	2202      	movs	r2, #2
 8005926:	2112      	movs	r1, #18
 8005928:	f7ff ff78 	bl	800581c <std>
 800592c:	2301      	movs	r3, #1
 800592e:	61a3      	str	r3, [r4, #24]
 8005930:	e7d2      	b.n	80058d8 <__sinit+0xc>
 8005932:	bf00      	nop
 8005934:	08006500 	.word	0x08006500
 8005938:	08005865 	.word	0x08005865

0800593c <__sfp>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	4607      	mov	r7, r0
 8005940:	f7ff ffac 	bl	800589c <__sfp_lock_acquire>
 8005944:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <__sfp+0x84>)
 8005946:	681e      	ldr	r6, [r3, #0]
 8005948:	69b3      	ldr	r3, [r6, #24]
 800594a:	b913      	cbnz	r3, 8005952 <__sfp+0x16>
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff ffbd 	bl	80058cc <__sinit>
 8005952:	3648      	adds	r6, #72	; 0x48
 8005954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005958:	3b01      	subs	r3, #1
 800595a:	d503      	bpl.n	8005964 <__sfp+0x28>
 800595c:	6833      	ldr	r3, [r6, #0]
 800595e:	b30b      	cbz	r3, 80059a4 <__sfp+0x68>
 8005960:	6836      	ldr	r6, [r6, #0]
 8005962:	e7f7      	b.n	8005954 <__sfp+0x18>
 8005964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005968:	b9d5      	cbnz	r5, 80059a0 <__sfp+0x64>
 800596a:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <__sfp+0x88>)
 800596c:	60e3      	str	r3, [r4, #12]
 800596e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005972:	6665      	str	r5, [r4, #100]	; 0x64
 8005974:	f000 f847 	bl	8005a06 <__retarget_lock_init_recursive>
 8005978:	f7ff ff96 	bl	80058a8 <__sfp_lock_release>
 800597c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005980:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005984:	6025      	str	r5, [r4, #0]
 8005986:	61a5      	str	r5, [r4, #24]
 8005988:	2208      	movs	r2, #8
 800598a:	4629      	mov	r1, r5
 800598c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005990:	f7ff fd2c 	bl	80053ec <memset>
 8005994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800599c:	4620      	mov	r0, r4
 800599e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a0:	3468      	adds	r4, #104	; 0x68
 80059a2:	e7d9      	b.n	8005958 <__sfp+0x1c>
 80059a4:	2104      	movs	r1, #4
 80059a6:	4638      	mov	r0, r7
 80059a8:	f7ff ff62 	bl	8005870 <__sfmoreglue>
 80059ac:	4604      	mov	r4, r0
 80059ae:	6030      	str	r0, [r6, #0]
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d1d5      	bne.n	8005960 <__sfp+0x24>
 80059b4:	f7ff ff78 	bl	80058a8 <__sfp_lock_release>
 80059b8:	230c      	movs	r3, #12
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	e7ee      	b.n	800599c <__sfp+0x60>
 80059be:	bf00      	nop
 80059c0:	08006500 	.word	0x08006500
 80059c4:	ffff0001 	.word	0xffff0001

080059c8 <_fwalk_reent>:
 80059c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059cc:	4606      	mov	r6, r0
 80059ce:	4688      	mov	r8, r1
 80059d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059d4:	2700      	movs	r7, #0
 80059d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059da:	f1b9 0901 	subs.w	r9, r9, #1
 80059de:	d505      	bpl.n	80059ec <_fwalk_reent+0x24>
 80059e0:	6824      	ldr	r4, [r4, #0]
 80059e2:	2c00      	cmp	r4, #0
 80059e4:	d1f7      	bne.n	80059d6 <_fwalk_reent+0xe>
 80059e6:	4638      	mov	r0, r7
 80059e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ec:	89ab      	ldrh	r3, [r5, #12]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d907      	bls.n	8005a02 <_fwalk_reent+0x3a>
 80059f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059f6:	3301      	adds	r3, #1
 80059f8:	d003      	beq.n	8005a02 <_fwalk_reent+0x3a>
 80059fa:	4629      	mov	r1, r5
 80059fc:	4630      	mov	r0, r6
 80059fe:	47c0      	blx	r8
 8005a00:	4307      	orrs	r7, r0
 8005a02:	3568      	adds	r5, #104	; 0x68
 8005a04:	e7e9      	b.n	80059da <_fwalk_reent+0x12>

08005a06 <__retarget_lock_init_recursive>:
 8005a06:	4770      	bx	lr

08005a08 <__retarget_lock_acquire_recursive>:
 8005a08:	4770      	bx	lr

08005a0a <__retarget_lock_release_recursive>:
 8005a0a:	4770      	bx	lr

08005a0c <__swhatbuf_r>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	460e      	mov	r6, r1
 8005a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a14:	2900      	cmp	r1, #0
 8005a16:	b096      	sub	sp, #88	; 0x58
 8005a18:	4614      	mov	r4, r2
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	da08      	bge.n	8005a30 <__swhatbuf_r+0x24>
 8005a1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	602a      	str	r2, [r5, #0]
 8005a26:	061a      	lsls	r2, r3, #24
 8005a28:	d410      	bmi.n	8005a4c <__swhatbuf_r+0x40>
 8005a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a2e:	e00e      	b.n	8005a4e <__swhatbuf_r+0x42>
 8005a30:	466a      	mov	r2, sp
 8005a32:	f000 fc95 	bl	8006360 <_fstat_r>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	dbf1      	blt.n	8005a1e <__swhatbuf_r+0x12>
 8005a3a:	9a01      	ldr	r2, [sp, #4]
 8005a3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a44:	425a      	negs	r2, r3
 8005a46:	415a      	adcs	r2, r3
 8005a48:	602a      	str	r2, [r5, #0]
 8005a4a:	e7ee      	b.n	8005a2a <__swhatbuf_r+0x1e>
 8005a4c:	2340      	movs	r3, #64	; 0x40
 8005a4e:	2000      	movs	r0, #0
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	b016      	add	sp, #88	; 0x58
 8005a54:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a58 <__smakebuf_r>:
 8005a58:	898b      	ldrh	r3, [r1, #12]
 8005a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a5c:	079d      	lsls	r5, r3, #30
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460c      	mov	r4, r1
 8005a62:	d507      	bpl.n	8005a74 <__smakebuf_r+0x1c>
 8005a64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	6123      	str	r3, [r4, #16]
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	6163      	str	r3, [r4, #20]
 8005a70:	b002      	add	sp, #8
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	ab01      	add	r3, sp, #4
 8005a76:	466a      	mov	r2, sp
 8005a78:	f7ff ffc8 	bl	8005a0c <__swhatbuf_r>
 8005a7c:	9900      	ldr	r1, [sp, #0]
 8005a7e:	4605      	mov	r5, r0
 8005a80:	4630      	mov	r0, r6
 8005a82:	f000 f895 	bl	8005bb0 <_malloc_r>
 8005a86:	b948      	cbnz	r0, 8005a9c <__smakebuf_r+0x44>
 8005a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a8c:	059a      	lsls	r2, r3, #22
 8005a8e:	d4ef      	bmi.n	8005a70 <__smakebuf_r+0x18>
 8005a90:	f023 0303 	bic.w	r3, r3, #3
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	81a3      	strh	r3, [r4, #12]
 8005a9a:	e7e3      	b.n	8005a64 <__smakebuf_r+0xc>
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <__smakebuf_r+0x7c>)
 8005a9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	6020      	str	r0, [r4, #0]
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	9b00      	ldr	r3, [sp, #0]
 8005aac:	6163      	str	r3, [r4, #20]
 8005aae:	9b01      	ldr	r3, [sp, #4]
 8005ab0:	6120      	str	r0, [r4, #16]
 8005ab2:	b15b      	cbz	r3, 8005acc <__smakebuf_r+0x74>
 8005ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f000 fc63 	bl	8006384 <_isatty_r>
 8005abe:	b128      	cbz	r0, 8005acc <__smakebuf_r+0x74>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	81a3      	strh	r3, [r4, #12]
 8005acc:	89a0      	ldrh	r0, [r4, #12]
 8005ace:	4305      	orrs	r5, r0
 8005ad0:	81a5      	strh	r5, [r4, #12]
 8005ad2:	e7cd      	b.n	8005a70 <__smakebuf_r+0x18>
 8005ad4:	08005865 	.word	0x08005865

08005ad8 <_free_r>:
 8005ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ada:	2900      	cmp	r1, #0
 8005adc:	d044      	beq.n	8005b68 <_free_r+0x90>
 8005ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ae2:	9001      	str	r0, [sp, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f1a1 0404 	sub.w	r4, r1, #4
 8005aea:	bfb8      	it	lt
 8005aec:	18e4      	addlt	r4, r4, r3
 8005aee:	f000 fc6b 	bl	80063c8 <__malloc_lock>
 8005af2:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <_free_r+0x94>)
 8005af4:	9801      	ldr	r0, [sp, #4]
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	b933      	cbnz	r3, 8005b08 <_free_r+0x30>
 8005afa:	6063      	str	r3, [r4, #4]
 8005afc:	6014      	str	r4, [r2, #0]
 8005afe:	b003      	add	sp, #12
 8005b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b04:	f000 bc66 	b.w	80063d4 <__malloc_unlock>
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d908      	bls.n	8005b1e <_free_r+0x46>
 8005b0c:	6825      	ldr	r5, [r4, #0]
 8005b0e:	1961      	adds	r1, r4, r5
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf01      	itttt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	1949      	addeq	r1, r1, r5
 8005b1a:	6021      	streq	r1, [r4, #0]
 8005b1c:	e7ed      	b.n	8005afa <_free_r+0x22>
 8005b1e:	461a      	mov	r2, r3
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	b10b      	cbz	r3, 8005b28 <_free_r+0x50>
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	d9fa      	bls.n	8005b1e <_free_r+0x46>
 8005b28:	6811      	ldr	r1, [r2, #0]
 8005b2a:	1855      	adds	r5, r2, r1
 8005b2c:	42a5      	cmp	r5, r4
 8005b2e:	d10b      	bne.n	8005b48 <_free_r+0x70>
 8005b30:	6824      	ldr	r4, [r4, #0]
 8005b32:	4421      	add	r1, r4
 8005b34:	1854      	adds	r4, r2, r1
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	6011      	str	r1, [r2, #0]
 8005b3a:	d1e0      	bne.n	8005afe <_free_r+0x26>
 8005b3c:	681c      	ldr	r4, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	6053      	str	r3, [r2, #4]
 8005b42:	4421      	add	r1, r4
 8005b44:	6011      	str	r1, [r2, #0]
 8005b46:	e7da      	b.n	8005afe <_free_r+0x26>
 8005b48:	d902      	bls.n	8005b50 <_free_r+0x78>
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	6003      	str	r3, [r0, #0]
 8005b4e:	e7d6      	b.n	8005afe <_free_r+0x26>
 8005b50:	6825      	ldr	r5, [r4, #0]
 8005b52:	1961      	adds	r1, r4, r5
 8005b54:	428b      	cmp	r3, r1
 8005b56:	bf04      	itt	eq
 8005b58:	6819      	ldreq	r1, [r3, #0]
 8005b5a:	685b      	ldreq	r3, [r3, #4]
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	bf04      	itt	eq
 8005b60:	1949      	addeq	r1, r1, r5
 8005b62:	6021      	streq	r1, [r4, #0]
 8005b64:	6054      	str	r4, [r2, #4]
 8005b66:	e7ca      	b.n	8005afe <_free_r+0x26>
 8005b68:	b003      	add	sp, #12
 8005b6a:	bd30      	pop	{r4, r5, pc}
 8005b6c:	20000220 	.word	0x20000220

08005b70 <sbrk_aligned>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	4e0e      	ldr	r6, [pc, #56]	; (8005bac <sbrk_aligned+0x3c>)
 8005b74:	460c      	mov	r4, r1
 8005b76:	6831      	ldr	r1, [r6, #0]
 8005b78:	4605      	mov	r5, r0
 8005b7a:	b911      	cbnz	r1, 8005b82 <sbrk_aligned+0x12>
 8005b7c:	f000 fb7a 	bl	8006274 <_sbrk_r>
 8005b80:	6030      	str	r0, [r6, #0]
 8005b82:	4621      	mov	r1, r4
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 fb75 	bl	8006274 <_sbrk_r>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	d00a      	beq.n	8005ba4 <sbrk_aligned+0x34>
 8005b8e:	1cc4      	adds	r4, r0, #3
 8005b90:	f024 0403 	bic.w	r4, r4, #3
 8005b94:	42a0      	cmp	r0, r4
 8005b96:	d007      	beq.n	8005ba8 <sbrk_aligned+0x38>
 8005b98:	1a21      	subs	r1, r4, r0
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 fb6a 	bl	8006274 <_sbrk_r>
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d101      	bne.n	8005ba8 <sbrk_aligned+0x38>
 8005ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ba8:	4620      	mov	r0, r4
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	20000224 	.word	0x20000224

08005bb0 <_malloc_r>:
 8005bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb4:	1ccd      	adds	r5, r1, #3
 8005bb6:	f025 0503 	bic.w	r5, r5, #3
 8005bba:	3508      	adds	r5, #8
 8005bbc:	2d0c      	cmp	r5, #12
 8005bbe:	bf38      	it	cc
 8005bc0:	250c      	movcc	r5, #12
 8005bc2:	2d00      	cmp	r5, #0
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	db01      	blt.n	8005bcc <_malloc_r+0x1c>
 8005bc8:	42a9      	cmp	r1, r5
 8005bca:	d905      	bls.n	8005bd8 <_malloc_r+0x28>
 8005bcc:	230c      	movs	r3, #12
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	2600      	movs	r6, #0
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd8:	4e2e      	ldr	r6, [pc, #184]	; (8005c94 <_malloc_r+0xe4>)
 8005bda:	f000 fbf5 	bl	80063c8 <__malloc_lock>
 8005bde:	6833      	ldr	r3, [r6, #0]
 8005be0:	461c      	mov	r4, r3
 8005be2:	bb34      	cbnz	r4, 8005c32 <_malloc_r+0x82>
 8005be4:	4629      	mov	r1, r5
 8005be6:	4638      	mov	r0, r7
 8005be8:	f7ff ffc2 	bl	8005b70 <sbrk_aligned>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	4604      	mov	r4, r0
 8005bf0:	d14d      	bne.n	8005c8e <_malloc_r+0xde>
 8005bf2:	6834      	ldr	r4, [r6, #0]
 8005bf4:	4626      	mov	r6, r4
 8005bf6:	2e00      	cmp	r6, #0
 8005bf8:	d140      	bne.n	8005c7c <_malloc_r+0xcc>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4638      	mov	r0, r7
 8005c00:	eb04 0803 	add.w	r8, r4, r3
 8005c04:	f000 fb36 	bl	8006274 <_sbrk_r>
 8005c08:	4580      	cmp	r8, r0
 8005c0a:	d13a      	bne.n	8005c82 <_malloc_r+0xd2>
 8005c0c:	6821      	ldr	r1, [r4, #0]
 8005c0e:	3503      	adds	r5, #3
 8005c10:	1a6d      	subs	r5, r5, r1
 8005c12:	f025 0503 	bic.w	r5, r5, #3
 8005c16:	3508      	adds	r5, #8
 8005c18:	2d0c      	cmp	r5, #12
 8005c1a:	bf38      	it	cc
 8005c1c:	250c      	movcc	r5, #12
 8005c1e:	4629      	mov	r1, r5
 8005c20:	4638      	mov	r0, r7
 8005c22:	f7ff ffa5 	bl	8005b70 <sbrk_aligned>
 8005c26:	3001      	adds	r0, #1
 8005c28:	d02b      	beq.n	8005c82 <_malloc_r+0xd2>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	442b      	add	r3, r5
 8005c2e:	6023      	str	r3, [r4, #0]
 8005c30:	e00e      	b.n	8005c50 <_malloc_r+0xa0>
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	1b52      	subs	r2, r2, r5
 8005c36:	d41e      	bmi.n	8005c76 <_malloc_r+0xc6>
 8005c38:	2a0b      	cmp	r2, #11
 8005c3a:	d916      	bls.n	8005c6a <_malloc_r+0xba>
 8005c3c:	1961      	adds	r1, r4, r5
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	6025      	str	r5, [r4, #0]
 8005c42:	bf18      	it	ne
 8005c44:	6059      	strne	r1, [r3, #4]
 8005c46:	6863      	ldr	r3, [r4, #4]
 8005c48:	bf08      	it	eq
 8005c4a:	6031      	streq	r1, [r6, #0]
 8005c4c:	5162      	str	r2, [r4, r5]
 8005c4e:	604b      	str	r3, [r1, #4]
 8005c50:	4638      	mov	r0, r7
 8005c52:	f104 060b 	add.w	r6, r4, #11
 8005c56:	f000 fbbd 	bl	80063d4 <__malloc_unlock>
 8005c5a:	f026 0607 	bic.w	r6, r6, #7
 8005c5e:	1d23      	adds	r3, r4, #4
 8005c60:	1af2      	subs	r2, r6, r3
 8005c62:	d0b6      	beq.n	8005bd2 <_malloc_r+0x22>
 8005c64:	1b9b      	subs	r3, r3, r6
 8005c66:	50a3      	str	r3, [r4, r2]
 8005c68:	e7b3      	b.n	8005bd2 <_malloc_r+0x22>
 8005c6a:	6862      	ldr	r2, [r4, #4]
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	bf0c      	ite	eq
 8005c70:	6032      	streq	r2, [r6, #0]
 8005c72:	605a      	strne	r2, [r3, #4]
 8005c74:	e7ec      	b.n	8005c50 <_malloc_r+0xa0>
 8005c76:	4623      	mov	r3, r4
 8005c78:	6864      	ldr	r4, [r4, #4]
 8005c7a:	e7b2      	b.n	8005be2 <_malloc_r+0x32>
 8005c7c:	4634      	mov	r4, r6
 8005c7e:	6876      	ldr	r6, [r6, #4]
 8005c80:	e7b9      	b.n	8005bf6 <_malloc_r+0x46>
 8005c82:	230c      	movs	r3, #12
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	4638      	mov	r0, r7
 8005c88:	f000 fba4 	bl	80063d4 <__malloc_unlock>
 8005c8c:	e7a1      	b.n	8005bd2 <_malloc_r+0x22>
 8005c8e:	6025      	str	r5, [r4, #0]
 8005c90:	e7de      	b.n	8005c50 <_malloc_r+0xa0>
 8005c92:	bf00      	nop
 8005c94:	20000220 	.word	0x20000220

08005c98 <__sfputc_r>:
 8005c98:	6893      	ldr	r3, [r2, #8]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	b410      	push	{r4}
 8005ca0:	6093      	str	r3, [r2, #8]
 8005ca2:	da08      	bge.n	8005cb6 <__sfputc_r+0x1e>
 8005ca4:	6994      	ldr	r4, [r2, #24]
 8005ca6:	42a3      	cmp	r3, r4
 8005ca8:	db01      	blt.n	8005cae <__sfputc_r+0x16>
 8005caa:	290a      	cmp	r1, #10
 8005cac:	d103      	bne.n	8005cb6 <__sfputc_r+0x1e>
 8005cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cb2:	f7ff bc31 	b.w	8005518 <__swbuf_r>
 8005cb6:	6813      	ldr	r3, [r2, #0]
 8005cb8:	1c58      	adds	r0, r3, #1
 8005cba:	6010      	str	r0, [r2, #0]
 8005cbc:	7019      	strb	r1, [r3, #0]
 8005cbe:	4608      	mov	r0, r1
 8005cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <__sfputs_r>:
 8005cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc8:	4606      	mov	r6, r0
 8005cca:	460f      	mov	r7, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	18d5      	adds	r5, r2, r3
 8005cd0:	42ac      	cmp	r4, r5
 8005cd2:	d101      	bne.n	8005cd8 <__sfputs_r+0x12>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	e007      	b.n	8005ce8 <__sfputs_r+0x22>
 8005cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cdc:	463a      	mov	r2, r7
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f7ff ffda 	bl	8005c98 <__sfputc_r>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d1f3      	bne.n	8005cd0 <__sfputs_r+0xa>
 8005ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cec <_vfiprintf_r>:
 8005cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	460d      	mov	r5, r1
 8005cf2:	b09d      	sub	sp, #116	; 0x74
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	4698      	mov	r8, r3
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	b118      	cbz	r0, 8005d04 <_vfiprintf_r+0x18>
 8005cfc:	6983      	ldr	r3, [r0, #24]
 8005cfe:	b90b      	cbnz	r3, 8005d04 <_vfiprintf_r+0x18>
 8005d00:	f7ff fde4 	bl	80058cc <__sinit>
 8005d04:	4b89      	ldr	r3, [pc, #548]	; (8005f2c <_vfiprintf_r+0x240>)
 8005d06:	429d      	cmp	r5, r3
 8005d08:	d11b      	bne.n	8005d42 <_vfiprintf_r+0x56>
 8005d0a:	6875      	ldr	r5, [r6, #4]
 8005d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d0e:	07d9      	lsls	r1, r3, #31
 8005d10:	d405      	bmi.n	8005d1e <_vfiprintf_r+0x32>
 8005d12:	89ab      	ldrh	r3, [r5, #12]
 8005d14:	059a      	lsls	r2, r3, #22
 8005d16:	d402      	bmi.n	8005d1e <_vfiprintf_r+0x32>
 8005d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d1a:	f7ff fe75 	bl	8005a08 <__retarget_lock_acquire_recursive>
 8005d1e:	89ab      	ldrh	r3, [r5, #12]
 8005d20:	071b      	lsls	r3, r3, #28
 8005d22:	d501      	bpl.n	8005d28 <_vfiprintf_r+0x3c>
 8005d24:	692b      	ldr	r3, [r5, #16]
 8005d26:	b9eb      	cbnz	r3, 8005d64 <_vfiprintf_r+0x78>
 8005d28:	4629      	mov	r1, r5
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f7ff fc46 	bl	80055bc <__swsetup_r>
 8005d30:	b1c0      	cbz	r0, 8005d64 <_vfiprintf_r+0x78>
 8005d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d34:	07dc      	lsls	r4, r3, #31
 8005d36:	d50e      	bpl.n	8005d56 <_vfiprintf_r+0x6a>
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	b01d      	add	sp, #116	; 0x74
 8005d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d42:	4b7b      	ldr	r3, [pc, #492]	; (8005f30 <_vfiprintf_r+0x244>)
 8005d44:	429d      	cmp	r5, r3
 8005d46:	d101      	bne.n	8005d4c <_vfiprintf_r+0x60>
 8005d48:	68b5      	ldr	r5, [r6, #8]
 8005d4a:	e7df      	b.n	8005d0c <_vfiprintf_r+0x20>
 8005d4c:	4b79      	ldr	r3, [pc, #484]	; (8005f34 <_vfiprintf_r+0x248>)
 8005d4e:	429d      	cmp	r5, r3
 8005d50:	bf08      	it	eq
 8005d52:	68f5      	ldreq	r5, [r6, #12]
 8005d54:	e7da      	b.n	8005d0c <_vfiprintf_r+0x20>
 8005d56:	89ab      	ldrh	r3, [r5, #12]
 8005d58:	0598      	lsls	r0, r3, #22
 8005d5a:	d4ed      	bmi.n	8005d38 <_vfiprintf_r+0x4c>
 8005d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d5e:	f7ff fe54 	bl	8005a0a <__retarget_lock_release_recursive>
 8005d62:	e7e9      	b.n	8005d38 <_vfiprintf_r+0x4c>
 8005d64:	2300      	movs	r3, #0
 8005d66:	9309      	str	r3, [sp, #36]	; 0x24
 8005d68:	2320      	movs	r3, #32
 8005d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d72:	2330      	movs	r3, #48	; 0x30
 8005d74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f38 <_vfiprintf_r+0x24c>
 8005d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d7c:	f04f 0901 	mov.w	r9, #1
 8005d80:	4623      	mov	r3, r4
 8005d82:	469a      	mov	sl, r3
 8005d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d88:	b10a      	cbz	r2, 8005d8e <_vfiprintf_r+0xa2>
 8005d8a:	2a25      	cmp	r2, #37	; 0x25
 8005d8c:	d1f9      	bne.n	8005d82 <_vfiprintf_r+0x96>
 8005d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d92:	d00b      	beq.n	8005dac <_vfiprintf_r+0xc0>
 8005d94:	465b      	mov	r3, fp
 8005d96:	4622      	mov	r2, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff ff93 	bl	8005cc6 <__sfputs_r>
 8005da0:	3001      	adds	r0, #1
 8005da2:	f000 80aa 	beq.w	8005efa <_vfiprintf_r+0x20e>
 8005da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005da8:	445a      	add	r2, fp
 8005daa:	9209      	str	r2, [sp, #36]	; 0x24
 8005dac:	f89a 3000 	ldrb.w	r3, [sl]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80a2 	beq.w	8005efa <_vfiprintf_r+0x20e>
 8005db6:	2300      	movs	r3, #0
 8005db8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dc0:	f10a 0a01 	add.w	sl, sl, #1
 8005dc4:	9304      	str	r3, [sp, #16]
 8005dc6:	9307      	str	r3, [sp, #28]
 8005dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8005dce:	4654      	mov	r4, sl
 8005dd0:	2205      	movs	r2, #5
 8005dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd6:	4858      	ldr	r0, [pc, #352]	; (8005f38 <_vfiprintf_r+0x24c>)
 8005dd8:	f7fa fa0a 	bl	80001f0 <memchr>
 8005ddc:	9a04      	ldr	r2, [sp, #16]
 8005dde:	b9d8      	cbnz	r0, 8005e18 <_vfiprintf_r+0x12c>
 8005de0:	06d1      	lsls	r1, r2, #27
 8005de2:	bf44      	itt	mi
 8005de4:	2320      	movmi	r3, #32
 8005de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dea:	0713      	lsls	r3, r2, #28
 8005dec:	bf44      	itt	mi
 8005dee:	232b      	movmi	r3, #43	; 0x2b
 8005df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005df4:	f89a 3000 	ldrb.w	r3, [sl]
 8005df8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dfa:	d015      	beq.n	8005e28 <_vfiprintf_r+0x13c>
 8005dfc:	9a07      	ldr	r2, [sp, #28]
 8005dfe:	4654      	mov	r4, sl
 8005e00:	2000      	movs	r0, #0
 8005e02:	f04f 0c0a 	mov.w	ip, #10
 8005e06:	4621      	mov	r1, r4
 8005e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e0c:	3b30      	subs	r3, #48	; 0x30
 8005e0e:	2b09      	cmp	r3, #9
 8005e10:	d94e      	bls.n	8005eb0 <_vfiprintf_r+0x1c4>
 8005e12:	b1b0      	cbz	r0, 8005e42 <_vfiprintf_r+0x156>
 8005e14:	9207      	str	r2, [sp, #28]
 8005e16:	e014      	b.n	8005e42 <_vfiprintf_r+0x156>
 8005e18:	eba0 0308 	sub.w	r3, r0, r8
 8005e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e20:	4313      	orrs	r3, r2
 8005e22:	9304      	str	r3, [sp, #16]
 8005e24:	46a2      	mov	sl, r4
 8005e26:	e7d2      	b.n	8005dce <_vfiprintf_r+0xe2>
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	1d19      	adds	r1, r3, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	9103      	str	r1, [sp, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bfbb      	ittet	lt
 8005e34:	425b      	neglt	r3, r3
 8005e36:	f042 0202 	orrlt.w	r2, r2, #2
 8005e3a:	9307      	strge	r3, [sp, #28]
 8005e3c:	9307      	strlt	r3, [sp, #28]
 8005e3e:	bfb8      	it	lt
 8005e40:	9204      	strlt	r2, [sp, #16]
 8005e42:	7823      	ldrb	r3, [r4, #0]
 8005e44:	2b2e      	cmp	r3, #46	; 0x2e
 8005e46:	d10c      	bne.n	8005e62 <_vfiprintf_r+0x176>
 8005e48:	7863      	ldrb	r3, [r4, #1]
 8005e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e4c:	d135      	bne.n	8005eba <_vfiprintf_r+0x1ce>
 8005e4e:	9b03      	ldr	r3, [sp, #12]
 8005e50:	1d1a      	adds	r2, r3, #4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	9203      	str	r2, [sp, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bfb8      	it	lt
 8005e5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e5e:	3402      	adds	r4, #2
 8005e60:	9305      	str	r3, [sp, #20]
 8005e62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f48 <_vfiprintf_r+0x25c>
 8005e66:	7821      	ldrb	r1, [r4, #0]
 8005e68:	2203      	movs	r2, #3
 8005e6a:	4650      	mov	r0, sl
 8005e6c:	f7fa f9c0 	bl	80001f0 <memchr>
 8005e70:	b140      	cbz	r0, 8005e84 <_vfiprintf_r+0x198>
 8005e72:	2340      	movs	r3, #64	; 0x40
 8005e74:	eba0 000a 	sub.w	r0, r0, sl
 8005e78:	fa03 f000 	lsl.w	r0, r3, r0
 8005e7c:	9b04      	ldr	r3, [sp, #16]
 8005e7e:	4303      	orrs	r3, r0
 8005e80:	3401      	adds	r4, #1
 8005e82:	9304      	str	r3, [sp, #16]
 8005e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e88:	482c      	ldr	r0, [pc, #176]	; (8005f3c <_vfiprintf_r+0x250>)
 8005e8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e8e:	2206      	movs	r2, #6
 8005e90:	f7fa f9ae 	bl	80001f0 <memchr>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d03f      	beq.n	8005f18 <_vfiprintf_r+0x22c>
 8005e98:	4b29      	ldr	r3, [pc, #164]	; (8005f40 <_vfiprintf_r+0x254>)
 8005e9a:	bb1b      	cbnz	r3, 8005ee4 <_vfiprintf_r+0x1f8>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	3307      	adds	r3, #7
 8005ea0:	f023 0307 	bic.w	r3, r3, #7
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	9303      	str	r3, [sp, #12]
 8005ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eaa:	443b      	add	r3, r7
 8005eac:	9309      	str	r3, [sp, #36]	; 0x24
 8005eae:	e767      	b.n	8005d80 <_vfiprintf_r+0x94>
 8005eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	e7a5      	b.n	8005e06 <_vfiprintf_r+0x11a>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	3401      	adds	r4, #1
 8005ebe:	9305      	str	r3, [sp, #20]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f04f 0c0a 	mov.w	ip, #10
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ecc:	3a30      	subs	r2, #48	; 0x30
 8005ece:	2a09      	cmp	r2, #9
 8005ed0:	d903      	bls.n	8005eda <_vfiprintf_r+0x1ee>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0c5      	beq.n	8005e62 <_vfiprintf_r+0x176>
 8005ed6:	9105      	str	r1, [sp, #20]
 8005ed8:	e7c3      	b.n	8005e62 <_vfiprintf_r+0x176>
 8005eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ede:	4604      	mov	r4, r0
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e7f0      	b.n	8005ec6 <_vfiprintf_r+0x1da>
 8005ee4:	ab03      	add	r3, sp, #12
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	462a      	mov	r2, r5
 8005eea:	4b16      	ldr	r3, [pc, #88]	; (8005f44 <_vfiprintf_r+0x258>)
 8005eec:	a904      	add	r1, sp, #16
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f3af 8000 	nop.w
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	1c78      	adds	r0, r7, #1
 8005ef8:	d1d6      	bne.n	8005ea8 <_vfiprintf_r+0x1bc>
 8005efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005efc:	07d9      	lsls	r1, r3, #31
 8005efe:	d405      	bmi.n	8005f0c <_vfiprintf_r+0x220>
 8005f00:	89ab      	ldrh	r3, [r5, #12]
 8005f02:	059a      	lsls	r2, r3, #22
 8005f04:	d402      	bmi.n	8005f0c <_vfiprintf_r+0x220>
 8005f06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f08:	f7ff fd7f 	bl	8005a0a <__retarget_lock_release_recursive>
 8005f0c:	89ab      	ldrh	r3, [r5, #12]
 8005f0e:	065b      	lsls	r3, r3, #25
 8005f10:	f53f af12 	bmi.w	8005d38 <_vfiprintf_r+0x4c>
 8005f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f16:	e711      	b.n	8005d3c <_vfiprintf_r+0x50>
 8005f18:	ab03      	add	r3, sp, #12
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <_vfiprintf_r+0x258>)
 8005f20:	a904      	add	r1, sp, #16
 8005f22:	4630      	mov	r0, r6
 8005f24:	f000 f880 	bl	8006028 <_printf_i>
 8005f28:	e7e4      	b.n	8005ef4 <_vfiprintf_r+0x208>
 8005f2a:	bf00      	nop
 8005f2c:	08006524 	.word	0x08006524
 8005f30:	08006544 	.word	0x08006544
 8005f34:	08006504 	.word	0x08006504
 8005f38:	08006564 	.word	0x08006564
 8005f3c:	0800656e 	.word	0x0800656e
 8005f40:	00000000 	.word	0x00000000
 8005f44:	08005cc7 	.word	0x08005cc7
 8005f48:	0800656a 	.word	0x0800656a

08005f4c <_printf_common>:
 8005f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f50:	4616      	mov	r6, r2
 8005f52:	4699      	mov	r9, r3
 8005f54:	688a      	ldr	r2, [r1, #8]
 8005f56:	690b      	ldr	r3, [r1, #16]
 8005f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	bfb8      	it	lt
 8005f60:	4613      	movlt	r3, r2
 8005f62:	6033      	str	r3, [r6, #0]
 8005f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f68:	4607      	mov	r7, r0
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	b10a      	cbz	r2, 8005f72 <_printf_common+0x26>
 8005f6e:	3301      	adds	r3, #1
 8005f70:	6033      	str	r3, [r6, #0]
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	0699      	lsls	r1, r3, #26
 8005f76:	bf42      	ittt	mi
 8005f78:	6833      	ldrmi	r3, [r6, #0]
 8005f7a:	3302      	addmi	r3, #2
 8005f7c:	6033      	strmi	r3, [r6, #0]
 8005f7e:	6825      	ldr	r5, [r4, #0]
 8005f80:	f015 0506 	ands.w	r5, r5, #6
 8005f84:	d106      	bne.n	8005f94 <_printf_common+0x48>
 8005f86:	f104 0a19 	add.w	sl, r4, #25
 8005f8a:	68e3      	ldr	r3, [r4, #12]
 8005f8c:	6832      	ldr	r2, [r6, #0]
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	42ab      	cmp	r3, r5
 8005f92:	dc26      	bgt.n	8005fe2 <_printf_common+0x96>
 8005f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f98:	1e13      	subs	r3, r2, #0
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	bf18      	it	ne
 8005f9e:	2301      	movne	r3, #1
 8005fa0:	0692      	lsls	r2, r2, #26
 8005fa2:	d42b      	bmi.n	8005ffc <_printf_common+0xb0>
 8005fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fa8:	4649      	mov	r1, r9
 8005faa:	4638      	mov	r0, r7
 8005fac:	47c0      	blx	r8
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d01e      	beq.n	8005ff0 <_printf_common+0xa4>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	68e5      	ldr	r5, [r4, #12]
 8005fb6:	6832      	ldr	r2, [r6, #0]
 8005fb8:	f003 0306 	and.w	r3, r3, #6
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	bf08      	it	eq
 8005fc0:	1aad      	subeq	r5, r5, r2
 8005fc2:	68a3      	ldr	r3, [r4, #8]
 8005fc4:	6922      	ldr	r2, [r4, #16]
 8005fc6:	bf0c      	ite	eq
 8005fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fcc:	2500      	movne	r5, #0
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	bfc4      	itt	gt
 8005fd2:	1a9b      	subgt	r3, r3, r2
 8005fd4:	18ed      	addgt	r5, r5, r3
 8005fd6:	2600      	movs	r6, #0
 8005fd8:	341a      	adds	r4, #26
 8005fda:	42b5      	cmp	r5, r6
 8005fdc:	d11a      	bne.n	8006014 <_printf_common+0xc8>
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e008      	b.n	8005ff4 <_printf_common+0xa8>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4652      	mov	r2, sl
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4638      	mov	r0, r7
 8005fea:	47c0      	blx	r8
 8005fec:	3001      	adds	r0, #1
 8005fee:	d103      	bne.n	8005ff8 <_printf_common+0xac>
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff8:	3501      	adds	r5, #1
 8005ffa:	e7c6      	b.n	8005f8a <_printf_common+0x3e>
 8005ffc:	18e1      	adds	r1, r4, r3
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	2030      	movs	r0, #48	; 0x30
 8006002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006006:	4422      	add	r2, r4
 8006008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800600c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006010:	3302      	adds	r3, #2
 8006012:	e7c7      	b.n	8005fa4 <_printf_common+0x58>
 8006014:	2301      	movs	r3, #1
 8006016:	4622      	mov	r2, r4
 8006018:	4649      	mov	r1, r9
 800601a:	4638      	mov	r0, r7
 800601c:	47c0      	blx	r8
 800601e:	3001      	adds	r0, #1
 8006020:	d0e6      	beq.n	8005ff0 <_printf_common+0xa4>
 8006022:	3601      	adds	r6, #1
 8006024:	e7d9      	b.n	8005fda <_printf_common+0x8e>
	...

08006028 <_printf_i>:
 8006028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	7e0f      	ldrb	r7, [r1, #24]
 800602e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006030:	2f78      	cmp	r7, #120	; 0x78
 8006032:	4691      	mov	r9, r2
 8006034:	4680      	mov	r8, r0
 8006036:	460c      	mov	r4, r1
 8006038:	469a      	mov	sl, r3
 800603a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800603e:	d807      	bhi.n	8006050 <_printf_i+0x28>
 8006040:	2f62      	cmp	r7, #98	; 0x62
 8006042:	d80a      	bhi.n	800605a <_printf_i+0x32>
 8006044:	2f00      	cmp	r7, #0
 8006046:	f000 80d8 	beq.w	80061fa <_printf_i+0x1d2>
 800604a:	2f58      	cmp	r7, #88	; 0x58
 800604c:	f000 80a3 	beq.w	8006196 <_printf_i+0x16e>
 8006050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006058:	e03a      	b.n	80060d0 <_printf_i+0xa8>
 800605a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800605e:	2b15      	cmp	r3, #21
 8006060:	d8f6      	bhi.n	8006050 <_printf_i+0x28>
 8006062:	a101      	add	r1, pc, #4	; (adr r1, 8006068 <_printf_i+0x40>)
 8006064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006068:	080060c1 	.word	0x080060c1
 800606c:	080060d5 	.word	0x080060d5
 8006070:	08006051 	.word	0x08006051
 8006074:	08006051 	.word	0x08006051
 8006078:	08006051 	.word	0x08006051
 800607c:	08006051 	.word	0x08006051
 8006080:	080060d5 	.word	0x080060d5
 8006084:	08006051 	.word	0x08006051
 8006088:	08006051 	.word	0x08006051
 800608c:	08006051 	.word	0x08006051
 8006090:	08006051 	.word	0x08006051
 8006094:	080061e1 	.word	0x080061e1
 8006098:	08006105 	.word	0x08006105
 800609c:	080061c3 	.word	0x080061c3
 80060a0:	08006051 	.word	0x08006051
 80060a4:	08006051 	.word	0x08006051
 80060a8:	08006203 	.word	0x08006203
 80060ac:	08006051 	.word	0x08006051
 80060b0:	08006105 	.word	0x08006105
 80060b4:	08006051 	.word	0x08006051
 80060b8:	08006051 	.word	0x08006051
 80060bc:	080061cb 	.word	0x080061cb
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	1d1a      	adds	r2, r3, #4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	602a      	str	r2, [r5, #0]
 80060c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0a3      	b.n	800621c <_printf_i+0x1f4>
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	6829      	ldr	r1, [r5, #0]
 80060d8:	0606      	lsls	r6, r0, #24
 80060da:	f101 0304 	add.w	r3, r1, #4
 80060de:	d50a      	bpl.n	80060f6 <_printf_i+0xce>
 80060e0:	680e      	ldr	r6, [r1, #0]
 80060e2:	602b      	str	r3, [r5, #0]
 80060e4:	2e00      	cmp	r6, #0
 80060e6:	da03      	bge.n	80060f0 <_printf_i+0xc8>
 80060e8:	232d      	movs	r3, #45	; 0x2d
 80060ea:	4276      	negs	r6, r6
 80060ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f0:	485e      	ldr	r0, [pc, #376]	; (800626c <_printf_i+0x244>)
 80060f2:	230a      	movs	r3, #10
 80060f4:	e019      	b.n	800612a <_printf_i+0x102>
 80060f6:	680e      	ldr	r6, [r1, #0]
 80060f8:	602b      	str	r3, [r5, #0]
 80060fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060fe:	bf18      	it	ne
 8006100:	b236      	sxthne	r6, r6
 8006102:	e7ef      	b.n	80060e4 <_printf_i+0xbc>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	6820      	ldr	r0, [r4, #0]
 8006108:	1d19      	adds	r1, r3, #4
 800610a:	6029      	str	r1, [r5, #0]
 800610c:	0601      	lsls	r1, r0, #24
 800610e:	d501      	bpl.n	8006114 <_printf_i+0xec>
 8006110:	681e      	ldr	r6, [r3, #0]
 8006112:	e002      	b.n	800611a <_printf_i+0xf2>
 8006114:	0646      	lsls	r6, r0, #25
 8006116:	d5fb      	bpl.n	8006110 <_printf_i+0xe8>
 8006118:	881e      	ldrh	r6, [r3, #0]
 800611a:	4854      	ldr	r0, [pc, #336]	; (800626c <_printf_i+0x244>)
 800611c:	2f6f      	cmp	r7, #111	; 0x6f
 800611e:	bf0c      	ite	eq
 8006120:	2308      	moveq	r3, #8
 8006122:	230a      	movne	r3, #10
 8006124:	2100      	movs	r1, #0
 8006126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800612a:	6865      	ldr	r5, [r4, #4]
 800612c:	60a5      	str	r5, [r4, #8]
 800612e:	2d00      	cmp	r5, #0
 8006130:	bfa2      	ittt	ge
 8006132:	6821      	ldrge	r1, [r4, #0]
 8006134:	f021 0104 	bicge.w	r1, r1, #4
 8006138:	6021      	strge	r1, [r4, #0]
 800613a:	b90e      	cbnz	r6, 8006140 <_printf_i+0x118>
 800613c:	2d00      	cmp	r5, #0
 800613e:	d04d      	beq.n	80061dc <_printf_i+0x1b4>
 8006140:	4615      	mov	r5, r2
 8006142:	fbb6 f1f3 	udiv	r1, r6, r3
 8006146:	fb03 6711 	mls	r7, r3, r1, r6
 800614a:	5dc7      	ldrb	r7, [r0, r7]
 800614c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006150:	4637      	mov	r7, r6
 8006152:	42bb      	cmp	r3, r7
 8006154:	460e      	mov	r6, r1
 8006156:	d9f4      	bls.n	8006142 <_printf_i+0x11a>
 8006158:	2b08      	cmp	r3, #8
 800615a:	d10b      	bne.n	8006174 <_printf_i+0x14c>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	07de      	lsls	r6, r3, #31
 8006160:	d508      	bpl.n	8006174 <_printf_i+0x14c>
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	6861      	ldr	r1, [r4, #4]
 8006166:	4299      	cmp	r1, r3
 8006168:	bfde      	ittt	le
 800616a:	2330      	movle	r3, #48	; 0x30
 800616c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006170:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006174:	1b52      	subs	r2, r2, r5
 8006176:	6122      	str	r2, [r4, #16]
 8006178:	f8cd a000 	str.w	sl, [sp]
 800617c:	464b      	mov	r3, r9
 800617e:	aa03      	add	r2, sp, #12
 8006180:	4621      	mov	r1, r4
 8006182:	4640      	mov	r0, r8
 8006184:	f7ff fee2 	bl	8005f4c <_printf_common>
 8006188:	3001      	adds	r0, #1
 800618a:	d14c      	bne.n	8006226 <_printf_i+0x1fe>
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	b004      	add	sp, #16
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	4835      	ldr	r0, [pc, #212]	; (800626c <_printf_i+0x244>)
 8006198:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800619c:	6829      	ldr	r1, [r5, #0]
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80061a4:	6029      	str	r1, [r5, #0]
 80061a6:	061d      	lsls	r5, r3, #24
 80061a8:	d514      	bpl.n	80061d4 <_printf_i+0x1ac>
 80061aa:	07df      	lsls	r7, r3, #31
 80061ac:	bf44      	itt	mi
 80061ae:	f043 0320 	orrmi.w	r3, r3, #32
 80061b2:	6023      	strmi	r3, [r4, #0]
 80061b4:	b91e      	cbnz	r6, 80061be <_printf_i+0x196>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	f023 0320 	bic.w	r3, r3, #32
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	2310      	movs	r3, #16
 80061c0:	e7b0      	b.n	8006124 <_printf_i+0xfc>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	f043 0320 	orr.w	r3, r3, #32
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	2378      	movs	r3, #120	; 0x78
 80061cc:	4828      	ldr	r0, [pc, #160]	; (8006270 <_printf_i+0x248>)
 80061ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061d2:	e7e3      	b.n	800619c <_printf_i+0x174>
 80061d4:	0659      	lsls	r1, r3, #25
 80061d6:	bf48      	it	mi
 80061d8:	b2b6      	uxthmi	r6, r6
 80061da:	e7e6      	b.n	80061aa <_printf_i+0x182>
 80061dc:	4615      	mov	r5, r2
 80061de:	e7bb      	b.n	8006158 <_printf_i+0x130>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	6826      	ldr	r6, [r4, #0]
 80061e4:	6961      	ldr	r1, [r4, #20]
 80061e6:	1d18      	adds	r0, r3, #4
 80061e8:	6028      	str	r0, [r5, #0]
 80061ea:	0635      	lsls	r5, r6, #24
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	d501      	bpl.n	80061f4 <_printf_i+0x1cc>
 80061f0:	6019      	str	r1, [r3, #0]
 80061f2:	e002      	b.n	80061fa <_printf_i+0x1d2>
 80061f4:	0670      	lsls	r0, r6, #25
 80061f6:	d5fb      	bpl.n	80061f0 <_printf_i+0x1c8>
 80061f8:	8019      	strh	r1, [r3, #0]
 80061fa:	2300      	movs	r3, #0
 80061fc:	6123      	str	r3, [r4, #16]
 80061fe:	4615      	mov	r5, r2
 8006200:	e7ba      	b.n	8006178 <_printf_i+0x150>
 8006202:	682b      	ldr	r3, [r5, #0]
 8006204:	1d1a      	adds	r2, r3, #4
 8006206:	602a      	str	r2, [r5, #0]
 8006208:	681d      	ldr	r5, [r3, #0]
 800620a:	6862      	ldr	r2, [r4, #4]
 800620c:	2100      	movs	r1, #0
 800620e:	4628      	mov	r0, r5
 8006210:	f7f9 ffee 	bl	80001f0 <memchr>
 8006214:	b108      	cbz	r0, 800621a <_printf_i+0x1f2>
 8006216:	1b40      	subs	r0, r0, r5
 8006218:	6060      	str	r0, [r4, #4]
 800621a:	6863      	ldr	r3, [r4, #4]
 800621c:	6123      	str	r3, [r4, #16]
 800621e:	2300      	movs	r3, #0
 8006220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006224:	e7a8      	b.n	8006178 <_printf_i+0x150>
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	462a      	mov	r2, r5
 800622a:	4649      	mov	r1, r9
 800622c:	4640      	mov	r0, r8
 800622e:	47d0      	blx	sl
 8006230:	3001      	adds	r0, #1
 8006232:	d0ab      	beq.n	800618c <_printf_i+0x164>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	079b      	lsls	r3, r3, #30
 8006238:	d413      	bmi.n	8006262 <_printf_i+0x23a>
 800623a:	68e0      	ldr	r0, [r4, #12]
 800623c:	9b03      	ldr	r3, [sp, #12]
 800623e:	4298      	cmp	r0, r3
 8006240:	bfb8      	it	lt
 8006242:	4618      	movlt	r0, r3
 8006244:	e7a4      	b.n	8006190 <_printf_i+0x168>
 8006246:	2301      	movs	r3, #1
 8006248:	4632      	mov	r2, r6
 800624a:	4649      	mov	r1, r9
 800624c:	4640      	mov	r0, r8
 800624e:	47d0      	blx	sl
 8006250:	3001      	adds	r0, #1
 8006252:	d09b      	beq.n	800618c <_printf_i+0x164>
 8006254:	3501      	adds	r5, #1
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	9903      	ldr	r1, [sp, #12]
 800625a:	1a5b      	subs	r3, r3, r1
 800625c:	42ab      	cmp	r3, r5
 800625e:	dcf2      	bgt.n	8006246 <_printf_i+0x21e>
 8006260:	e7eb      	b.n	800623a <_printf_i+0x212>
 8006262:	2500      	movs	r5, #0
 8006264:	f104 0619 	add.w	r6, r4, #25
 8006268:	e7f5      	b.n	8006256 <_printf_i+0x22e>
 800626a:	bf00      	nop
 800626c:	08006575 	.word	0x08006575
 8006270:	08006586 	.word	0x08006586

08006274 <_sbrk_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d06      	ldr	r5, [pc, #24]	; (8006290 <_sbrk_r+0x1c>)
 8006278:	2300      	movs	r3, #0
 800627a:	4604      	mov	r4, r0
 800627c:	4608      	mov	r0, r1
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	f7fb fa0a 	bl	8001698 <_sbrk>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_sbrk_r+0x1a>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_sbrk_r+0x1a>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20000228 	.word	0x20000228

08006294 <__sread>:
 8006294:	b510      	push	{r4, lr}
 8006296:	460c      	mov	r4, r1
 8006298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629c:	f000 f8a0 	bl	80063e0 <_read_r>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	bfab      	itete	ge
 80062a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062a6:	89a3      	ldrhlt	r3, [r4, #12]
 80062a8:	181b      	addge	r3, r3, r0
 80062aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062ae:	bfac      	ite	ge
 80062b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80062b2:	81a3      	strhlt	r3, [r4, #12]
 80062b4:	bd10      	pop	{r4, pc}

080062b6 <__swrite>:
 80062b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	461f      	mov	r7, r3
 80062bc:	898b      	ldrh	r3, [r1, #12]
 80062be:	05db      	lsls	r3, r3, #23
 80062c0:	4605      	mov	r5, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	4616      	mov	r6, r2
 80062c6:	d505      	bpl.n	80062d4 <__swrite+0x1e>
 80062c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062cc:	2302      	movs	r3, #2
 80062ce:	2200      	movs	r2, #0
 80062d0:	f000 f868 	bl	80063a4 <_lseek_r>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062de:	81a3      	strh	r3, [r4, #12]
 80062e0:	4632      	mov	r2, r6
 80062e2:	463b      	mov	r3, r7
 80062e4:	4628      	mov	r0, r5
 80062e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ea:	f000 b817 	b.w	800631c <_write_r>

080062ee <__sseek>:
 80062ee:	b510      	push	{r4, lr}
 80062f0:	460c      	mov	r4, r1
 80062f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f6:	f000 f855 	bl	80063a4 <_lseek_r>
 80062fa:	1c43      	adds	r3, r0, #1
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	bf15      	itete	ne
 8006300:	6560      	strne	r0, [r4, #84]	; 0x54
 8006302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800630a:	81a3      	strheq	r3, [r4, #12]
 800630c:	bf18      	it	ne
 800630e:	81a3      	strhne	r3, [r4, #12]
 8006310:	bd10      	pop	{r4, pc}

08006312 <__sclose>:
 8006312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006316:	f000 b813 	b.w	8006340 <_close_r>
	...

0800631c <_write_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d07      	ldr	r5, [pc, #28]	; (800633c <_write_r+0x20>)
 8006320:	4604      	mov	r4, r0
 8006322:	4608      	mov	r0, r1
 8006324:	4611      	mov	r1, r2
 8006326:	2200      	movs	r2, #0
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f7fb f963 	bl	80015f6 <_write>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_write_r+0x1e>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_write_r+0x1e>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	20000228 	.word	0x20000228

08006340 <_close_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d06      	ldr	r5, [pc, #24]	; (800635c <_close_r+0x1c>)
 8006344:	2300      	movs	r3, #0
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	f7fb f96f 	bl	800162e <_close>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_close_r+0x1a>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_close_r+0x1a>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	20000228 	.word	0x20000228

08006360 <_fstat_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4d07      	ldr	r5, [pc, #28]	; (8006380 <_fstat_r+0x20>)
 8006364:	2300      	movs	r3, #0
 8006366:	4604      	mov	r4, r0
 8006368:	4608      	mov	r0, r1
 800636a:	4611      	mov	r1, r2
 800636c:	602b      	str	r3, [r5, #0]
 800636e:	f7fb f96a 	bl	8001646 <_fstat>
 8006372:	1c43      	adds	r3, r0, #1
 8006374:	d102      	bne.n	800637c <_fstat_r+0x1c>
 8006376:	682b      	ldr	r3, [r5, #0]
 8006378:	b103      	cbz	r3, 800637c <_fstat_r+0x1c>
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	bd38      	pop	{r3, r4, r5, pc}
 800637e:	bf00      	nop
 8006380:	20000228 	.word	0x20000228

08006384 <_isatty_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4d06      	ldr	r5, [pc, #24]	; (80063a0 <_isatty_r+0x1c>)
 8006388:	2300      	movs	r3, #0
 800638a:	4604      	mov	r4, r0
 800638c:	4608      	mov	r0, r1
 800638e:	602b      	str	r3, [r5, #0]
 8006390:	f7fb f969 	bl	8001666 <_isatty>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_isatty_r+0x1a>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_isatty_r+0x1a>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20000228 	.word	0x20000228

080063a4 <_lseek_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d07      	ldr	r5, [pc, #28]	; (80063c4 <_lseek_r+0x20>)
 80063a8:	4604      	mov	r4, r0
 80063aa:	4608      	mov	r0, r1
 80063ac:	4611      	mov	r1, r2
 80063ae:	2200      	movs	r2, #0
 80063b0:	602a      	str	r2, [r5, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f7fb f962 	bl	800167c <_lseek>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d102      	bne.n	80063c2 <_lseek_r+0x1e>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	b103      	cbz	r3, 80063c2 <_lseek_r+0x1e>
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	20000228 	.word	0x20000228

080063c8 <__malloc_lock>:
 80063c8:	4801      	ldr	r0, [pc, #4]	; (80063d0 <__malloc_lock+0x8>)
 80063ca:	f7ff bb1d 	b.w	8005a08 <__retarget_lock_acquire_recursive>
 80063ce:	bf00      	nop
 80063d0:	2000021c 	.word	0x2000021c

080063d4 <__malloc_unlock>:
 80063d4:	4801      	ldr	r0, [pc, #4]	; (80063dc <__malloc_unlock+0x8>)
 80063d6:	f7ff bb18 	b.w	8005a0a <__retarget_lock_release_recursive>
 80063da:	bf00      	nop
 80063dc:	2000021c 	.word	0x2000021c

080063e0 <_read_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4d07      	ldr	r5, [pc, #28]	; (8006400 <_read_r+0x20>)
 80063e4:	4604      	mov	r4, r0
 80063e6:	4608      	mov	r0, r1
 80063e8:	4611      	mov	r1, r2
 80063ea:	2200      	movs	r2, #0
 80063ec:	602a      	str	r2, [r5, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	f7fb f8e4 	bl	80015bc <_read>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_read_r+0x1e>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_read_r+0x1e>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	20000228 	.word	0x20000228

08006404 <_init>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr

08006410 <_fini>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr
