
Ardu_auto_v000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800605c  0800605c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006064  08006064  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006064  08006064  00016064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006068  08006068  00016068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800606c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001bc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb90  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e67  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002ea98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009f8  00000000  00000000  0002f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002506e  00000000  00000000  0002ff40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c998  00000000  00000000  00054fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b43  00000000  00000000  00061946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143489  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003364  00000000  00000000  001434dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005f40 	.word	0x08005f40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005f40 	.word	0x08005f40

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	e000      	b.n	80005c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <__io_putchar>:
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

//For printing debug data into monitoring
int __io_putchar(int ch)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffd1 	bl	8000594 <ITM_SendChar>
	return(ch);
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	; 0x30
 8000600:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fee7 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f85f 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //ITM_Port32(31) = 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f9ff 	bl	8000a0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060e:	f000 f989 	bl	8000924 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000612:	f000 f9db 	bl	80009cc <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000616:	f000 f9af 	bl	8000978 <MX_USART6_UART_Init>
  MX_ADC3_Init();
 800061a:	f000 f8c1 	bl	80007a0 <MX_ADC3_Init>
  MX_SPI1_Init();
 800061e:	f000 f949 	bl	80008b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //SPI TX off
  HAL_GPIO_WritePin(GPIOF, SPI_CS_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000628:	4822      	ldr	r0, [pc, #136]	; (80006b4 <main+0xb8>)
 800062a:	f002 fa4b 	bl	8002ac4 <HAL_GPIO_WritePin>
	   * HAL ADC3 DMA values
	   * IR_data[0] = IR1 ... IR_data[4] = IR5
	   * IR_data[n] = 4095 -> distance > 10 cm
	   * IR_data[n] = 100-300 -> distance < 10 cm
	   * */
	  HAL_ADC_Start_DMA(&hadc3, IR_data, 5);
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2205      	movs	r2, #5
 8000634:	4619      	mov	r1, r3
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0xbc>)
 8000638:	f000 ffa6 	bl	8001588 <HAL_ADC_Start_DMA>
	   * A low, B high -> reverse
	   * A high, B high -> fast motor stop
	   *
	   * enable low -> motor stop
	   * */
	  HAL_GPIO_WritePin(GPIOF, H_ENA_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000642:	481c      	ldr	r0, [pc, #112]	; (80006b4 <main+0xb8>)
 8000644:	f002 fa3e 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, H_IN1_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064e:	481b      	ldr	r0, [pc, #108]	; (80006bc <main+0xc0>)
 8000650:	f002 fa38 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, H_IN2_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800065a:	4818      	ldr	r0, [pc, #96]	; (80006bc <main+0xc0>)
 800065c:	f002 fa32 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, H_ENB_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	4813      	ldr	r0, [pc, #76]	; (80006b4 <main+0xb8>)
 8000668:	f002 fa2c 	bl	8002ac4 <HAL_GPIO_WritePin>
	   * Left and right commands in Arduino Car stay down
	   * If you give up or down, bt_msg gives right value and then turns idle
	   * This does not happen with left or right,
	   * they just push left value until another command is received
	   * */
	  bt_msg = btmsg();
 800066c:	f000 fbb6 	bl	8000ddc <btmsg>
 8000670:	6278      	str	r0, [r7, #36]	; 0x24
	  printf("%s\r\n", bt_msg);
 8000672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000674:	4812      	ldr	r0, [pc, #72]	; (80006c0 <main+0xc4>)
 8000676:	f004 fcd5 	bl	8005024 <iprintf>
	   * Problem could be in initialization or calling phase
	   * HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
  	   * HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	   * */

	  me = SPIRead(L3G4200D_REG_WHO_AM_I);
 800067a:	200f      	movs	r0, #15
 800067c:	f000 fb0a 	bl	8000c94 <SPIRead>
 8000680:	4603      	mov	r3, r0
 8000682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  gyro_data = Get_gyro_values();
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fb31 	bl	8000cf0 <Get_gyro_values>
	  printf("%d %d %d %d\r\n", gyro_data.x, gyro_data.y, gyro_data.z, me);
 800068e:	88bb      	ldrh	r3, [r7, #4]
 8000690:	4619      	mov	r1, r3
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	461a      	mov	r2, r3
 8000696:	893b      	ldrh	r3, [r7, #8]
 8000698:	4618      	mov	r0, r3
 800069a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	4603      	mov	r3, r0
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <main+0xc8>)
 80006a4:	f004 fcbe 	bl	8005024 <iprintf>

	  // Delay for readability
	  HAL_Delay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f000 ff04 	bl	80014b8 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc3, IR_data, 5);
 80006b0:	e7bd      	b.n	800062e <main+0x32>
 80006b2:	bf00      	nop
 80006b4:	40021400 	.word	0x40021400
 80006b8:	2000008c 	.word	0x2000008c
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	08005f58 	.word	0x08005f58
 80006c4:	08005f60 	.word	0x08005f60

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fc9c 	bl	8005014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000740:	2332      	movs	r3, #50	; 0x32
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000748:	2307      	movs	r3, #7
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f002 f9d1 	bl	8002af8 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800075c:	f000 fb8a 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2101      	movs	r1, #1
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fc32 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 fb73 	bl	8000e74 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007b2:	4b3d      	ldr	r3, [pc, #244]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007b4:	4a3d      	ldr	r2, [pc, #244]	; (80008ac <MX_ADC3_Init+0x10c>)
 80007b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007b8:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007be:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80007c4:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007ca:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007d0:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d8:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007da:	2200      	movs	r2, #0
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007de:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007e0:	4a33      	ldr	r2, [pc, #204]	; (80008b0 <MX_ADC3_Init+0x110>)
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e4:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 5;
 80007ea:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007ec:	2205      	movs	r2, #5
 80007ee:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_ADC3_Init+0x108>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007fe:	482a      	ldr	r0, [pc, #168]	; (80008a8 <MX_ADC3_Init+0x108>)
 8000800:	f000 fe7e 	bl	8001500 <HAL_ADC_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800080a:	f000 fb33 	bl	8000e74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800080e:	2308      	movs	r3, #8
 8000810:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	4822      	ldr	r0, [pc, #136]	; (80008a8 <MX_ADC3_Init+0x108>)
 8000820:	f000 ffe0 	bl	80017e4 <HAL_ADC_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800082a:	f000 fb23 	bl	8000e74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800082e:	230f      	movs	r3, #15
 8000830:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	481b      	ldr	r0, [pc, #108]	; (80008a8 <MX_ADC3_Init+0x108>)
 800083c:	f000 ffd2 	bl	80017e4 <HAL_ADC_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 8000846:	f000 fb15 	bl	8000e74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800084a:	2309      	movs	r3, #9
 800084c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800084e:	2303      	movs	r3, #3
 8000850:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	4814      	ldr	r0, [pc, #80]	; (80008a8 <MX_ADC3_Init+0x108>)
 8000858:	f000 ffc4 	bl	80017e4 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8000862:	f000 fb07 	bl	8000e74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000866:	230d      	movs	r3, #13
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800086a:	2304      	movs	r3, #4
 800086c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_ADC3_Init+0x108>)
 8000874:	f000 ffb6 	bl	80017e4 <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 800087e:	f000 faf9 	bl	8000e74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000882:	230a      	movs	r3, #10
 8000884:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000886:	2305      	movs	r3, #5
 8000888:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_ADC3_Init+0x108>)
 8000890:	f000 ffa8 	bl	80017e4 <HAL_ADC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 800089a:	f000 faeb 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000008c 	.word	0x2000008c
 80008ac:	40012200 	.word	0x40012200
 80008b0:	0f000001 	.word	0x0f000001

080008b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_SPI1_Init+0x68>)
 80008ba:	4a19      	ldr	r2, [pc, #100]	; (8000920 <MX_SPI1_Init+0x6c>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_SPI1_Init+0x68>)
 80008c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_SPI1_Init+0x68>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_SPI1_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI1_Init+0x68>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_SPI1_Init+0x68>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI1_Init+0x68>)
 80008e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_SPI1_Init+0x68>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_SPI1_Init+0x68>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_SPI1_Init+0x68>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_SPI1_Init+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_SPI1_Init+0x68>)
 8000900:	220a      	movs	r2, #10
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_SPI1_Init+0x68>)
 8000906:	f002 fd8f 	bl	8003428 <HAL_SPI_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000910:	f000 fab0 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  gyroInit();
 8000914:	f000 fa36 	bl	8000d84 <gyroInit>
  /* USER CODE END SPI1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000134 	.word	0x20000134
 8000920:	40013000 	.word	0x40013000

08000924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART2_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800095c:	f003 fb0c 	bl	8003f78 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 fa85 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000018c 	.word	0x2000018c
 8000974:	40004400 	.word	0x40004400

08000978 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_USART6_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 8000984:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000988:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 80009b0:	f003 fae2 	bl	8003f78 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 fa5b 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200001d0 	.word	0x200001d0
 80009c8:	40011400 	.word	0x40011400

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_DMA_Init+0x3c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <MX_DMA_Init+0x3c>)
 80009dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_DMA_Init+0x3c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2038      	movs	r0, #56	; 0x38
 80009f4:	f001 fa81 	bl	8001efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009f8:	2038      	movs	r0, #56	; 0x38
 80009fa:	f001 fa9a 	bl	8001f32 <HAL_NVIC_EnableIRQ>

}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	4b7c      	ldr	r3, [pc, #496]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a7b      	ldr	r2, [pc, #492]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b79      	ldr	r3, [pc, #484]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	4b75      	ldr	r3, [pc, #468]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a74      	ldr	r2, [pc, #464]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a48:	f043 0320 	orr.w	r3, r3, #32
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b72      	ldr	r3, [pc, #456]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0320 	and.w	r3, r3, #32
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b6e      	ldr	r3, [pc, #440]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a6d      	ldr	r2, [pc, #436]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b6b      	ldr	r3, [pc, #428]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b67      	ldr	r3, [pc, #412]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a66      	ldr	r2, [pc, #408]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b64      	ldr	r3, [pc, #400]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0310 	and.w	r3, r3, #16
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b60      	ldr	r3, [pc, #384]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a5f      	ldr	r2, [pc, #380]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b5d      	ldr	r3, [pc, #372]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b59      	ldr	r3, [pc, #356]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a58      	ldr	r2, [pc, #352]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b56      	ldr	r3, [pc, #344]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a51      	ldr	r2, [pc, #324]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b4f      	ldr	r3, [pc, #316]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(H_ENA_GPIO_Port, H_ENA_Pin, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aec:	484b      	ldr	r0, [pc, #300]	; (8000c1c <MX_GPIO_Init+0x210>)
 8000aee:	f001 ffe9 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, H_ENB_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000af8:	4848      	ldr	r0, [pc, #288]	; (8000c1c <MX_GPIO_Init+0x210>)
 8000afa:	f001 ffe3 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, H_IN3_Pin|H_IN4_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8000b04:	4846      	ldr	r0, [pc, #280]	; (8000c20 <MX_GPIO_Init+0x214>)
 8000b06:	f001 ffdd 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, H_IN1_Pin|H_IN2_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000b10:	4844      	ldr	r0, [pc, #272]	; (8000c24 <MX_GPIO_Init+0x218>)
 8000b12:	f001 ffd7 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1c:	4842      	ldr	r0, [pc, #264]	; (8000c28 <MX_GPIO_Init+0x21c>)
 8000b1e:	f001 ffd1 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_button_Pin */
  GPIO_InitStruct.Pin = User_button_Pin;
 8000b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING_FALLING;
 8000b28:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(User_button_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	483c      	ldr	r0, [pc, #240]	; (8000c2c <MX_GPIO_Init+0x220>)
 8000b3a:	f001 fe17 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : H_ENA_Pin H_ENB_Pin */
  GPIO_InitStruct.Pin = H_ENA_Pin|H_ENB_Pin;
 8000b3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4831      	ldr	r0, [pc, #196]	; (8000c1c <MX_GPIO_Init+0x210>)
 8000b58:	f001 fe08 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000b5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4829      	ldr	r0, [pc, #164]	; (8000c1c <MX_GPIO_Init+0x210>)
 8000b76:	f001 fdf9 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : H_IN3_Pin H_IN4_Pin */
  GPIO_InitStruct.Pin = H_IN3_Pin|H_IN4_Pin;
 8000b7a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4823      	ldr	r0, [pc, #140]	; (8000c20 <MX_GPIO_Init+0x214>)
 8000b94:	f001 fdea 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : H_IN1_Pin H_IN2_Pin */
  GPIO_InitStruct.Pin = H_IN1_Pin|H_IN2_Pin;
 8000b98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481c      	ldr	r0, [pc, #112]	; (8000c24 <MX_GPIO_Init+0x218>)
 8000bb2:	f001 fddb 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_INT1_Pin */
  GPIO_InitStruct.Pin = SPI_INT1_Pin;
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI_INT1_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4818      	ldr	r0, [pc, #96]	; (8000c2c <MX_GPIO_Init+0x220>)
 8000bca:	f001 fdcf 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4810      	ldr	r0, [pc, #64]	; (8000c28 <MX_GPIO_Init+0x21c>)
 8000be8:	f001 fdc0 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <MX_GPIO_Init+0x224>)
 8000c0a:	f001 fdaf 	bl	800276c <HAL_GPIO_Init>

}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	; 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40021400 	.word	0x40021400
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40020c00 	.word	0x40020c00
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40020400 	.word	0x40020400

08000c34 <SPIWrite>:

/* USER CODE BEGIN 4 */
void SPIWrite(uint8_t address, uint8_t data)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]
  address &= 0x7F;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	71fb      	strb	r3, [r7, #7]
  //SPI TX on
  HAL_GPIO_WritePin(GPIOF, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <SPIWrite+0x58>)
 8000c56:	f001 ff35 	bl	8002ac4 <HAL_GPIO_WritePin>
  //SPI address transmit
  HAL_SPI_Transmit(&hspi1, &address, sizeof(address), HAL_MAX_DELAY);
 8000c5a:	1df9      	adds	r1, r7, #7
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	2201      	movs	r2, #1
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <SPIWrite+0x5c>)
 8000c64:	f002 fc69 	bl	800353a <HAL_SPI_Transmit>
  //SPI data transmit
  HAL_SPI_Transmit(&hspi1, &data, sizeof(data), HAL_MAX_DELAY);
 8000c68:	1db9      	adds	r1, r7, #6
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <SPIWrite+0x5c>)
 8000c72:	f002 fc62 	bl	800353a <HAL_SPI_Transmit>
  //SPI TX off
  HAL_GPIO_WritePin(GPIOF, SPI_CS_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <SPIWrite+0x58>)
 8000c7e:	f001 ff21 	bl	8002ac4 <HAL_GPIO_WritePin>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021400 	.word	0x40021400
 8000c90:	20000134 	.word	0x20000134

08000c94 <SPIRead>:

uint8_t SPIRead(uint8_t address)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  address |= 0x80;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	71fb      	strb	r3, [r7, #7]
  //SPI TX on
  HAL_GPIO_WritePin(GPIOF, SPI_CS_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cae:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <SPIRead+0x54>)
 8000cb0:	f001 ff08 	bl	8002ac4 <HAL_GPIO_WritePin>
  //SPI address transmit
  HAL_SPI_Transmit(&hspi1, &address, sizeof(address), HAL_MAX_DELAY);
 8000cb4:	1df9      	adds	r1, r7, #7
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	2201      	movs	r2, #1
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <SPIRead+0x58>)
 8000cbe:	f002 fc3c 	bl	800353a <HAL_SPI_Transmit>
  //SPI data receive
  HAL_SPI_Receive(&hspi1, &data, sizeof(data), HAL_MAX_DELAY);
 8000cc2:	f107 010f 	add.w	r1, r7, #15
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4807      	ldr	r0, [pc, #28]	; (8000cec <SPIRead+0x58>)
 8000cce:	f002 fd70 	bl	80037b2 <HAL_SPI_Receive>
  //SPI TX off
  HAL_GPIO_WritePin(GPIOF, SPI_CS_Pin, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <SPIRead+0x54>)
 8000cda:	f001 fef3 	bl	8002ac4 <HAL_GPIO_WritePin>
  return data;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021400 	.word	0x40021400
 8000cec:	20000134 	.word	0x20000134

08000cf0 <Get_gyro_values>:

L3G4200D_output Get_gyro_values()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uint8_t x_l,x_h,y_l,y_h,z_l,z_h;
	L3G4200D_output gyro_data;
	x_l = SPIRead(L3G4200D_REG_OUT_X_L);
 8000cf8:	2028      	movs	r0, #40	; 0x28
 8000cfa:	f7ff ffcb 	bl	8000c94 <SPIRead>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	75fb      	strb	r3, [r7, #23]
	x_h = SPIRead(L3G4200D_REG_OUT_X_H);
 8000d02:	2029      	movs	r0, #41	; 0x29
 8000d04:	f7ff ffc6 	bl	8000c94 <SPIRead>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	75bb      	strb	r3, [r7, #22]
	y_l = SPIRead(L3G4200D_REG_OUT_Y_L);
 8000d0c:	202a      	movs	r0, #42	; 0x2a
 8000d0e:	f7ff ffc1 	bl	8000c94 <SPIRead>
 8000d12:	4603      	mov	r3, r0
 8000d14:	757b      	strb	r3, [r7, #21]
	y_h = SPIRead(L3G4200D_REG_OUT_Y_H);
 8000d16:	202b      	movs	r0, #43	; 0x2b
 8000d18:	f7ff ffbc 	bl	8000c94 <SPIRead>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	753b      	strb	r3, [r7, #20]
	z_l = SPIRead(L3G4200D_REG_OUT_Z_L);
 8000d20:	202c      	movs	r0, #44	; 0x2c
 8000d22:	f7ff ffb7 	bl	8000c94 <SPIRead>
 8000d26:	4603      	mov	r3, r0
 8000d28:	74fb      	strb	r3, [r7, #19]
	z_h = SPIRead(L3G4200D_REG_OUT_Z_H);
 8000d2a:	202d      	movs	r0, #45	; 0x2d
 8000d2c:	f7ff ffb2 	bl	8000c94 <SPIRead>
 8000d30:	4603      	mov	r3, r0
 8000d32:	74bb      	strb	r3, [r7, #18]
	gyro_data.x = (x_l & 0xFF) | ((x_h & 0xFF) << 8);
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	b21a      	sxth	r2, r3
 8000d38:	7dbb      	ldrb	r3, [r7, #22]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	81bb      	strh	r3, [r7, #12]
	gyro_data.y = (y_l & 0xFF) | ((y_h & 0xFF) << 8);
 8000d46:	7d7b      	ldrb	r3, [r7, #21]
 8000d48:	b21a      	sxth	r2, r3
 8000d4a:	7d3b      	ldrb	r3, [r7, #20]
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	81fb      	strh	r3, [r7, #14]
	gyro_data.z = (z_l & 0xFF) | ((z_h & 0xFF) << 8);
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	7cbb      	ldrb	r3, [r7, #18]
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	823b      	strh	r3, [r7, #16]
	return gyro_data;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	6010      	str	r0, [r2, #0]
 8000d76:	889b      	ldrh	r3, [r3, #4]
 8000d78:	8093      	strh	r3, [r2, #4]
}
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <gyroInit>:

void gyroInit()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  uint8_t scale, status;
  status = SPIRead(L3G4200D_REG_WHO_AM_I);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f7ff ff82 	bl	8000c94 <SPIRead>
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
  printf("%d\r\n", status);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4619      	mov	r1, r3
 8000d98:	480f      	ldr	r0, [pc, #60]	; (8000dd8 <gyroInit+0x54>)
 8000d9a:	f004 f943 	bl	8005024 <iprintf>
  // Enable x, y, z and turn off power down mode:
  SPIWrite(L3G4200D_REG_CTRL_REG1, 0x0f);
 8000d9e:	210f      	movs	r1, #15
 8000da0:	2020      	movs	r0, #32
 8000da2:	f7ff ff47 	bl	8000c34 <SPIWrite>
  // HPF
  SPIWrite(L3G4200D_REG_CTRL_REG2, 0);
 8000da6:	2100      	movs	r1, #0
 8000da8:	2021      	movs	r0, #33	; 0x21
 8000daa:	f7ff ff43 	bl	8000c34 <SPIWrite>
  // Configure CTRL_REG3 to generate data ready interrupt on INT2
  // No interrupts used on INT1, if you'd like to configure INT1
  // or INT2 otherwise, consult the datasheet:
  SPIWrite(L3G4200D_REG_CTRL_REG3, 0);
 8000dae:	2100      	movs	r1, #0
 8000db0:	2022      	movs	r0, #34	; 0x22
 8000db2:	f7ff ff3f 	bl	8000c34 <SPIWrite>
  // CTRL_REG4 controls the full-scale range, among other things:
  scale = 2 & 0x03;
 8000db6:	2302      	movs	r3, #2
 8000db8:	71bb      	strb	r3, [r7, #6]
  SPIWrite(L3G4200D_REG_CTRL_REG4, scale << 4);
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2023      	movs	r0, #35	; 0x23
 8000dc4:	f7ff ff36 	bl	8000c34 <SPIWrite>
  // CTRL_REG5 controls high-pass filtering of outputs, use it
  // if you'd like:
  SPIWrite(L3G4200D_REG_CTRL_REG5, 0);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2024      	movs	r0, #36	; 0x24
 8000dcc:	f7ff ff32 	bl	8000c34 <SPIWrite>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	08005f70 	.word	0x08005f70

08000ddc <btmsg>:

char* btmsg()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  uint8_t bt_msg;
  char *output_msg;
  HAL_UART_Receive(&huart6, &bt_msg, sizeof(bt_msg), 500);
 8000de2:	1cf9      	adds	r1, r7, #3
 8000de4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000de8:	2201      	movs	r2, #1
 8000dea:	4819      	ldr	r0, [pc, #100]	; (8000e50 <btmsg+0x74>)
 8000dec:	f003 f911 	bl	8004012 <HAL_UART_Receive>
  printf("%d\r\n", bt_msg);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	4619      	mov	r1, r3
 8000df4:	4817      	ldr	r0, [pc, #92]	; (8000e54 <btmsg+0x78>)
 8000df6:	f004 f915 	bl	8005024 <iprintf>
  if(bt_msg == 82)
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	2b52      	cmp	r3, #82	; 0x52
 8000dfe:	d102      	bne.n	8000e06 <btmsg+0x2a>
  {
	  output_msg = "right";
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <btmsg+0x7c>)
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	e01f      	b.n	8000e46 <btmsg+0x6a>
  }
  else if(bt_msg == 76)
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	2b4c      	cmp	r3, #76	; 0x4c
 8000e0a:	d102      	bne.n	8000e12 <btmsg+0x36>
  {
 	  output_msg = "left";
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <btmsg+0x80>)
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	e019      	b.n	8000e46 <btmsg+0x6a>
   }
  else if(bt_msg == 70)
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	2b46      	cmp	r3, #70	; 0x46
 8000e16:	d102      	bne.n	8000e1e <btmsg+0x42>
  {
 	  output_msg = "up";
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <btmsg+0x84>)
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	e013      	b.n	8000e46 <btmsg+0x6a>
   }
  else if(bt_msg == 71)
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	2b47      	cmp	r3, #71	; 0x47
 8000e22:	d102      	bne.n	8000e2a <btmsg+0x4e>
  {
 	  output_msg = "down";
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <btmsg+0x88>)
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	e00d      	b.n	8000e46 <btmsg+0x6a>
   }
  else if(bt_msg == 88)
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	2b58      	cmp	r3, #88	; 0x58
 8000e2e:	d102      	bne.n	8000e36 <btmsg+0x5a>
  {
 	  output_msg = "x";
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <btmsg+0x8c>)
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	e007      	b.n	8000e46 <btmsg+0x6a>
   }
  else if(bt_msg == 89)
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	2b59      	cmp	r3, #89	; 0x59
 8000e3a:	d102      	bne.n	8000e42 <btmsg+0x66>
  {
 	  output_msg = "y";
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <btmsg+0x90>)
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	e001      	b.n	8000e46 <btmsg+0x6a>
   }
  else
  {
 	  output_msg = "denada";
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <btmsg+0x94>)
 8000e44:	607b      	str	r3, [r7, #4]
   }
  return output_msg;
 8000e46:	687b      	ldr	r3, [r7, #4]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200001d0 	.word	0x200001d0
 8000e54:	08005f70 	.word	0x08005f70
 8000e58:	08005f78 	.word	0x08005f78
 8000e5c:	08005f80 	.word	0x08005f80
 8000e60:	08005f88 	.word	0x08005f88
 8000e64:	08005f8c 	.word	0x08005f8c
 8000e68:	08005f94 	.word	0x08005f94
 8000e6c:	08005f98 	.word	0x08005f98
 8000e70:	08005f9c 	.word	0x08005f9c

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a3d      	ldr	r2, [pc, #244]	; (8000fe4 <HAL_ADC_MspInit+0x114>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d173      	bne.n	8000fda <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a3b      	ldr	r2, [pc, #236]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000efc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b39      	ldr	r3, [pc, #228]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a34      	ldr	r2, [pc, #208]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a2d      	ldr	r2, [pc, #180]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    PF5     ------> ADC3_IN15
    PF10     ------> ADC3_IN8
    PC0     ------> ADC3_IN10
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = IR3_Pin|IR2_Pin|IR1_Pin;
 8000f46:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4824      	ldr	r0, [pc, #144]	; (8000fec <HAL_ADC_MspInit+0x11c>)
 8000f5c:	f001 fc06 	bl	800276c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR5_Pin|IR4_Pin;
 8000f60:	2309      	movs	r3, #9
 8000f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f64:	2303      	movs	r3, #3
 8000f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <HAL_ADC_MspInit+0x120>)
 8000f74:	f001 fbfa 	bl	800276c <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <HAL_ADC_MspInit+0x128>)
 8000f7c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000f80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f84:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f98:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000f9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000fa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fa8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000fc0:	f000 ffd2 	bl	8001f68 <HAL_DMA_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_ADC_MspInit+0xfe>
    {
      Error_Handler();
 8000fca:	f7ff ff53 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_ADC_MspInit+0x124>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40012200 	.word	0x40012200
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40021400 	.word	0x40021400
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	200000d4 	.word	0x200000d4
 8000ff8:	40026410 	.word	0x40026410

08000ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_SPI_MspInit+0x84>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12b      	bne.n	8001076 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_SPI_MspInit+0x88>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a17      	ldr	r2, [pc, #92]	; (8001084 <HAL_SPI_MspInit+0x88>)
 8001028:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_SPI_MspInit+0x88>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_SPI_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <HAL_SPI_MspInit+0x88>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_SPI_MspInit+0x88>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDA_Pin;
 8001056:	23e0      	movs	r3, #224	; 0xe0
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001066:	2305      	movs	r3, #5
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 8001072:	f001 fb7b 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40013000 	.word	0x40013000
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a36      	ldr	r2, [pc, #216]	; (8001184 <HAL_UART_MspInit+0xf8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d12c      	bne.n	8001108 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	4b35      	ldr	r3, [pc, #212]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a34      	ldr	r2, [pc, #208]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010e6:	230c      	movs	r3, #12
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f6:	2307      	movs	r3, #7
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4822      	ldr	r0, [pc, #136]	; (800118c <HAL_UART_MspInit+0x100>)
 8001102:	f001 fb33 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001106:	e039      	b.n	800117c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <HAL_UART_MspInit+0x104>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d134      	bne.n	800117c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <HAL_UART_MspInit+0xfc>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_UART_MspInit+0xfc>)
 800111c:	f043 0320 	orr.w	r3, r3, #32
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_UART_MspInit+0xfc>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_UART_MspInit+0xfc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_UART_MspInit+0xfc>)
 8001138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_UART_MspInit+0xfc>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BT_RX_Pin|BT_TX_Pin;
 800114a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800115c:	2308      	movs	r3, #8
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <HAL_UART_MspInit+0x108>)
 8001168:	f001 fb00 	bl	800276c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2047      	movs	r0, #71	; 0x47
 8001172:	f000 fec2 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001176:	2047      	movs	r0, #71	; 0x47
 8001178:	f000 fedb 	bl	8001f32 <HAL_NVIC_EnableIRQ>
}
 800117c:	bf00      	nop
 800117e:	3730      	adds	r7, #48	; 0x30
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40004400 	.word	0x40004400
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000
 8001190:	40011400 	.word	0x40011400
 8001194:	40021800 	.word	0x40021800

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f948 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <DMA2_Stream0_IRQHandler+0x10>)
 80011f2:	f001 f851 	bl	8002298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200000d4 	.word	0x200000d4

08001200 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <USART6_IRQHandler+0x10>)
 8001206:	f002 ffa7 	bl	8004158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200001d0 	.word	0x200001d0

08001214 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e00a      	b.n	800123c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001226:	f3af 8000 	nop.w
 800122a:	4601      	mov	r1, r0
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	60ba      	str	r2, [r7, #8]
 8001232:	b2ca      	uxtb	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbf0      	blt.n	8001226 <_read+0x12>
	}

return len;
 8001244:	687b      	ldr	r3, [r7, #4]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e009      	b.n	8001274 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f9ba 	bl	80005e2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbf1      	blt.n	8001260 <_write+0x12>
	}
	return len;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_close>:

int _close(int file)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ae:	605a      	str	r2, [r3, #4]
	return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_isatty>:

int _isatty(int file)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	return 1;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
	return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <_sbrk+0x5c>)
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <_sbrk+0x60>)
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <_sbrk+0x64>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <_sbrk+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	429a      	cmp	r2, r3
 800131e:	d207      	bcs.n	8001330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001320:	f003 fe4e 	bl	8004fc0 <__errno>
 8001324:	4603      	mov	r3, r0
 8001326:	220c      	movs	r2, #12
 8001328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e009      	b.n	8001344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <_sbrk+0x64>)
 8001340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20030000 	.word	0x20030000
 8001350:	00000400 	.word	0x00000400
 8001354:	20000214 	.word	0x20000214
 8001358:	20000230 	.word	0x20000230

0800135c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <SystemInit+0x20>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <SystemInit+0x20>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001386:	490e      	ldr	r1, [pc, #56]	; (80013c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800139c:	4c0b      	ldr	r4, [pc, #44]	; (80013cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013aa:	f7ff ffd7 	bl	800135c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ae:	f003 fe0d 	bl	8004fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff f923 	bl	80005fc <main>
  bx  lr    
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013c4:	0800606c 	.word	0x0800606c
  ldr r2, =_sbss
 80013c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013cc:	2000022c 	.word	0x2000022c

080013d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <HAL_Init+0x40>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_Init+0x40>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x40>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 fd71 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f808 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fd3a 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x54>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x58>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fd89 	bl	8001f4e <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f000 fd51 	bl	8001efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_InitTick+0x5c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20000008 	.word	0x20000008
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	20000218 	.word	0x20000218

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000218 	.word	0x20000218

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_Delay+0x44>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008

08001500 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e033      	b.n	800157e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fcd6 	bl	8000ed0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001546:	f023 0302 	bic.w	r3, r3, #2
 800154a:	f043 0202 	orr.w	r2, r3, #2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fa78 	bl	8001a48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f023 0303 	bic.w	r3, r3, #3
 8001566:	f043 0201 	orr.w	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
 800156e:	e001      	b.n	8001574 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Start_DMA+0x1e>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e0e9      	b.n	800177a <HAL_ADC_Start_DMA+0x1f2>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d018      	beq.n	80015ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015cc:	4b6d      	ldr	r3, [pc, #436]	; (8001784 <HAL_ADC_Start_DMA+0x1fc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a6d      	ldr	r2, [pc, #436]	; (8001788 <HAL_ADC_Start_DMA+0x200>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0c9a      	lsrs	r2, r3, #18
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015e0:	e002      	b.n	80015e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f9      	bne.n	80015e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015fc:	d107      	bne.n	800160e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800160c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b01      	cmp	r3, #1
 800161a:	f040 80a1 	bne.w	8001760 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	2b00      	cmp	r3, #0
 800163e:	d007      	beq.n	8001650 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001648:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800165c:	d106      	bne.n	800166c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f023 0206 	bic.w	r2, r3, #6
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	645a      	str	r2, [r3, #68]	; 0x44
 800166a:	e002      	b.n	8001672 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <HAL_ADC_Start_DMA+0x204>)
 800167c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	4a43      	ldr	r2, [pc, #268]	; (8001790 <HAL_ADC_Start_DMA+0x208>)
 8001684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168a:	4a42      	ldr	r2, [pc, #264]	; (8001794 <HAL_ADC_Start_DMA+0x20c>)
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001692:	4a41      	ldr	r2, [pc, #260]	; (8001798 <HAL_ADC_Start_DMA+0x210>)
 8001694:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800169e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	334c      	adds	r3, #76	; 0x4c
 80016ca:	4619      	mov	r1, r3
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f000 fcf8 	bl	80020c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d12a      	bne.n	8001736 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a2d      	ldr	r2, [pc, #180]	; (800179c <HAL_ADC_Start_DMA+0x214>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d015      	beq.n	8001716 <HAL_ADC_Start_DMA+0x18e>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a2c      	ldr	r2, [pc, #176]	; (80017a0 <HAL_ADC_Start_DMA+0x218>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d105      	bne.n	8001700 <HAL_ADC_Start_DMA+0x178>
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <HAL_ADC_Start_DMA+0x204>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00a      	beq.n	8001716 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a27      	ldr	r2, [pc, #156]	; (80017a4 <HAL_ADC_Start_DMA+0x21c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d136      	bne.n	8001778 <HAL_ADC_Start_DMA+0x1f0>
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_ADC_Start_DMA+0x204>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d130      	bne.n	8001778 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d129      	bne.n	8001778 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	e020      	b.n	8001778 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a18      	ldr	r2, [pc, #96]	; (800179c <HAL_ADC_Start_DMA+0x214>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d11b      	bne.n	8001778 <HAL_ADC_Start_DMA+0x1f0>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d114      	bne.n	8001778 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	e00b      	b.n	8001778 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f043 0210 	orr.w	r2, r3, #16
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000000 	.word	0x20000000
 8001788:	431bde83 	.word	0x431bde83
 800178c:	40012300 	.word	0x40012300
 8001790:	08001c41 	.word	0x08001c41
 8001794:	08001cfb 	.word	0x08001cfb
 8001798:	08001d17 	.word	0x08001d17
 800179c:	40012000 	.word	0x40012000
 80017a0:	40012100 	.word	0x40012100
 80017a4:	40012200 	.word	0x40012200

080017a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x1c>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e113      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x244>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b09      	cmp	r3, #9
 800180e:	d925      	bls.n	800185c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68d9      	ldr	r1, [r3, #12]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	3b1e      	subs	r3, #30
 8001826:	2207      	movs	r2, #7
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43da      	mvns	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	400a      	ands	r2, r1
 8001834:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68d9      	ldr	r1, [r3, #12]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	4603      	mov	r3, r0
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4403      	add	r3, r0
 800184e:	3b1e      	subs	r3, #30
 8001850:	409a      	lsls	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	e022      	b.n	80018a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6919      	ldr	r1, [r3, #16]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	2207      	movs	r2, #7
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	400a      	ands	r2, r1
 800187e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	b29b      	uxth	r3, r3
 8001890:	4618      	mov	r0, r3
 8001892:	4603      	mov	r3, r0
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4403      	add	r3, r0
 8001898:	409a      	lsls	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d824      	bhi.n	80018f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	3b05      	subs	r3, #5
 80018bc:	221f      	movs	r2, #31
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	400a      	ands	r2, r1
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	4618      	mov	r0, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	3b05      	subs	r3, #5
 80018e6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34
 80018f2:	e04c      	b.n	800198e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d824      	bhi.n	8001946 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b23      	subs	r3, #35	; 0x23
 800190e:	221f      	movs	r2, #31
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43da      	mvns	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	400a      	ands	r2, r1
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	4618      	mov	r0, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3b23      	subs	r3, #35	; 0x23
 8001938:	fa00 f203 	lsl.w	r2, r0, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
 8001944:	e023      	b.n	800198e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	3b41      	subs	r3, #65	; 0x41
 8001958:	221f      	movs	r2, #31
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	400a      	ands	r2, r1
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	3b41      	subs	r3, #65	; 0x41
 8001982:	fa00 f203 	lsl.w	r2, r0, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198e:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <HAL_ADC_ConfigChannel+0x250>)
 8001990:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <HAL_ADC_ConfigChannel+0x254>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d10f      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1d8>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b12      	cmp	r3, #18
 80019a2:	d10b      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_ADC_ConfigChannel+0x254>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d12b      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x23a>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <HAL_ADC_ConfigChannel+0x258>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d003      	beq.n	80019d8 <HAL_ADC_ConfigChannel+0x1f4>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b11      	cmp	r3, #17
 80019d6:	d122      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_ADC_ConfigChannel+0x258>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d111      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_ADC_ConfigChannel+0x25c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_ADC_ConfigChannel+0x260>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	0c9a      	lsrs	r2, r3, #18
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a10:	e002      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40012300 	.word	0x40012300
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	10000012 	.word	0x10000012
 8001a40:	20000000 	.word	0x20000000
 8001a44:	431bde83 	.word	0x431bde83

08001a48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a50:	4b79      	ldr	r3, [pc, #484]	; (8001c38 <ADC_Init+0x1f0>)
 8001a52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	021a      	lsls	r2, r3, #8
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6899      	ldr	r1, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <ADC_Init+0x1f4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d022      	beq.n	8001b26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6899      	ldr	r1, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6899      	ldr	r1, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	e00f      	b.n	8001b46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0202 	bic.w	r2, r2, #2
 8001b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6899      	ldr	r1, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7e1b      	ldrb	r3, [r3, #24]
 8001b60:	005a      	lsls	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01b      	beq.n	8001bac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6859      	ldr	r1, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	035a      	lsls	r2, r3, #13
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	e007      	b.n	8001bbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	051a      	lsls	r2, r3, #20
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bfe:	025a      	lsls	r2, r3, #9
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6899      	ldr	r1, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	029a      	lsls	r2, r3, #10
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	609a      	str	r2, [r3, #8]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40012300 	.word	0x40012300
 8001c3c:	0f000001 	.word	0x0f000001

08001c40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d13c      	bne.n	8001cd4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d12b      	bne.n	8001ccc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d127      	bne.n	8001ccc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d119      	bne.n	8001ccc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0220 	bic.w	r2, r2, #32
 8001ca6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f7ff fd6b 	bl	80017a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001cd2:	e00e      	b.n	8001cf2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7ff fd75 	bl	80017d0 <HAL_ADC_ErrorCallback>
}
 8001ce6:	e004      	b.n	8001cf2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7ff fd57 	bl	80017bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2240      	movs	r2, #64	; 0x40
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f043 0204 	orr.w	r2, r3, #4
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7ff fd4a 	bl	80017d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <__NVIC_SetPriorityGrouping>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_GetPriorityGrouping>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_EnableIRQ>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0b      	blt.n	8001dd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4907      	ldr	r1, [pc, #28]	; (8001de0 <__NVIC_EnableIRQ+0x38>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2001      	movs	r0, #1
 8001dca:	fa00 f202 	lsl.w	r2, r0, r2
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_SetPriority>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	; (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <NVIC_EncodePriority>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f1c3 0307 	rsb	r3, r3, #7
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	bf28      	it	cs
 8001e56:	2304      	movcs	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d902      	bls.n	8001e68 <NVIC_EncodePriority+0x30>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b03      	subs	r3, #3
 8001e66:	e000      	b.n	8001e6a <NVIC_EncodePriority+0x32>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43d9      	mvns	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	4313      	orrs	r3, r2
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <SysTick_Config>:
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb0:	d301      	bcc.n	8001eb6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00f      	b.n	8001ed6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <SysTick_Config+0x40>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f7ff ff8e 	bl	8001de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <SysTick_Config+0x40>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SysTick_Config+0x40>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff29 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0c:	f7ff ff3e 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	6978      	ldr	r0, [r7, #20]
 8001f18:	f7ff ff8e 	bl	8001e38 <NVIC_EncodePriority>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff5d 	bl	8001de4 <__NVIC_SetPriority>
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff31 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffa2 	bl	8001ea0 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff fa94 	bl	80014a0 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e099      	b.n	80020b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa4:	e00f      	b.n	8001fc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fa6:	f7ff fa7b 	bl	80014a0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d908      	bls.n	8001fc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e078      	b.n	80020b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e8      	bne.n	8001fa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <HAL_DMA_Init+0x158>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2b04      	cmp	r3, #4
 800201e:	d107      	bne.n	8002030 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	4313      	orrs	r3, r2
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f023 0307 	bic.w	r3, r3, #7
 8002046:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	4313      	orrs	r3, r2
 8002050:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	2b04      	cmp	r3, #4
 8002058:	d117      	bne.n	800208a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00e      	beq.n	800208a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fb01 	bl	8002674 <DMA_CheckFifoParam>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2240      	movs	r2, #64	; 0x40
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002086:	2301      	movs	r3, #1
 8002088:	e016      	b.n	80020b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fab8 	bl	8002608 <DMA_CalcBaseAndBitshift>
 8002098:	4603      	mov	r3, r0
 800209a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	223f      	movs	r2, #63	; 0x3f
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	f010803f 	.word	0xf010803f

080020c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_DMA_Start_IT+0x26>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e040      	b.n	800216c <HAL_DMA_Start_IT+0xa8>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d12f      	bne.n	800215e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fa4a 	bl	80025ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	223f      	movs	r2, #63	; 0x3f
 800211e:	409a      	lsls	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0216 	orr.w	r2, r2, #22
 8002132:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0208 	orr.w	r2, r2, #8
 800214a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e005      	b.n	800216a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800216a:	7dfb      	ldrb	r3, [r7, #23]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002182:	f7ff f98d 	bl	80014a0 <HAL_GetTick>
 8002186:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e052      	b.n	800224c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0216 	bic.w	r2, r2, #22
 80021b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_DMA_Abort+0x62>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0208 	bic.w	r2, r2, #8
 80021e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f6:	e013      	b.n	8002220 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f8:	f7ff f952 	bl	80014a0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b05      	cmp	r3, #5
 8002204:	d90c      	bls.n	8002220 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2203      	movs	r2, #3
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e015      	b.n	800224c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e4      	bne.n	80021f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	223f      	movs	r2, #63	; 0x3f
 8002234:	409a      	lsls	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d004      	beq.n	8002272 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00c      	b.n	800228c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2205      	movs	r2, #5
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022a4:	4b8e      	ldr	r3, [pc, #568]	; (80024e0 <HAL_DMA_IRQHandler+0x248>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a8e      	ldr	r2, [pc, #568]	; (80024e4 <HAL_DMA_IRQHandler+0x24c>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0a9b      	lsrs	r3, r3, #10
 80022b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	2208      	movs	r2, #8
 80022c4:	409a      	lsls	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01a      	beq.n	8002304 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0204 	bic.w	r2, r2, #4
 80022ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	2208      	movs	r2, #8
 80022f2:	409a      	lsls	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	2201      	movs	r2, #1
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d012      	beq.n	800233a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2201      	movs	r2, #1
 8002328:	409a      	lsls	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	f043 0202 	orr.w	r2, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	2204      	movs	r2, #4
 8002340:	409a      	lsls	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d012      	beq.n	8002370 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	2204      	movs	r2, #4
 800235e:	409a      	lsls	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002368:	f043 0204 	orr.w	r2, r3, #4
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	2210      	movs	r2, #16
 8002376:	409a      	lsls	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d043      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d03c      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	2210      	movs	r2, #16
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d018      	beq.n	80023da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d108      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d024      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4798      	blx	r3
 80023c6:	e01f      	b.n	8002408 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01b      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
 80023d8:	e016      	b.n	8002408 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d107      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0208 	bic.w	r2, r2, #8
 80023f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	2220      	movs	r2, #32
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 808f 	beq.w	8002538 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8087 	beq.w	8002538 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242e:	2220      	movs	r2, #32
 8002430:	409a      	lsls	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b05      	cmp	r3, #5
 8002440:	d136      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0216 	bic.w	r2, r2, #22
 8002450:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002460:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d103      	bne.n	8002472 <HAL_DMA_IRQHandler+0x1da>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0208 	bic.w	r2, r2, #8
 8002480:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	223f      	movs	r2, #63	; 0x3f
 8002488:	409a      	lsls	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d07e      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
        }
        return;
 80024ae:	e079      	b.n	80025a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01d      	beq.n	80024fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d031      	beq.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4798      	blx	r3
 80024dc:	e02c      	b.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000
 80024e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d023      	beq.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
 80024f8:	e01e      	b.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10f      	bne.n	8002528 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0210 	bic.w	r2, r2, #16
 8002516:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	2b00      	cmp	r3, #0
 800253e:	d032      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d022      	beq.n	8002592 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2205      	movs	r2, #5
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	3301      	adds	r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	d307      	bcc.n	8002580 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f2      	bne.n	8002564 <HAL_DMA_IRQHandler+0x2cc>
 800257e:	e000      	b.n	8002582 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002580:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
 80025a2:	e000      	b.n	80025a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025a4:	bf00      	nop
    }
  }
}
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d108      	bne.n	80025ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ea:	e007      	b.n	80025fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	60da      	str	r2, [r3, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3b10      	subs	r3, #16
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <DMA_CalcBaseAndBitshift+0x64>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002622:	4a13      	ldr	r2, [pc, #76]	; (8002670 <DMA_CalcBaseAndBitshift+0x68>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d909      	bls.n	800264a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	1d1a      	adds	r2, r3, #4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	659a      	str	r2, [r3, #88]	; 0x58
 8002648:	e007      	b.n	800265a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002652:	f023 0303 	bic.w	r3, r3, #3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	aaaaaaab 	.word	0xaaaaaaab
 8002670:	08005fbc 	.word	0x08005fbc

08002674 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11f      	bne.n	80026ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d856      	bhi.n	8002742 <DMA_CheckFifoParam+0xce>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <DMA_CheckFifoParam+0x28>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026bf 	.word	0x080026bf
 80026a4:	080026ad 	.word	0x080026ad
 80026a8:	08002743 	.word	0x08002743
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d046      	beq.n	8002746 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e043      	b.n	8002746 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026c6:	d140      	bne.n	800274a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e03d      	b.n	800274a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d6:	d121      	bne.n	800271c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d837      	bhi.n	800274e <DMA_CheckFifoParam+0xda>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <DMA_CheckFifoParam+0x70>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	080026fb 	.word	0x080026fb
 80026ec:	080026f5 	.word	0x080026f5
 80026f0:	0800270d 	.word	0x0800270d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e030      	b.n	800275c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d025      	beq.n	8002752 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e022      	b.n	8002752 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002714:	d11f      	bne.n	8002756 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800271a:	e01c      	b.n	8002756 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d903      	bls.n	800272a <DMA_CheckFifoParam+0xb6>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d003      	beq.n	8002730 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002728:	e018      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      break;
 800272e:	e015      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00e      	beq.n	800275a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e00b      	b.n	800275a <DMA_CheckFifoParam+0xe6>
      break;
 8002742:	bf00      	nop
 8002744:	e00a      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
 8002748:	e008      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e006      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274e:	bf00      	nop
 8002750:	e004      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;   
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
    }
  } 
  
  return status; 
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e177      	b.n	8002a78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f040 8166 	bne.w	8002a72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d005      	beq.n	80027be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d130      	bne.n	8002820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 0201 	and.w	r2, r3, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b03      	cmp	r3, #3
 800282a:	d017      	beq.n	800285c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d123      	bne.n	80028b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0203 	and.w	r2, r3, #3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80c0 	beq.w	8002a72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b66      	ldr	r3, [pc, #408]	; (8002a90 <HAL_GPIO_Init+0x324>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a65      	ldr	r2, [pc, #404]	; (8002a90 <HAL_GPIO_Init+0x324>)
 80028fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_GPIO_Init+0x324>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290e:	4a61      	ldr	r2, [pc, #388]	; (8002a94 <HAL_GPIO_Init+0x328>)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_GPIO_Init+0x32c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d037      	beq.n	80029aa <HAL_GPIO_Init+0x23e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a57      	ldr	r2, [pc, #348]	; (8002a9c <HAL_GPIO_Init+0x330>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d031      	beq.n	80029a6 <HAL_GPIO_Init+0x23a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a56      	ldr	r2, [pc, #344]	; (8002aa0 <HAL_GPIO_Init+0x334>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02b      	beq.n	80029a2 <HAL_GPIO_Init+0x236>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a55      	ldr	r2, [pc, #340]	; (8002aa4 <HAL_GPIO_Init+0x338>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d025      	beq.n	800299e <HAL_GPIO_Init+0x232>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a54      	ldr	r2, [pc, #336]	; (8002aa8 <HAL_GPIO_Init+0x33c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01f      	beq.n	800299a <HAL_GPIO_Init+0x22e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a53      	ldr	r2, [pc, #332]	; (8002aac <HAL_GPIO_Init+0x340>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d019      	beq.n	8002996 <HAL_GPIO_Init+0x22a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a52      	ldr	r2, [pc, #328]	; (8002ab0 <HAL_GPIO_Init+0x344>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x226>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a51      	ldr	r2, [pc, #324]	; (8002ab4 <HAL_GPIO_Init+0x348>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_GPIO_Init+0x222>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a50      	ldr	r2, [pc, #320]	; (8002ab8 <HAL_GPIO_Init+0x34c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x21e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4f      	ldr	r2, [pc, #316]	; (8002abc <HAL_GPIO_Init+0x350>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_GPIO_Init+0x21a>
 8002982:	2309      	movs	r3, #9
 8002984:	e012      	b.n	80029ac <HAL_GPIO_Init+0x240>
 8002986:	230a      	movs	r3, #10
 8002988:	e010      	b.n	80029ac <HAL_GPIO_Init+0x240>
 800298a:	2308      	movs	r3, #8
 800298c:	e00e      	b.n	80029ac <HAL_GPIO_Init+0x240>
 800298e:	2307      	movs	r3, #7
 8002990:	e00c      	b.n	80029ac <HAL_GPIO_Init+0x240>
 8002992:	2306      	movs	r3, #6
 8002994:	e00a      	b.n	80029ac <HAL_GPIO_Init+0x240>
 8002996:	2305      	movs	r3, #5
 8002998:	e008      	b.n	80029ac <HAL_GPIO_Init+0x240>
 800299a:	2304      	movs	r3, #4
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x240>
 800299e:	2303      	movs	r3, #3
 80029a0:	e004      	b.n	80029ac <HAL_GPIO_Init+0x240>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_Init+0x240>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x240>
 80029aa:	2300      	movs	r3, #0
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f002 0203 	and.w	r2, r2, #3
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	4093      	lsls	r3, r2
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029bc:	4935      	ldr	r1, [pc, #212]	; (8002a94 <HAL_GPIO_Init+0x328>)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ca:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <HAL_GPIO_Init+0x354>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ee:	4a34      	ldr	r2, [pc, #208]	; (8002ac0 <HAL_GPIO_Init+0x354>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f4:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_GPIO_Init+0x354>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a18:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <HAL_GPIO_Init+0x354>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a1e:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <HAL_GPIO_Init+0x354>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a42:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_GPIO_Init+0x354>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_GPIO_Init+0x354>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <HAL_GPIO_Init+0x354>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b0f      	cmp	r3, #15
 8002a7c:	f67f ae84 	bls.w	8002788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40013800 	.word	0x40013800
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	40020800 	.word	0x40020800
 8002aa4:	40020c00 	.word	0x40020c00
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40021400 	.word	0x40021400
 8002ab0:	40021800 	.word	0x40021800
 8002ab4:	40021c00 	.word	0x40021c00
 8002ab8:	40022000 	.word	0x40022000
 8002abc:	40022400 	.word	0x40022400
 8002ac0:	40013c00 	.word	0x40013c00

08002ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad4:	787b      	ldrb	r3, [r7, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae0:	e003      	b.n	8002aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae2:	887b      	ldrh	r3, [r7, #2]
 8002ae4:	041a      	lsls	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	619a      	str	r2, [r3, #24]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e267      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d075      	beq.n	8002c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b16:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d00c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b22:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d112      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2e:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3a:	d10b      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	4b7e      	ldr	r3, [pc, #504]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05b      	beq.n	8002c00 <HAL_RCC_OscConfig+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d157      	bne.n	8002c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e242      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_OscConfig+0x74>
 8002b5e:	4b76      	ldr	r3, [pc, #472]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a75      	ldr	r2, [pc, #468]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e01d      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x98>
 8002b76:	4b70      	ldr	r3, [pc, #448]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6f      	ldr	r2, [pc, #444]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b6d      	ldr	r3, [pc, #436]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6c      	ldr	r2, [pc, #432]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b90:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a68      	ldr	r2, [pc, #416]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a65      	ldr	r2, [pc, #404]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fc76 	bl	80014a0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe fc72 	bl	80014a0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e207      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fc62 	bl	80014a0 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe fc5e 	bl	80014a0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1f3      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0xe8>
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d063      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d11c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d116      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1c7      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4937      	ldr	r1, [pc, #220]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	e03a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c68:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <HAL_RCC_OscConfig+0x244>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fc17 	bl	80014a0 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c76:	f7fe fc13 	bl	80014a0 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1a8      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4925      	ldr	r1, [pc, #148]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCC_OscConfig+0x244>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fbf6 	bl	80014a0 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fbf2 	bl	80014a0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e187      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d036      	beq.n	8002d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_RCC_OscConfig+0x248>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fbd6 	bl	80014a0 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fbd2 	bl	80014a0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e167      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x200>
 8002d16:	e01b      	b.n	8002d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_RCC_OscConfig+0x248>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fbbf 	bl	80014a0 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	e00e      	b.n	8002d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe fbbb 	bl	80014a0 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d907      	bls.n	8002d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e150      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	42470000 	.word	0x42470000
 8002d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	4b88      	ldr	r3, [pc, #544]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ea      	bne.n	8002d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8097 	beq.w	8002e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d62:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	4b7d      	ldr	r3, [pc, #500]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b7a      	ldr	r3, [pc, #488]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b77      	ldr	r3, [pc, #476]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a73      	ldr	r2, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fb7b 	bl	80014a0 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7fe fb77 	bl	80014a0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e10c      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x2ea>
 8002dd4:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	4a63      	ldr	r2, [pc, #396]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6713      	str	r3, [r2, #112]	; 0x70
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x324>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x30c>
 8002dea:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a5e      	ldr	r2, [pc, #376]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a5b      	ldr	r2, [pc, #364]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0x324>
 8002e04:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a57      	ldr	r2, [pc, #348]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	4b55      	ldr	r3, [pc, #340]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a54      	ldr	r2, [pc, #336]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e16:	f023 0304 	bic.w	r3, r3, #4
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d015      	beq.n	8002e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fb3c 	bl	80014a0 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe fb38 	bl	80014a0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0cb      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	4b49      	ldr	r3, [pc, #292]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ee      	beq.n	8002e2c <HAL_RCC_OscConfig+0x334>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7fe fb26 	bl	80014a0 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7fe fb22 	bl	80014a0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0b5      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6e:	4b3e      	ldr	r3, [pc, #248]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ee      	bne.n	8002e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	4a38      	ldr	r2, [pc, #224]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a1 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e96:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d05c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d141      	bne.n	8002f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe faf6 	bl	80014a0 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe faf2 	bl	80014a0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e087      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	491b      	ldr	r1, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fe facb 	bl	80014a0 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe fac7 	bl	80014a0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e05c      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x416>
 8002f2c:	e054      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fab4 	bl	80014a0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fab0 	bl	80014a0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e045      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x444>
 8002f5a:	e03d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e038      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d121      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d11a      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d111      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cc      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b68      	ldr	r3, [pc, #416]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d90c      	bls.n	8003024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800305e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	494d      	ldr	r1, [pc, #308]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d044      	beq.n	8003108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d119      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e06f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e067      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4934      	ldr	r1, [pc, #208]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fe f9e2 	bl	80014a0 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fe f9de 	bl	80014a0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e04f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d20c      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e032      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4916      	ldr	r1, [pc, #88]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	490e      	ldr	r1, [pc, #56]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800316e:	f000 f821 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003172:	4602      	mov	r2, r0
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	490a      	ldr	r1, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe f942 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00
 80031a4:	40023800 	.word	0x40023800
 80031a8:	08005fa4 	.word	0x08005fa4
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b094      	sub	sp, #80	; 0x50
 80031ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	647b      	str	r3, [r7, #68]	; 0x44
 80031c0:	2300      	movs	r3, #0
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c4:	2300      	movs	r3, #0
 80031c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031cc:	4b79      	ldr	r3, [pc, #484]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d00d      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x40>
 80031d8:	2b08      	cmp	r3, #8
 80031da:	f200 80e1 	bhi.w	80033a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x34>
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x3a>
 80031e6:	e0db      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031ec:	e0db      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ee:	4b73      	ldr	r3, [pc, #460]	; (80033bc <HAL_RCC_GetSysClockFreq+0x208>)
 80031f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f2:	e0d8      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fe:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d063      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	2200      	movs	r2, #0
 8003212:	63bb      	str	r3, [r7, #56]	; 0x38
 8003214:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
 800321e:	2300      	movs	r3, #0
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
 8003222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003226:	4622      	mov	r2, r4
 8003228:	462b      	mov	r3, r5
 800322a:	f04f 0000 	mov.w	r0, #0
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	0159      	lsls	r1, r3, #5
 8003234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003238:	0150      	lsls	r0, r2, #5
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4621      	mov	r1, r4
 8003240:	1a51      	subs	r1, r2, r1
 8003242:	6139      	str	r1, [r7, #16]
 8003244:	4629      	mov	r1, r5
 8003246:	eb63 0301 	sbc.w	r3, r3, r1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003258:	4659      	mov	r1, fp
 800325a:	018b      	lsls	r3, r1, #6
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003262:	4651      	mov	r1, sl
 8003264:	018a      	lsls	r2, r1, #6
 8003266:	4651      	mov	r1, sl
 8003268:	ebb2 0801 	subs.w	r8, r2, r1
 800326c:	4659      	mov	r1, fp
 800326e:	eb63 0901 	sbc.w	r9, r3, r1
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003286:	4690      	mov	r8, r2
 8003288:	4699      	mov	r9, r3
 800328a:	4623      	mov	r3, r4
 800328c:	eb18 0303 	adds.w	r3, r8, r3
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	462b      	mov	r3, r5
 8003294:	eb49 0303 	adc.w	r3, r9, r3
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032a6:	4629      	mov	r1, r5
 80032a8:	024b      	lsls	r3, r1, #9
 80032aa:	4621      	mov	r1, r4
 80032ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032b0:	4621      	mov	r1, r4
 80032b2:	024a      	lsls	r2, r1, #9
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ba:	2200      	movs	r2, #0
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032c4:	f7fc ffe4 	bl	8000290 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4613      	mov	r3, r2
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d0:	e058      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d2:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	2200      	movs	r2, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	4611      	mov	r1, r2
 80032de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	2300      	movs	r3, #0
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
 80032e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032ec:	4642      	mov	r2, r8
 80032ee:	464b      	mov	r3, r9
 80032f0:	f04f 0000 	mov.w	r0, #0
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	0159      	lsls	r1, r3, #5
 80032fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fe:	0150      	lsls	r0, r2, #5
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4641      	mov	r1, r8
 8003306:	ebb2 0a01 	subs.w	sl, r2, r1
 800330a:	4649      	mov	r1, r9
 800330c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800331c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003324:	ebb2 040a 	subs.w	r4, r2, sl
 8003328:	eb63 050b 	sbc.w	r5, r3, fp
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	00eb      	lsls	r3, r5, #3
 8003336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800333a:	00e2      	lsls	r2, r4, #3
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	4643      	mov	r3, r8
 8003342:	18e3      	adds	r3, r4, r3
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	464b      	mov	r3, r9
 8003348:	eb45 0303 	adc.w	r3, r5, r3
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800335a:	4629      	mov	r1, r5
 800335c:	028b      	lsls	r3, r1, #10
 800335e:	4621      	mov	r1, r4
 8003360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003364:	4621      	mov	r1, r4
 8003366:	028a      	lsls	r2, r1, #10
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336e:	2200      	movs	r2, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	61fa      	str	r2, [r7, #28]
 8003374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003378:	f7fc ff8a 	bl	8000290 <__aeabi_uldivmod>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4613      	mov	r3, r2
 8003382:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	3301      	adds	r3, #1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3750      	adds	r7, #80	; 0x50
 80033ac:	46bd      	mov	sp, r7
 80033ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	00f42400 	.word	0x00f42400
 80033bc:	007a1200 	.word	0x007a1200

080033c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000000 	.word	0x20000000

080033d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033dc:	f7ff fff0 	bl	80033c0 <HAL_RCC_GetHCLKFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	0a9b      	lsrs	r3, r3, #10
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	4903      	ldr	r1, [pc, #12]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40023800 	.word	0x40023800
 80033fc:	08005fb4 	.word	0x08005fb4

08003400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003404:	f7ff ffdc 	bl	80033c0 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0b5b      	lsrs	r3, r3, #13
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4903      	ldr	r1, [pc, #12]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	08005fb4 	.word	0x08005fb4

08003428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e07b      	b.n	8003532 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d108      	bne.n	8003454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344a:	d009      	beq.n	8003460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	61da      	str	r2, [r3, #28]
 8003452:	e005      	b.n	8003460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fdbe 	bl	8000ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003496:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	ea42 0103 	orr.w	r1, r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	f003 0104 	and.w	r1, r3, #4
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f003 0210 	and.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b088      	sub	sp, #32
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	4613      	mov	r3, r2
 8003548:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_SPI_Transmit+0x22>
 8003558:	2302      	movs	r3, #2
 800355a:	e126      	b.n	80037aa <HAL_SPI_Transmit+0x270>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003564:	f7fd ff9c 	bl	80014a0 <HAL_GetTick>
 8003568:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d002      	beq.n	8003580 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800357a:	2302      	movs	r3, #2
 800357c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800357e:	e10b      	b.n	8003798 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_SPI_Transmit+0x52>
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003590:	e102      	b.n	8003798 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2203      	movs	r2, #3
 8003596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d8:	d10f      	bne.n	80035fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d007      	beq.n	8003618 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003620:	d14b      	bne.n	80036ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Transmit+0xf6>
 800362a:	8afb      	ldrh	r3, [r7, #22]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d13e      	bne.n	80036ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	881a      	ldrh	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	1c9a      	adds	r2, r3, #2
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003654:	e02b      	b.n	80036ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b02      	cmp	r3, #2
 8003662:	d112      	bne.n	800368a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	1c9a      	adds	r2, r3, #2
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	86da      	strh	r2, [r3, #54]	; 0x36
 8003688:	e011      	b.n	80036ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800368a:	f7fd ff09 	bl	80014a0 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d803      	bhi.n	80036a2 <HAL_SPI_Transmit+0x168>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d102      	bne.n	80036a8 <HAL_SPI_Transmit+0x16e>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036ac:	e074      	b.n	8003798 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ce      	bne.n	8003656 <HAL_SPI_Transmit+0x11c>
 80036b8:	e04c      	b.n	8003754 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Transmit+0x18e>
 80036c2:	8afb      	ldrh	r3, [r7, #22]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d140      	bne.n	800374a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	7812      	ldrb	r2, [r2, #0]
 80036d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036ee:	e02c      	b.n	800374a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d113      	bne.n	8003726 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	7812      	ldrb	r2, [r2, #0]
 800370a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	86da      	strh	r2, [r3, #54]	; 0x36
 8003724:	e011      	b.n	800374a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003726:	f7fd febb 	bl	80014a0 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d803      	bhi.n	800373e <HAL_SPI_Transmit+0x204>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d102      	bne.n	8003744 <HAL_SPI_Transmit+0x20a>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003748:	e026      	b.n	8003798 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1cd      	bne.n	80036f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	6839      	ldr	r1, [r7, #0]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fbcb 	bl	8003ef4 <SPI_EndRxTxTransaction>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e000      	b.n	8003798 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003796:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b088      	sub	sp, #32
 80037b6:	af02      	add	r7, sp, #8
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ce:	d112      	bne.n	80037f6 <HAL_SPI_Receive+0x44>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10e      	bne.n	80037f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2204      	movs	r2, #4
 80037dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f8f1 	bl	80039d4 <HAL_SPI_TransmitReceive>
 80037f2:	4603      	mov	r3, r0
 80037f4:	e0ea      	b.n	80039cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_SPI_Receive+0x52>
 8003800:	2302      	movs	r3, #2
 8003802:	e0e3      	b.n	80039cc <HAL_SPI_Receive+0x21a>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800380c:	f7fd fe48 	bl	80014a0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d002      	beq.n	8003824 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800381e:	2302      	movs	r3, #2
 8003820:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003822:	e0ca      	b.n	80039ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_SPI_Receive+0x7e>
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003834:	e0c1      	b.n	80039ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2204      	movs	r2, #4
 800383a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	88fa      	ldrh	r2, [r7, #6]
 800384e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387c:	d10f      	bne.n	800389e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d007      	beq.n	80038bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d162      	bne.n	800398a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038c4:	e02e      	b.n	8003924 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d115      	bne.n	8003900 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f103 020c 	add.w	r2, r3, #12
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038fe:	e011      	b.n	8003924 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003900:	f7fd fdce 	bl	80014a0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d803      	bhi.n	8003918 <HAL_SPI_Receive+0x166>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d102      	bne.n	800391e <HAL_SPI_Receive+0x16c>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003922:	e04a      	b.n	80039ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1cb      	bne.n	80038c6 <HAL_SPI_Receive+0x114>
 800392e:	e031      	b.n	8003994 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d113      	bne.n	8003966 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	b292      	uxth	r2, r2
 800394a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003964:	e011      	b.n	800398a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003966:	f7fd fd9b 	bl	80014a0 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d803      	bhi.n	800397e <HAL_SPI_Receive+0x1cc>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d102      	bne.n	8003984 <HAL_SPI_Receive+0x1d2>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003988:	e017      	b.n	80039ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1cd      	bne.n	8003930 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	6839      	ldr	r1, [r7, #0]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fa45 	bl	8003e28 <SPI_EndRxTransaction>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
 80039b6:	e000      	b.n	80039ba <HAL_SPI_Receive+0x208>
  }

error :
 80039b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	; 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039e2:	2301      	movs	r3, #1
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x26>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e18a      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x33c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a02:	f7fd fd4d 	bl	80014a0 <HAL_GetTick>
 8003a06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a18:	887b      	ldrh	r3, [r7, #2]
 8003a1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d00f      	beq.n	8003a44 <HAL_SPI_TransmitReceive+0x70>
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a2a:	d107      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x68>
 8003a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d003      	beq.n	8003a44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a42:	e15b      	b.n	8003cfc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_SPI_TransmitReceive+0x82>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_SPI_TransmitReceive+0x82>
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a5c:	e14e      	b.n	8003cfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d003      	beq.n	8003a72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2205      	movs	r2, #5
 8003a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	887a      	ldrh	r2, [r7, #2]
 8003a82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	887a      	ldrh	r2, [r7, #2]
 8003a88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	887a      	ldrh	r2, [r7, #2]
 8003a9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d007      	beq.n	8003ac6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ace:	d178      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_SPI_TransmitReceive+0x10a>
 8003ad8:	8b7b      	ldrh	r3, [r7, #26]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d166      	bne.n	8003bac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	881a      	ldrh	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	1c9a      	adds	r2, r3, #2
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b02:	e053      	b.n	8003bac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d11b      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x176>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d016      	beq.n	8003b4a <HAL_SPI_TransmitReceive+0x176>
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d113      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	1c9a      	adds	r2, r3, #2
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d119      	bne.n	8003b8c <HAL_SPI_TransmitReceive+0x1b8>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d014      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	b292      	uxth	r2, r2
 8003b6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	1c9a      	adds	r2, r3, #2
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b8c:	f7fd fc88 	bl	80014a0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d807      	bhi.n	8003bac <HAL_SPI_TransmitReceive+0x1d8>
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba2:	d003      	beq.n	8003bac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003baa:	e0a7      	b.n	8003cfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1a6      	bne.n	8003b04 <HAL_SPI_TransmitReceive+0x130>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1a1      	bne.n	8003b04 <HAL_SPI_TransmitReceive+0x130>
 8003bc0:	e07c      	b.n	8003cbc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x1fc>
 8003bca:	8b7b      	ldrh	r3, [r7, #26]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d16b      	bne.n	8003ca8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	7812      	ldrb	r2, [r2, #0]
 8003bdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf6:	e057      	b.n	8003ca8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d11c      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x26c>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d017      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0x26c>
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d114      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	7812      	ldrb	r2, [r2, #0]
 8003c22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d119      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x2ae>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d014      	beq.n	8003c82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c82:	f7fd fc0d 	bl	80014a0 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d803      	bhi.n	8003c9a <HAL_SPI_TransmitReceive+0x2c6>
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d102      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x2cc>
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ca6:	e029      	b.n	8003cfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1a2      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x224>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d19d      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f917 	bl	8003ef4 <SPI_EndRxTxTransaction>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d006      	beq.n	8003cda <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cd8:	e010      	b.n	8003cfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	e000      	b.n	8003cfc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3730      	adds	r7, #48	; 0x30
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d28:	f7fd fbba 	bl	80014a0 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d38:	f7fd fbb2 	bl	80014a0 <HAL_GetTick>
 8003d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d3e:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	015b      	lsls	r3, r3, #5
 8003d44:	0d1b      	lsrs	r3, r3, #20
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d4e:	e054      	b.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d050      	beq.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d58:	f7fd fba2 	bl	80014a0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d902      	bls.n	8003d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d13d      	bne.n	8003dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d86:	d111      	bne.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d90:	d004      	beq.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d107      	bne.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d10f      	bne.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e017      	b.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d19b      	bne.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000000 	.word	0x20000000

08003e28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3c:	d111      	bne.n	8003e62 <SPI_EndRxTransaction+0x3a>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e46:	d004      	beq.n	8003e52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e50:	d107      	bne.n	8003e62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d12a      	bne.n	8003ec2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e74:	d012      	beq.n	8003e9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff ff49 	bl	8003d18 <SPI_WaitFlagStateUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d02d      	beq.n	8003ee8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e026      	b.n	8003eea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff ff36 	bl	8003d18 <SPI_WaitFlagStateUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01a      	beq.n	8003ee8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	f043 0220 	orr.w	r2, r3, #32
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e013      	b.n	8003eea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2101      	movs	r1, #1
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff ff23 	bl	8003d18 <SPI_WaitFlagStateUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e000      	b.n	8003eea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <SPI_EndRxTxTransaction+0x7c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <SPI_EndRxTxTransaction+0x80>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	0d5b      	lsrs	r3, r3, #21
 8003f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f1e:	d112      	bne.n	8003f46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2200      	movs	r2, #0
 8003f28:	2180      	movs	r1, #128	; 0x80
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff fef4 	bl	8003d18 <SPI_WaitFlagStateUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e00f      	b.n	8003f66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b80      	cmp	r3, #128	; 0x80
 8003f5e:	d0f2      	beq.n	8003f46 <SPI_EndRxTxTransaction+0x52>
 8003f60:	e000      	b.n	8003f64 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f62:	bf00      	nop
  }

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000000 	.word	0x20000000
 8003f74:	165e9f81 	.word	0x165e9f81

08003f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e03f      	b.n	800400a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd f874 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fd8b 	bl	8004ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b08a      	sub	sp, #40	; 0x28
 8004016:	af02      	add	r7, sp, #8
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b20      	cmp	r3, #32
 8004030:	f040 808c 	bne.w	800414c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_UART_Receive+0x2e>
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e084      	b.n	800414e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_UART_Receive+0x40>
 800404e:	2302      	movs	r3, #2
 8004050:	e07d      	b.n	800414e <HAL_UART_Receive+0x13c>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2222      	movs	r2, #34	; 0x22
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800406e:	f7fd fa17 	bl	80014a0 <HAL_GetTick>
 8004072:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004088:	d108      	bne.n	800409c <HAL_UART_Receive+0x8a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	e003      	b.n	80040a4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80040ac:	e043      	b.n	8004136 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2120      	movs	r1, #32
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fb05 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e042      	b.n	800414e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	b29a      	uxth	r2, r3
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	3302      	adds	r3, #2
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e01f      	b.n	8004128 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f0:	d007      	beq.n	8004102 <HAL_UART_Receive+0xf0>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <HAL_UART_Receive+0xfe>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e008      	b.n	8004122 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411c:	b2da      	uxtb	r2, r3
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3301      	adds	r3, #1
 8004126:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1b6      	bne.n	80040ae <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b0ba      	sub	sp, #232	; 0xe8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800417e:	2300      	movs	r3, #0
 8004180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004184:	2300      	movs	r3, #0
 8004186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800418a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_UART_IRQHandler+0x66>
 80041aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fbd3 	bl	8004962 <UART_Receive_IT>
      return;
 80041bc:	e256      	b.n	800466c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80de 	beq.w	8004384 <HAL_UART_IRQHandler+0x22c>
 80041c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80d1 	beq.w	8004384 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_UART_IRQHandler+0xae>
 80041ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_UART_IRQHandler+0xd2>
 8004212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f043 0202 	orr.w	r2, r3, #2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_UART_IRQHandler+0xf6>
 8004236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f043 0204 	orr.w	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d011      	beq.n	800427e <HAL_UART_IRQHandler+0x126>
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d105      	bne.n	8004272 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f043 0208 	orr.w	r2, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 81ed 	beq.w	8004662 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_UART_IRQHandler+0x14e>
 8004294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fb5e 	bl	8004962 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <HAL_UART_IRQHandler+0x17a>
 80042ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d04f      	beq.n	8004372 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fa66 	bl	80047a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d141      	bne.n	800436a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3314      	adds	r3, #20
 80042ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3314      	adds	r3, #20
 800430e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004312:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800431e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800432a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1d9      	bne.n	80042e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	2b00      	cmp	r3, #0
 8004338:	d013      	beq.n	8004362 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	4a7d      	ldr	r2, [pc, #500]	; (8004534 <HAL_UART_IRQHandler+0x3dc>)
 8004340:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	4618      	mov	r0, r3
 8004348:	f7fd ff84 	bl	8002254 <HAL_DMA_Abort_IT>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d016      	beq.n	8004380 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800435c:	4610      	mov	r0, r2
 800435e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004360:	e00e      	b.n	8004380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f99a 	bl	800469c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004368:	e00a      	b.n	8004380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f996 	bl	800469c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004370:	e006      	b.n	8004380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f992 	bl	800469c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800437e:	e170      	b.n	8004662 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	bf00      	nop
    return;
 8004382:	e16e      	b.n	8004662 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	2b01      	cmp	r3, #1
 800438a:	f040 814a 	bne.w	8004622 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8143 	beq.w	8004622 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800439c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 813c 	beq.w	8004622 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	f040 80b4 	bne.w	8004538 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8140 	beq.w	8004666 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ee:	429a      	cmp	r2, r3
 80043f0:	f080 8139 	bcs.w	8004666 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004406:	f000 8088 	beq.w	800451a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	330c      	adds	r3, #12
 8004410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	330c      	adds	r3, #12
 8004432:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800443a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004442:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800444e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1d9      	bne.n	800440a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3314      	adds	r3, #20
 800445c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3314      	adds	r3, #20
 8004476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800447a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800447e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004482:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800448c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e1      	bne.n	8004456 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3314      	adds	r3, #20
 8004498:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3314      	adds	r3, #20
 80044b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e3      	bne.n	8004492 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ea:	f023 0310 	bic.w	r3, r3, #16
 80044ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80044fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800450a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e3      	bne.n	80044d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	4618      	mov	r0, r3
 8004516:	f7fd fe2d 	bl	8002174 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004522:	b29b      	uxth	r3, r3
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	b29b      	uxth	r3, r3
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8c0 	bl	80046b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004530:	e099      	b.n	8004666 <HAL_UART_IRQHandler+0x50e>
 8004532:	bf00      	nop
 8004534:	0800486b 	.word	0x0800486b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004540:	b29b      	uxth	r3, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 808b 	beq.w	800466a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8086 	beq.w	800466a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800456e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004570:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004582:	647a      	str	r2, [r7, #68]	; 0x44
 8004584:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e3      	bne.n	800455e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3314      	adds	r3, #20
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	623b      	str	r3, [r7, #32]
   return(result);
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3314      	adds	r3, #20
 80045b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045ba:	633a      	str	r2, [r7, #48]	; 0x30
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e3      	bne.n	8004596 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	330c      	adds	r3, #12
 80045e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0310 	bic.w	r3, r3, #16
 80045f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004600:	61fa      	str	r2, [r7, #28]
 8004602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	69b9      	ldr	r1, [r7, #24]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	617b      	str	r3, [r7, #20]
   return(result);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e3      	bne.n	80045dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004618:	4619      	mov	r1, r3
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f848 	bl	80046b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004620:	e023      	b.n	800466a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_UART_IRQHandler+0x4ea>
 800462e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f929 	bl	8004892 <UART_Transmit_IT>
    return;
 8004640:	e014      	b.n	800466c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00e      	beq.n	800466c <HAL_UART_IRQHandler+0x514>
 800464e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f969 	bl	8004932 <UART_EndTransmit_IT>
    return;
 8004660:	e004      	b.n	800466c <HAL_UART_IRQHandler+0x514>
    return;
 8004662:	bf00      	nop
 8004664:	e002      	b.n	800466c <HAL_UART_IRQHandler+0x514>
      return;
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <HAL_UART_IRQHandler+0x514>
      return;
 800466a:	bf00      	nop
  }
}
 800466c:	37e8      	adds	r7, #232	; 0xe8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop

08004674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b090      	sub	sp, #64	; 0x40
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d8:	e050      	b.n	800477c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d04c      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046e8:	f7fc feda 	bl	80014a0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d241      	bcs.n	800477c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800470e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004718:	637a      	str	r2, [r7, #52]	; 0x34
 800471a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800471e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3314      	adds	r3, #20
 8004732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	613b      	str	r3, [r7, #16]
   return(result);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	63bb      	str	r3, [r7, #56]	; 0x38
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800474c:	623a      	str	r2, [r7, #32]
 800474e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	69f9      	ldr	r1, [r7, #28]
 8004752:	6a3a      	ldr	r2, [r7, #32]
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	61bb      	str	r3, [r7, #24]
   return(result);
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e5      	bne.n	800472c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e00f      	b.n	800479c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4013      	ands	r3, r2
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	429a      	cmp	r2, r3
 8004798:	d09f      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3740      	adds	r7, #64	; 0x40
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b095      	sub	sp, #84	; 0x54
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	330c      	adds	r3, #12
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	330c      	adds	r3, #12
 80047ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047cc:	643a      	str	r2, [r7, #64]	; 0x40
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e5      	bne.n	80047ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3314      	adds	r3, #20
 80047e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3314      	adds	r3, #20
 80047fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004800:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	2b01      	cmp	r3, #1
 800481a:	d119      	bne.n	8004850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	60bb      	str	r3, [r7, #8]
   return(result);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f023 0310 	bic.w	r3, r3, #16
 8004832:	647b      	str	r3, [r7, #68]	; 0x44
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800483c:	61ba      	str	r2, [r7, #24]
 800483e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6979      	ldr	r1, [r7, #20]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	613b      	str	r3, [r7, #16]
   return(result);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e5      	bne.n	800481c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800485e:	bf00      	nop
 8004860:	3754      	adds	r7, #84	; 0x54
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff ff09 	bl	800469c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b21      	cmp	r3, #33	; 0x21
 80048a4:	d13e      	bne.n	8004924 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	d114      	bne.n	80048da <UART_Transmit_IT+0x48>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d110      	bne.n	80048da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	621a      	str	r2, [r3, #32]
 80048d8:	e008      	b.n	80048ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	1c59      	adds	r1, r3, #1
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6211      	str	r1, [r2, #32]
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4619      	mov	r1, r3
 80048fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10f      	bne.n	8004920 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800490e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800491e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e000      	b.n	8004926 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004948:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fe8e 	bl	8004674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b08c      	sub	sp, #48	; 0x30
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b22      	cmp	r3, #34	; 0x22
 8004974:	f040 80ab 	bne.w	8004ace <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004980:	d117      	bne.n	80049b2 <UART_Receive_IT+0x50>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d113      	bne.n	80049b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800498a:	2300      	movs	r3, #0
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	1c9a      	adds	r2, r3, #2
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28
 80049b0:	e026      	b.n	8004a00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c4:	d007      	beq.n	80049d6 <UART_Receive_IT+0x74>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <UART_Receive_IT+0x82>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	e008      	b.n	80049f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d15a      	bne.n	8004aca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0220 	bic.w	r2, r2, #32
 8004a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695a      	ldr	r2, [r3, #20]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d135      	bne.n	8004ac0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	613b      	str	r3, [r7, #16]
   return(result);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7a:	623a      	str	r2, [r7, #32]
 8004a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	69f9      	ldr	r1, [r7, #28]
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d10a      	bne.n	8004ab2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff fdf9 	bl	80046b0 <HAL_UARTEx_RxEventCallback>
 8004abe:	e002      	b.n	8004ac6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff fde1 	bl	8004688 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e002      	b.n	8004ad0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
  }
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3730      	adds	r7, #48	; 0x30
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b0c0      	sub	sp, #256	; 0x100
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	68d9      	ldr	r1, [r3, #12]
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	ea40 0301 	orr.w	r3, r0, r1
 8004b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b30:	f021 010c 	bic.w	r1, r1, #12
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	6999      	ldr	r1, [r3, #24]
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	ea40 0301 	orr.w	r3, r0, r1
 8004b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b8f      	ldr	r3, [pc, #572]	; (8004da4 <UART_SetConfig+0x2cc>)
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d005      	beq.n	8004b78 <UART_SetConfig+0xa0>
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b8d      	ldr	r3, [pc, #564]	; (8004da8 <UART_SetConfig+0x2d0>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d104      	bne.n	8004b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7fe fc42 	bl	8003400 <HAL_RCC_GetPCLK2Freq>
 8004b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b80:	e003      	b.n	8004b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b82:	f7fe fc29 	bl	80033d8 <HAL_RCC_GetPCLK1Freq>
 8004b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b94:	f040 810c 	bne.w	8004db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004baa:	4622      	mov	r2, r4
 8004bac:	462b      	mov	r3, r5
 8004bae:	1891      	adds	r1, r2, r2
 8004bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb2:	415b      	adcs	r3, r3
 8004bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bba:	4621      	mov	r1, r4
 8004bbc:	eb12 0801 	adds.w	r8, r2, r1
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	eb43 0901 	adc.w	r9, r3, r1
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bda:	4690      	mov	r8, r2
 8004bdc:	4699      	mov	r9, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	eb18 0303 	adds.w	r3, r8, r3
 8004be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004be8:	462b      	mov	r3, r5
 8004bea:	eb49 0303 	adc.w	r3, r9, r3
 8004bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c06:	460b      	mov	r3, r1
 8004c08:	18db      	adds	r3, r3, r3
 8004c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	eb42 0303 	adc.w	r3, r2, r3
 8004c12:	657b      	str	r3, [r7, #84]	; 0x54
 8004c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c1c:	f7fb fb38 	bl	8000290 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4b61      	ldr	r3, [pc, #388]	; (8004dac <UART_SetConfig+0x2d4>)
 8004c26:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	011c      	lsls	r4, r3, #4
 8004c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c50:	4641      	mov	r1, r8
 8004c52:	eb12 0a01 	adds.w	sl, r2, r1
 8004c56:	4649      	mov	r1, r9
 8004c58:	eb43 0b01 	adc.w	fp, r3, r1
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c70:	4692      	mov	sl, r2
 8004c72:	469b      	mov	fp, r3
 8004c74:	4643      	mov	r3, r8
 8004c76:	eb1a 0303 	adds.w	r3, sl, r3
 8004c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	eb4b 0303 	adc.w	r3, fp, r3
 8004c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	18db      	adds	r3, r3, r3
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8004caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cb2:	f7fb faed 	bl	8000290 <__aeabi_uldivmod>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <UART_SetConfig+0x2d4>)
 8004cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2264      	movs	r2, #100	; 0x64
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	1acb      	subs	r3, r1, r3
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cd2:	4b36      	ldr	r3, [pc, #216]	; (8004dac <UART_SetConfig+0x2d4>)
 8004cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce0:	441c      	add	r4, r3
 8004ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d04:	4641      	mov	r1, r8
 8004d06:	1851      	adds	r1, r2, r1
 8004d08:	6339      	str	r1, [r7, #48]	; 0x30
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	00cb      	lsls	r3, r1, #3
 8004d20:	4651      	mov	r1, sl
 8004d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d26:	4651      	mov	r1, sl
 8004d28:	00ca      	lsls	r2, r1, #3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4642      	mov	r2, r8
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d38:	464b      	mov	r3, r9
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d58:	460b      	mov	r3, r1
 8004d5a:	18db      	adds	r3, r3, r3
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5e:	4613      	mov	r3, r2
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d6e:	f7fb fa8f 	bl	8000290 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <UART_SetConfig+0x2d4>)
 8004d78:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	2164      	movs	r1, #100	; 0x64
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	3332      	adds	r3, #50	; 0x32
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <UART_SetConfig+0x2d4>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	f003 0207 	and.w	r2, r3, #7
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4422      	add	r2, r4
 8004d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da0:	e105      	b.n	8004fae <UART_SetConfig+0x4d6>
 8004da2:	bf00      	nop
 8004da4:	40011000 	.word	0x40011000
 8004da8:	40011400 	.word	0x40011400
 8004dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	1891      	adds	r1, r2, r2
 8004dc8:	6239      	str	r1, [r7, #32]
 8004dca:	415b      	adcs	r3, r3
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	1854      	adds	r4, r2, r1
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	eb43 0501 	adc.w	r5, r3, r1
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	00eb      	lsls	r3, r5, #3
 8004de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dea:	00e2      	lsls	r2, r4, #3
 8004dec:	4614      	mov	r4, r2
 8004dee:	461d      	mov	r5, r3
 8004df0:	4643      	mov	r3, r8
 8004df2:	18e3      	adds	r3, r4, r3
 8004df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004df8:	464b      	mov	r3, r9
 8004dfa:	eb45 0303 	adc.w	r3, r5, r3
 8004dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e1e:	4629      	mov	r1, r5
 8004e20:	008b      	lsls	r3, r1, #2
 8004e22:	4621      	mov	r1, r4
 8004e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e28:	4621      	mov	r1, r4
 8004e2a:	008a      	lsls	r2, r1, #2
 8004e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e30:	f7fb fa2e 	bl	8000290 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b60      	ldr	r3, [pc, #384]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	011c      	lsls	r4, r3, #4
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	61b9      	str	r1, [r7, #24]
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e64:	4641      	mov	r1, r8
 8004e66:	1851      	adds	r1, r2, r1
 8004e68:	6139      	str	r1, [r7, #16]
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	414b      	adcs	r3, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	00cb      	lsls	r3, r1, #3
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e86:	4651      	mov	r1, sl
 8004e88:	00ca      	lsls	r2, r1, #3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4642      	mov	r2, r8
 8004e92:	189b      	adds	r3, r3, r2
 8004e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e98:	464b      	mov	r3, r9
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	008b      	lsls	r3, r1, #2
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	008a      	lsls	r2, r1, #2
 8004eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ece:	f7fb f9df 	bl	8000290 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	2164      	movs	r1, #100	; 0x64
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	3332      	adds	r3, #50	; 0x32
 8004eea:	4a34      	ldr	r2, [pc, #208]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef6:	441c      	add	r4, r3
 8004ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efc:	2200      	movs	r2, #0
 8004efe:	673b      	str	r3, [r7, #112]	; 0x70
 8004f00:	677a      	str	r2, [r7, #116]	; 0x74
 8004f02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f06:	4642      	mov	r2, r8
 8004f08:	464b      	mov	r3, r9
 8004f0a:	1891      	adds	r1, r2, r2
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	415b      	adcs	r3, r3
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f16:	4641      	mov	r1, r8
 8004f18:	1851      	adds	r1, r2, r1
 8004f1a:	6039      	str	r1, [r7, #0]
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	414b      	adcs	r3, r1
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f2e:	4659      	mov	r1, fp
 8004f30:	00cb      	lsls	r3, r1, #3
 8004f32:	4651      	mov	r1, sl
 8004f34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f38:	4651      	mov	r1, sl
 8004f3a:	00ca      	lsls	r2, r1, #3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4603      	mov	r3, r0
 8004f42:	4642      	mov	r2, r8
 8004f44:	189b      	adds	r3, r3, r2
 8004f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f48:	464b      	mov	r3, r9
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	eb42 0303 	adc.w	r3, r2, r3
 8004f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f5c:	667a      	str	r2, [r7, #100]	; 0x64
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	008b      	lsls	r3, r1, #2
 8004f6e:	4641      	mov	r1, r8
 8004f70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f74:	4641      	mov	r1, r8
 8004f76:	008a      	lsls	r2, r1, #2
 8004f78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f7c:	f7fb f988 	bl	8000290 <__aeabi_uldivmod>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004f86:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	2164      	movs	r1, #100	; 0x64
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	3332      	adds	r3, #50	; 0x32
 8004f98:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	f003 020f 	and.w	r2, r3, #15
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4422      	add	r2, r4
 8004fac:	609a      	str	r2, [r3, #8]
}
 8004fae:	bf00      	nop
 8004fb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fba:	bf00      	nop
 8004fbc:	51eb851f 	.word	0x51eb851f

08004fc0 <__errno>:
 8004fc0:	4b01      	ldr	r3, [pc, #4]	; (8004fc8 <__errno+0x8>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	2000000c 	.word	0x2000000c

08004fcc <__libc_init_array>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	4d0d      	ldr	r5, [pc, #52]	; (8005004 <__libc_init_array+0x38>)
 8004fd0:	4c0d      	ldr	r4, [pc, #52]	; (8005008 <__libc_init_array+0x3c>)
 8004fd2:	1b64      	subs	r4, r4, r5
 8004fd4:	10a4      	asrs	r4, r4, #2
 8004fd6:	2600      	movs	r6, #0
 8004fd8:	42a6      	cmp	r6, r4
 8004fda:	d109      	bne.n	8004ff0 <__libc_init_array+0x24>
 8004fdc:	4d0b      	ldr	r5, [pc, #44]	; (800500c <__libc_init_array+0x40>)
 8004fde:	4c0c      	ldr	r4, [pc, #48]	; (8005010 <__libc_init_array+0x44>)
 8004fe0:	f000 ffae 	bl	8005f40 <_init>
 8004fe4:	1b64      	subs	r4, r4, r5
 8004fe6:	10a4      	asrs	r4, r4, #2
 8004fe8:	2600      	movs	r6, #0
 8004fea:	42a6      	cmp	r6, r4
 8004fec:	d105      	bne.n	8004ffa <__libc_init_array+0x2e>
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff4:	4798      	blx	r3
 8004ff6:	3601      	adds	r6, #1
 8004ff8:	e7ee      	b.n	8004fd8 <__libc_init_array+0xc>
 8004ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffe:	4798      	blx	r3
 8005000:	3601      	adds	r6, #1
 8005002:	e7f2      	b.n	8004fea <__libc_init_array+0x1e>
 8005004:	08006064 	.word	0x08006064
 8005008:	08006064 	.word	0x08006064
 800500c:	08006064 	.word	0x08006064
 8005010:	08006068 	.word	0x08006068

08005014 <memset>:
 8005014:	4402      	add	r2, r0
 8005016:	4603      	mov	r3, r0
 8005018:	4293      	cmp	r3, r2
 800501a:	d100      	bne.n	800501e <memset+0xa>
 800501c:	4770      	bx	lr
 800501e:	f803 1b01 	strb.w	r1, [r3], #1
 8005022:	e7f9      	b.n	8005018 <memset+0x4>

08005024 <iprintf>:
 8005024:	b40f      	push	{r0, r1, r2, r3}
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <iprintf+0x2c>)
 8005028:	b513      	push	{r0, r1, r4, lr}
 800502a:	681c      	ldr	r4, [r3, #0]
 800502c:	b124      	cbz	r4, 8005038 <iprintf+0x14>
 800502e:	69a3      	ldr	r3, [r4, #24]
 8005030:	b913      	cbnz	r3, 8005038 <iprintf+0x14>
 8005032:	4620      	mov	r0, r4
 8005034:	f000 f866 	bl	8005104 <__sinit>
 8005038:	ab05      	add	r3, sp, #20
 800503a:	9a04      	ldr	r2, [sp, #16]
 800503c:	68a1      	ldr	r1, [r4, #8]
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	4620      	mov	r0, r4
 8005042:	f000 f9bd 	bl	80053c0 <_vfiprintf_r>
 8005046:	b002      	add	sp, #8
 8005048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800504c:	b004      	add	sp, #16
 800504e:	4770      	bx	lr
 8005050:	2000000c 	.word	0x2000000c

08005054 <std>:
 8005054:	2300      	movs	r3, #0
 8005056:	b510      	push	{r4, lr}
 8005058:	4604      	mov	r4, r0
 800505a:	e9c0 3300 	strd	r3, r3, [r0]
 800505e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005062:	6083      	str	r3, [r0, #8]
 8005064:	8181      	strh	r1, [r0, #12]
 8005066:	6643      	str	r3, [r0, #100]	; 0x64
 8005068:	81c2      	strh	r2, [r0, #14]
 800506a:	6183      	str	r3, [r0, #24]
 800506c:	4619      	mov	r1, r3
 800506e:	2208      	movs	r2, #8
 8005070:	305c      	adds	r0, #92	; 0x5c
 8005072:	f7ff ffcf 	bl	8005014 <memset>
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <std+0x38>)
 8005078:	6263      	str	r3, [r4, #36]	; 0x24
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <std+0x3c>)
 800507c:	62a3      	str	r3, [r4, #40]	; 0x28
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <std+0x40>)
 8005080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <std+0x44>)
 8005084:	6224      	str	r4, [r4, #32]
 8005086:	6323      	str	r3, [r4, #48]	; 0x30
 8005088:	bd10      	pop	{r4, pc}
 800508a:	bf00      	nop
 800508c:	08005969 	.word	0x08005969
 8005090:	0800598b 	.word	0x0800598b
 8005094:	080059c3 	.word	0x080059c3
 8005098:	080059e7 	.word	0x080059e7

0800509c <_cleanup_r>:
 800509c:	4901      	ldr	r1, [pc, #4]	; (80050a4 <_cleanup_r+0x8>)
 800509e:	f000 b8af 	b.w	8005200 <_fwalk_reent>
 80050a2:	bf00      	nop
 80050a4:	08005cc1 	.word	0x08005cc1

080050a8 <__sfmoreglue>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	2268      	movs	r2, #104	; 0x68
 80050ac:	1e4d      	subs	r5, r1, #1
 80050ae:	4355      	muls	r5, r2
 80050b0:	460e      	mov	r6, r1
 80050b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050b6:	f000 f8e5 	bl	8005284 <_malloc_r>
 80050ba:	4604      	mov	r4, r0
 80050bc:	b140      	cbz	r0, 80050d0 <__sfmoreglue+0x28>
 80050be:	2100      	movs	r1, #0
 80050c0:	e9c0 1600 	strd	r1, r6, [r0]
 80050c4:	300c      	adds	r0, #12
 80050c6:	60a0      	str	r0, [r4, #8]
 80050c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050cc:	f7ff ffa2 	bl	8005014 <memset>
 80050d0:	4620      	mov	r0, r4
 80050d2:	bd70      	pop	{r4, r5, r6, pc}

080050d4 <__sfp_lock_acquire>:
 80050d4:	4801      	ldr	r0, [pc, #4]	; (80050dc <__sfp_lock_acquire+0x8>)
 80050d6:	f000 b8b3 	b.w	8005240 <__retarget_lock_acquire_recursive>
 80050da:	bf00      	nop
 80050dc:	2000021d 	.word	0x2000021d

080050e0 <__sfp_lock_release>:
 80050e0:	4801      	ldr	r0, [pc, #4]	; (80050e8 <__sfp_lock_release+0x8>)
 80050e2:	f000 b8ae 	b.w	8005242 <__retarget_lock_release_recursive>
 80050e6:	bf00      	nop
 80050e8:	2000021d 	.word	0x2000021d

080050ec <__sinit_lock_acquire>:
 80050ec:	4801      	ldr	r0, [pc, #4]	; (80050f4 <__sinit_lock_acquire+0x8>)
 80050ee:	f000 b8a7 	b.w	8005240 <__retarget_lock_acquire_recursive>
 80050f2:	bf00      	nop
 80050f4:	2000021e 	.word	0x2000021e

080050f8 <__sinit_lock_release>:
 80050f8:	4801      	ldr	r0, [pc, #4]	; (8005100 <__sinit_lock_release+0x8>)
 80050fa:	f000 b8a2 	b.w	8005242 <__retarget_lock_release_recursive>
 80050fe:	bf00      	nop
 8005100:	2000021e 	.word	0x2000021e

08005104 <__sinit>:
 8005104:	b510      	push	{r4, lr}
 8005106:	4604      	mov	r4, r0
 8005108:	f7ff fff0 	bl	80050ec <__sinit_lock_acquire>
 800510c:	69a3      	ldr	r3, [r4, #24]
 800510e:	b11b      	cbz	r3, 8005118 <__sinit+0x14>
 8005110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005114:	f7ff bff0 	b.w	80050f8 <__sinit_lock_release>
 8005118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800511c:	6523      	str	r3, [r4, #80]	; 0x50
 800511e:	4b13      	ldr	r3, [pc, #76]	; (800516c <__sinit+0x68>)
 8005120:	4a13      	ldr	r2, [pc, #76]	; (8005170 <__sinit+0x6c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	62a2      	str	r2, [r4, #40]	; 0x28
 8005126:	42a3      	cmp	r3, r4
 8005128:	bf04      	itt	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	61a3      	streq	r3, [r4, #24]
 800512e:	4620      	mov	r0, r4
 8005130:	f000 f820 	bl	8005174 <__sfp>
 8005134:	6060      	str	r0, [r4, #4]
 8005136:	4620      	mov	r0, r4
 8005138:	f000 f81c 	bl	8005174 <__sfp>
 800513c:	60a0      	str	r0, [r4, #8]
 800513e:	4620      	mov	r0, r4
 8005140:	f000 f818 	bl	8005174 <__sfp>
 8005144:	2200      	movs	r2, #0
 8005146:	60e0      	str	r0, [r4, #12]
 8005148:	2104      	movs	r1, #4
 800514a:	6860      	ldr	r0, [r4, #4]
 800514c:	f7ff ff82 	bl	8005054 <std>
 8005150:	68a0      	ldr	r0, [r4, #8]
 8005152:	2201      	movs	r2, #1
 8005154:	2109      	movs	r1, #9
 8005156:	f7ff ff7d 	bl	8005054 <std>
 800515a:	68e0      	ldr	r0, [r4, #12]
 800515c:	2202      	movs	r2, #2
 800515e:	2112      	movs	r1, #18
 8005160:	f7ff ff78 	bl	8005054 <std>
 8005164:	2301      	movs	r3, #1
 8005166:	61a3      	str	r3, [r4, #24]
 8005168:	e7d2      	b.n	8005110 <__sinit+0xc>
 800516a:	bf00      	nop
 800516c:	08005fc4 	.word	0x08005fc4
 8005170:	0800509d 	.word	0x0800509d

08005174 <__sfp>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	4607      	mov	r7, r0
 8005178:	f7ff ffac 	bl	80050d4 <__sfp_lock_acquire>
 800517c:	4b1e      	ldr	r3, [pc, #120]	; (80051f8 <__sfp+0x84>)
 800517e:	681e      	ldr	r6, [r3, #0]
 8005180:	69b3      	ldr	r3, [r6, #24]
 8005182:	b913      	cbnz	r3, 800518a <__sfp+0x16>
 8005184:	4630      	mov	r0, r6
 8005186:	f7ff ffbd 	bl	8005104 <__sinit>
 800518a:	3648      	adds	r6, #72	; 0x48
 800518c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005190:	3b01      	subs	r3, #1
 8005192:	d503      	bpl.n	800519c <__sfp+0x28>
 8005194:	6833      	ldr	r3, [r6, #0]
 8005196:	b30b      	cbz	r3, 80051dc <__sfp+0x68>
 8005198:	6836      	ldr	r6, [r6, #0]
 800519a:	e7f7      	b.n	800518c <__sfp+0x18>
 800519c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051a0:	b9d5      	cbnz	r5, 80051d8 <__sfp+0x64>
 80051a2:	4b16      	ldr	r3, [pc, #88]	; (80051fc <__sfp+0x88>)
 80051a4:	60e3      	str	r3, [r4, #12]
 80051a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051aa:	6665      	str	r5, [r4, #100]	; 0x64
 80051ac:	f000 f847 	bl	800523e <__retarget_lock_init_recursive>
 80051b0:	f7ff ff96 	bl	80050e0 <__sfp_lock_release>
 80051b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051bc:	6025      	str	r5, [r4, #0]
 80051be:	61a5      	str	r5, [r4, #24]
 80051c0:	2208      	movs	r2, #8
 80051c2:	4629      	mov	r1, r5
 80051c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051c8:	f7ff ff24 	bl	8005014 <memset>
 80051cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051d4:	4620      	mov	r0, r4
 80051d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d8:	3468      	adds	r4, #104	; 0x68
 80051da:	e7d9      	b.n	8005190 <__sfp+0x1c>
 80051dc:	2104      	movs	r1, #4
 80051de:	4638      	mov	r0, r7
 80051e0:	f7ff ff62 	bl	80050a8 <__sfmoreglue>
 80051e4:	4604      	mov	r4, r0
 80051e6:	6030      	str	r0, [r6, #0]
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d1d5      	bne.n	8005198 <__sfp+0x24>
 80051ec:	f7ff ff78 	bl	80050e0 <__sfp_lock_release>
 80051f0:	230c      	movs	r3, #12
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	e7ee      	b.n	80051d4 <__sfp+0x60>
 80051f6:	bf00      	nop
 80051f8:	08005fc4 	.word	0x08005fc4
 80051fc:	ffff0001 	.word	0xffff0001

08005200 <_fwalk_reent>:
 8005200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005204:	4606      	mov	r6, r0
 8005206:	4688      	mov	r8, r1
 8005208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800520c:	2700      	movs	r7, #0
 800520e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005212:	f1b9 0901 	subs.w	r9, r9, #1
 8005216:	d505      	bpl.n	8005224 <_fwalk_reent+0x24>
 8005218:	6824      	ldr	r4, [r4, #0]
 800521a:	2c00      	cmp	r4, #0
 800521c:	d1f7      	bne.n	800520e <_fwalk_reent+0xe>
 800521e:	4638      	mov	r0, r7
 8005220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005224:	89ab      	ldrh	r3, [r5, #12]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d907      	bls.n	800523a <_fwalk_reent+0x3a>
 800522a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800522e:	3301      	adds	r3, #1
 8005230:	d003      	beq.n	800523a <_fwalk_reent+0x3a>
 8005232:	4629      	mov	r1, r5
 8005234:	4630      	mov	r0, r6
 8005236:	47c0      	blx	r8
 8005238:	4307      	orrs	r7, r0
 800523a:	3568      	adds	r5, #104	; 0x68
 800523c:	e7e9      	b.n	8005212 <_fwalk_reent+0x12>

0800523e <__retarget_lock_init_recursive>:
 800523e:	4770      	bx	lr

08005240 <__retarget_lock_acquire_recursive>:
 8005240:	4770      	bx	lr

08005242 <__retarget_lock_release_recursive>:
 8005242:	4770      	bx	lr

08005244 <sbrk_aligned>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4e0e      	ldr	r6, [pc, #56]	; (8005280 <sbrk_aligned+0x3c>)
 8005248:	460c      	mov	r4, r1
 800524a:	6831      	ldr	r1, [r6, #0]
 800524c:	4605      	mov	r5, r0
 800524e:	b911      	cbnz	r1, 8005256 <sbrk_aligned+0x12>
 8005250:	f000 fb7a 	bl	8005948 <_sbrk_r>
 8005254:	6030      	str	r0, [r6, #0]
 8005256:	4621      	mov	r1, r4
 8005258:	4628      	mov	r0, r5
 800525a:	f000 fb75 	bl	8005948 <_sbrk_r>
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	d00a      	beq.n	8005278 <sbrk_aligned+0x34>
 8005262:	1cc4      	adds	r4, r0, #3
 8005264:	f024 0403 	bic.w	r4, r4, #3
 8005268:	42a0      	cmp	r0, r4
 800526a:	d007      	beq.n	800527c <sbrk_aligned+0x38>
 800526c:	1a21      	subs	r1, r4, r0
 800526e:	4628      	mov	r0, r5
 8005270:	f000 fb6a 	bl	8005948 <_sbrk_r>
 8005274:	3001      	adds	r0, #1
 8005276:	d101      	bne.n	800527c <sbrk_aligned+0x38>
 8005278:	f04f 34ff 	mov.w	r4, #4294967295
 800527c:	4620      	mov	r0, r4
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	20000224 	.word	0x20000224

08005284 <_malloc_r>:
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	1ccd      	adds	r5, r1, #3
 800528a:	f025 0503 	bic.w	r5, r5, #3
 800528e:	3508      	adds	r5, #8
 8005290:	2d0c      	cmp	r5, #12
 8005292:	bf38      	it	cc
 8005294:	250c      	movcc	r5, #12
 8005296:	2d00      	cmp	r5, #0
 8005298:	4607      	mov	r7, r0
 800529a:	db01      	blt.n	80052a0 <_malloc_r+0x1c>
 800529c:	42a9      	cmp	r1, r5
 800529e:	d905      	bls.n	80052ac <_malloc_r+0x28>
 80052a0:	230c      	movs	r3, #12
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	2600      	movs	r6, #0
 80052a6:	4630      	mov	r0, r6
 80052a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ac:	4e2e      	ldr	r6, [pc, #184]	; (8005368 <_malloc_r+0xe4>)
 80052ae:	f000 fdbb 	bl	8005e28 <__malloc_lock>
 80052b2:	6833      	ldr	r3, [r6, #0]
 80052b4:	461c      	mov	r4, r3
 80052b6:	bb34      	cbnz	r4, 8005306 <_malloc_r+0x82>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4638      	mov	r0, r7
 80052bc:	f7ff ffc2 	bl	8005244 <sbrk_aligned>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	4604      	mov	r4, r0
 80052c4:	d14d      	bne.n	8005362 <_malloc_r+0xde>
 80052c6:	6834      	ldr	r4, [r6, #0]
 80052c8:	4626      	mov	r6, r4
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	d140      	bne.n	8005350 <_malloc_r+0xcc>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	4631      	mov	r1, r6
 80052d2:	4638      	mov	r0, r7
 80052d4:	eb04 0803 	add.w	r8, r4, r3
 80052d8:	f000 fb36 	bl	8005948 <_sbrk_r>
 80052dc:	4580      	cmp	r8, r0
 80052de:	d13a      	bne.n	8005356 <_malloc_r+0xd2>
 80052e0:	6821      	ldr	r1, [r4, #0]
 80052e2:	3503      	adds	r5, #3
 80052e4:	1a6d      	subs	r5, r5, r1
 80052e6:	f025 0503 	bic.w	r5, r5, #3
 80052ea:	3508      	adds	r5, #8
 80052ec:	2d0c      	cmp	r5, #12
 80052ee:	bf38      	it	cc
 80052f0:	250c      	movcc	r5, #12
 80052f2:	4629      	mov	r1, r5
 80052f4:	4638      	mov	r0, r7
 80052f6:	f7ff ffa5 	bl	8005244 <sbrk_aligned>
 80052fa:	3001      	adds	r0, #1
 80052fc:	d02b      	beq.n	8005356 <_malloc_r+0xd2>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	442b      	add	r3, r5
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	e00e      	b.n	8005324 <_malloc_r+0xa0>
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	1b52      	subs	r2, r2, r5
 800530a:	d41e      	bmi.n	800534a <_malloc_r+0xc6>
 800530c:	2a0b      	cmp	r2, #11
 800530e:	d916      	bls.n	800533e <_malloc_r+0xba>
 8005310:	1961      	adds	r1, r4, r5
 8005312:	42a3      	cmp	r3, r4
 8005314:	6025      	str	r5, [r4, #0]
 8005316:	bf18      	it	ne
 8005318:	6059      	strne	r1, [r3, #4]
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	bf08      	it	eq
 800531e:	6031      	streq	r1, [r6, #0]
 8005320:	5162      	str	r2, [r4, r5]
 8005322:	604b      	str	r3, [r1, #4]
 8005324:	4638      	mov	r0, r7
 8005326:	f104 060b 	add.w	r6, r4, #11
 800532a:	f000 fd83 	bl	8005e34 <__malloc_unlock>
 800532e:	f026 0607 	bic.w	r6, r6, #7
 8005332:	1d23      	adds	r3, r4, #4
 8005334:	1af2      	subs	r2, r6, r3
 8005336:	d0b6      	beq.n	80052a6 <_malloc_r+0x22>
 8005338:	1b9b      	subs	r3, r3, r6
 800533a:	50a3      	str	r3, [r4, r2]
 800533c:	e7b3      	b.n	80052a6 <_malloc_r+0x22>
 800533e:	6862      	ldr	r2, [r4, #4]
 8005340:	42a3      	cmp	r3, r4
 8005342:	bf0c      	ite	eq
 8005344:	6032      	streq	r2, [r6, #0]
 8005346:	605a      	strne	r2, [r3, #4]
 8005348:	e7ec      	b.n	8005324 <_malloc_r+0xa0>
 800534a:	4623      	mov	r3, r4
 800534c:	6864      	ldr	r4, [r4, #4]
 800534e:	e7b2      	b.n	80052b6 <_malloc_r+0x32>
 8005350:	4634      	mov	r4, r6
 8005352:	6876      	ldr	r6, [r6, #4]
 8005354:	e7b9      	b.n	80052ca <_malloc_r+0x46>
 8005356:	230c      	movs	r3, #12
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	4638      	mov	r0, r7
 800535c:	f000 fd6a 	bl	8005e34 <__malloc_unlock>
 8005360:	e7a1      	b.n	80052a6 <_malloc_r+0x22>
 8005362:	6025      	str	r5, [r4, #0]
 8005364:	e7de      	b.n	8005324 <_malloc_r+0xa0>
 8005366:	bf00      	nop
 8005368:	20000220 	.word	0x20000220

0800536c <__sfputc_r>:
 800536c:	6893      	ldr	r3, [r2, #8]
 800536e:	3b01      	subs	r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	b410      	push	{r4}
 8005374:	6093      	str	r3, [r2, #8]
 8005376:	da08      	bge.n	800538a <__sfputc_r+0x1e>
 8005378:	6994      	ldr	r4, [r2, #24]
 800537a:	42a3      	cmp	r3, r4
 800537c:	db01      	blt.n	8005382 <__sfputc_r+0x16>
 800537e:	290a      	cmp	r1, #10
 8005380:	d103      	bne.n	800538a <__sfputc_r+0x1e>
 8005382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005386:	f000 bb33 	b.w	80059f0 <__swbuf_r>
 800538a:	6813      	ldr	r3, [r2, #0]
 800538c:	1c58      	adds	r0, r3, #1
 800538e:	6010      	str	r0, [r2, #0]
 8005390:	7019      	strb	r1, [r3, #0]
 8005392:	4608      	mov	r0, r1
 8005394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005398:	4770      	bx	lr

0800539a <__sfputs_r>:
 800539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539c:	4606      	mov	r6, r0
 800539e:	460f      	mov	r7, r1
 80053a0:	4614      	mov	r4, r2
 80053a2:	18d5      	adds	r5, r2, r3
 80053a4:	42ac      	cmp	r4, r5
 80053a6:	d101      	bne.n	80053ac <__sfputs_r+0x12>
 80053a8:	2000      	movs	r0, #0
 80053aa:	e007      	b.n	80053bc <__sfputs_r+0x22>
 80053ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b0:	463a      	mov	r2, r7
 80053b2:	4630      	mov	r0, r6
 80053b4:	f7ff ffda 	bl	800536c <__sfputc_r>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d1f3      	bne.n	80053a4 <__sfputs_r+0xa>
 80053bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053c0 <_vfiprintf_r>:
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	460d      	mov	r5, r1
 80053c6:	b09d      	sub	sp, #116	; 0x74
 80053c8:	4614      	mov	r4, r2
 80053ca:	4698      	mov	r8, r3
 80053cc:	4606      	mov	r6, r0
 80053ce:	b118      	cbz	r0, 80053d8 <_vfiprintf_r+0x18>
 80053d0:	6983      	ldr	r3, [r0, #24]
 80053d2:	b90b      	cbnz	r3, 80053d8 <_vfiprintf_r+0x18>
 80053d4:	f7ff fe96 	bl	8005104 <__sinit>
 80053d8:	4b89      	ldr	r3, [pc, #548]	; (8005600 <_vfiprintf_r+0x240>)
 80053da:	429d      	cmp	r5, r3
 80053dc:	d11b      	bne.n	8005416 <_vfiprintf_r+0x56>
 80053de:	6875      	ldr	r5, [r6, #4]
 80053e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053e2:	07d9      	lsls	r1, r3, #31
 80053e4:	d405      	bmi.n	80053f2 <_vfiprintf_r+0x32>
 80053e6:	89ab      	ldrh	r3, [r5, #12]
 80053e8:	059a      	lsls	r2, r3, #22
 80053ea:	d402      	bmi.n	80053f2 <_vfiprintf_r+0x32>
 80053ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ee:	f7ff ff27 	bl	8005240 <__retarget_lock_acquire_recursive>
 80053f2:	89ab      	ldrh	r3, [r5, #12]
 80053f4:	071b      	lsls	r3, r3, #28
 80053f6:	d501      	bpl.n	80053fc <_vfiprintf_r+0x3c>
 80053f8:	692b      	ldr	r3, [r5, #16]
 80053fa:	b9eb      	cbnz	r3, 8005438 <_vfiprintf_r+0x78>
 80053fc:	4629      	mov	r1, r5
 80053fe:	4630      	mov	r0, r6
 8005400:	f000 fb5a 	bl	8005ab8 <__swsetup_r>
 8005404:	b1c0      	cbz	r0, 8005438 <_vfiprintf_r+0x78>
 8005406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005408:	07dc      	lsls	r4, r3, #31
 800540a:	d50e      	bpl.n	800542a <_vfiprintf_r+0x6a>
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	b01d      	add	sp, #116	; 0x74
 8005412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005416:	4b7b      	ldr	r3, [pc, #492]	; (8005604 <_vfiprintf_r+0x244>)
 8005418:	429d      	cmp	r5, r3
 800541a:	d101      	bne.n	8005420 <_vfiprintf_r+0x60>
 800541c:	68b5      	ldr	r5, [r6, #8]
 800541e:	e7df      	b.n	80053e0 <_vfiprintf_r+0x20>
 8005420:	4b79      	ldr	r3, [pc, #484]	; (8005608 <_vfiprintf_r+0x248>)
 8005422:	429d      	cmp	r5, r3
 8005424:	bf08      	it	eq
 8005426:	68f5      	ldreq	r5, [r6, #12]
 8005428:	e7da      	b.n	80053e0 <_vfiprintf_r+0x20>
 800542a:	89ab      	ldrh	r3, [r5, #12]
 800542c:	0598      	lsls	r0, r3, #22
 800542e:	d4ed      	bmi.n	800540c <_vfiprintf_r+0x4c>
 8005430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005432:	f7ff ff06 	bl	8005242 <__retarget_lock_release_recursive>
 8005436:	e7e9      	b.n	800540c <_vfiprintf_r+0x4c>
 8005438:	2300      	movs	r3, #0
 800543a:	9309      	str	r3, [sp, #36]	; 0x24
 800543c:	2320      	movs	r3, #32
 800543e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005442:	f8cd 800c 	str.w	r8, [sp, #12]
 8005446:	2330      	movs	r3, #48	; 0x30
 8005448:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800560c <_vfiprintf_r+0x24c>
 800544c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005450:	f04f 0901 	mov.w	r9, #1
 8005454:	4623      	mov	r3, r4
 8005456:	469a      	mov	sl, r3
 8005458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800545c:	b10a      	cbz	r2, 8005462 <_vfiprintf_r+0xa2>
 800545e:	2a25      	cmp	r2, #37	; 0x25
 8005460:	d1f9      	bne.n	8005456 <_vfiprintf_r+0x96>
 8005462:	ebba 0b04 	subs.w	fp, sl, r4
 8005466:	d00b      	beq.n	8005480 <_vfiprintf_r+0xc0>
 8005468:	465b      	mov	r3, fp
 800546a:	4622      	mov	r2, r4
 800546c:	4629      	mov	r1, r5
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff ff93 	bl	800539a <__sfputs_r>
 8005474:	3001      	adds	r0, #1
 8005476:	f000 80aa 	beq.w	80055ce <_vfiprintf_r+0x20e>
 800547a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800547c:	445a      	add	r2, fp
 800547e:	9209      	str	r2, [sp, #36]	; 0x24
 8005480:	f89a 3000 	ldrb.w	r3, [sl]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80a2 	beq.w	80055ce <_vfiprintf_r+0x20e>
 800548a:	2300      	movs	r3, #0
 800548c:	f04f 32ff 	mov.w	r2, #4294967295
 8005490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005494:	f10a 0a01 	add.w	sl, sl, #1
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	9307      	str	r3, [sp, #28]
 800549c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054a0:	931a      	str	r3, [sp, #104]	; 0x68
 80054a2:	4654      	mov	r4, sl
 80054a4:	2205      	movs	r2, #5
 80054a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054aa:	4858      	ldr	r0, [pc, #352]	; (800560c <_vfiprintf_r+0x24c>)
 80054ac:	f7fa fea0 	bl	80001f0 <memchr>
 80054b0:	9a04      	ldr	r2, [sp, #16]
 80054b2:	b9d8      	cbnz	r0, 80054ec <_vfiprintf_r+0x12c>
 80054b4:	06d1      	lsls	r1, r2, #27
 80054b6:	bf44      	itt	mi
 80054b8:	2320      	movmi	r3, #32
 80054ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054be:	0713      	lsls	r3, r2, #28
 80054c0:	bf44      	itt	mi
 80054c2:	232b      	movmi	r3, #43	; 0x2b
 80054c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054c8:	f89a 3000 	ldrb.w	r3, [sl]
 80054cc:	2b2a      	cmp	r3, #42	; 0x2a
 80054ce:	d015      	beq.n	80054fc <_vfiprintf_r+0x13c>
 80054d0:	9a07      	ldr	r2, [sp, #28]
 80054d2:	4654      	mov	r4, sl
 80054d4:	2000      	movs	r0, #0
 80054d6:	f04f 0c0a 	mov.w	ip, #10
 80054da:	4621      	mov	r1, r4
 80054dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054e0:	3b30      	subs	r3, #48	; 0x30
 80054e2:	2b09      	cmp	r3, #9
 80054e4:	d94e      	bls.n	8005584 <_vfiprintf_r+0x1c4>
 80054e6:	b1b0      	cbz	r0, 8005516 <_vfiprintf_r+0x156>
 80054e8:	9207      	str	r2, [sp, #28]
 80054ea:	e014      	b.n	8005516 <_vfiprintf_r+0x156>
 80054ec:	eba0 0308 	sub.w	r3, r0, r8
 80054f0:	fa09 f303 	lsl.w	r3, r9, r3
 80054f4:	4313      	orrs	r3, r2
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	46a2      	mov	sl, r4
 80054fa:	e7d2      	b.n	80054a2 <_vfiprintf_r+0xe2>
 80054fc:	9b03      	ldr	r3, [sp, #12]
 80054fe:	1d19      	adds	r1, r3, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	9103      	str	r1, [sp, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	bfbb      	ittet	lt
 8005508:	425b      	neglt	r3, r3
 800550a:	f042 0202 	orrlt.w	r2, r2, #2
 800550e:	9307      	strge	r3, [sp, #28]
 8005510:	9307      	strlt	r3, [sp, #28]
 8005512:	bfb8      	it	lt
 8005514:	9204      	strlt	r2, [sp, #16]
 8005516:	7823      	ldrb	r3, [r4, #0]
 8005518:	2b2e      	cmp	r3, #46	; 0x2e
 800551a:	d10c      	bne.n	8005536 <_vfiprintf_r+0x176>
 800551c:	7863      	ldrb	r3, [r4, #1]
 800551e:	2b2a      	cmp	r3, #42	; 0x2a
 8005520:	d135      	bne.n	800558e <_vfiprintf_r+0x1ce>
 8005522:	9b03      	ldr	r3, [sp, #12]
 8005524:	1d1a      	adds	r2, r3, #4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	9203      	str	r2, [sp, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	bfb8      	it	lt
 800552e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005532:	3402      	adds	r4, #2
 8005534:	9305      	str	r3, [sp, #20]
 8005536:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800561c <_vfiprintf_r+0x25c>
 800553a:	7821      	ldrb	r1, [r4, #0]
 800553c:	2203      	movs	r2, #3
 800553e:	4650      	mov	r0, sl
 8005540:	f7fa fe56 	bl	80001f0 <memchr>
 8005544:	b140      	cbz	r0, 8005558 <_vfiprintf_r+0x198>
 8005546:	2340      	movs	r3, #64	; 0x40
 8005548:	eba0 000a 	sub.w	r0, r0, sl
 800554c:	fa03 f000 	lsl.w	r0, r3, r0
 8005550:	9b04      	ldr	r3, [sp, #16]
 8005552:	4303      	orrs	r3, r0
 8005554:	3401      	adds	r4, #1
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800555c:	482c      	ldr	r0, [pc, #176]	; (8005610 <_vfiprintf_r+0x250>)
 800555e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005562:	2206      	movs	r2, #6
 8005564:	f7fa fe44 	bl	80001f0 <memchr>
 8005568:	2800      	cmp	r0, #0
 800556a:	d03f      	beq.n	80055ec <_vfiprintf_r+0x22c>
 800556c:	4b29      	ldr	r3, [pc, #164]	; (8005614 <_vfiprintf_r+0x254>)
 800556e:	bb1b      	cbnz	r3, 80055b8 <_vfiprintf_r+0x1f8>
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	3307      	adds	r3, #7
 8005574:	f023 0307 	bic.w	r3, r3, #7
 8005578:	3308      	adds	r3, #8
 800557a:	9303      	str	r3, [sp, #12]
 800557c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557e:	443b      	add	r3, r7
 8005580:	9309      	str	r3, [sp, #36]	; 0x24
 8005582:	e767      	b.n	8005454 <_vfiprintf_r+0x94>
 8005584:	fb0c 3202 	mla	r2, ip, r2, r3
 8005588:	460c      	mov	r4, r1
 800558a:	2001      	movs	r0, #1
 800558c:	e7a5      	b.n	80054da <_vfiprintf_r+0x11a>
 800558e:	2300      	movs	r3, #0
 8005590:	3401      	adds	r4, #1
 8005592:	9305      	str	r3, [sp, #20]
 8005594:	4619      	mov	r1, r3
 8005596:	f04f 0c0a 	mov.w	ip, #10
 800559a:	4620      	mov	r0, r4
 800559c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055a0:	3a30      	subs	r2, #48	; 0x30
 80055a2:	2a09      	cmp	r2, #9
 80055a4:	d903      	bls.n	80055ae <_vfiprintf_r+0x1ee>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0c5      	beq.n	8005536 <_vfiprintf_r+0x176>
 80055aa:	9105      	str	r1, [sp, #20]
 80055ac:	e7c3      	b.n	8005536 <_vfiprintf_r+0x176>
 80055ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80055b2:	4604      	mov	r4, r0
 80055b4:	2301      	movs	r3, #1
 80055b6:	e7f0      	b.n	800559a <_vfiprintf_r+0x1da>
 80055b8:	ab03      	add	r3, sp, #12
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	462a      	mov	r2, r5
 80055be:	4b16      	ldr	r3, [pc, #88]	; (8005618 <_vfiprintf_r+0x258>)
 80055c0:	a904      	add	r1, sp, #16
 80055c2:	4630      	mov	r0, r6
 80055c4:	f3af 8000 	nop.w
 80055c8:	4607      	mov	r7, r0
 80055ca:	1c78      	adds	r0, r7, #1
 80055cc:	d1d6      	bne.n	800557c <_vfiprintf_r+0x1bc>
 80055ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055d0:	07d9      	lsls	r1, r3, #31
 80055d2:	d405      	bmi.n	80055e0 <_vfiprintf_r+0x220>
 80055d4:	89ab      	ldrh	r3, [r5, #12]
 80055d6:	059a      	lsls	r2, r3, #22
 80055d8:	d402      	bmi.n	80055e0 <_vfiprintf_r+0x220>
 80055da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055dc:	f7ff fe31 	bl	8005242 <__retarget_lock_release_recursive>
 80055e0:	89ab      	ldrh	r3, [r5, #12]
 80055e2:	065b      	lsls	r3, r3, #25
 80055e4:	f53f af12 	bmi.w	800540c <_vfiprintf_r+0x4c>
 80055e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ea:	e711      	b.n	8005410 <_vfiprintf_r+0x50>
 80055ec:	ab03      	add	r3, sp, #12
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	462a      	mov	r2, r5
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <_vfiprintf_r+0x258>)
 80055f4:	a904      	add	r1, sp, #16
 80055f6:	4630      	mov	r0, r6
 80055f8:	f000 f880 	bl	80056fc <_printf_i>
 80055fc:	e7e4      	b.n	80055c8 <_vfiprintf_r+0x208>
 80055fe:	bf00      	nop
 8005600:	08005fe8 	.word	0x08005fe8
 8005604:	08006008 	.word	0x08006008
 8005608:	08005fc8 	.word	0x08005fc8
 800560c:	08006028 	.word	0x08006028
 8005610:	08006032 	.word	0x08006032
 8005614:	00000000 	.word	0x00000000
 8005618:	0800539b 	.word	0x0800539b
 800561c:	0800602e 	.word	0x0800602e

08005620 <_printf_common>:
 8005620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005624:	4616      	mov	r6, r2
 8005626:	4699      	mov	r9, r3
 8005628:	688a      	ldr	r2, [r1, #8]
 800562a:	690b      	ldr	r3, [r1, #16]
 800562c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005630:	4293      	cmp	r3, r2
 8005632:	bfb8      	it	lt
 8005634:	4613      	movlt	r3, r2
 8005636:	6033      	str	r3, [r6, #0]
 8005638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800563c:	4607      	mov	r7, r0
 800563e:	460c      	mov	r4, r1
 8005640:	b10a      	cbz	r2, 8005646 <_printf_common+0x26>
 8005642:	3301      	adds	r3, #1
 8005644:	6033      	str	r3, [r6, #0]
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	0699      	lsls	r1, r3, #26
 800564a:	bf42      	ittt	mi
 800564c:	6833      	ldrmi	r3, [r6, #0]
 800564e:	3302      	addmi	r3, #2
 8005650:	6033      	strmi	r3, [r6, #0]
 8005652:	6825      	ldr	r5, [r4, #0]
 8005654:	f015 0506 	ands.w	r5, r5, #6
 8005658:	d106      	bne.n	8005668 <_printf_common+0x48>
 800565a:	f104 0a19 	add.w	sl, r4, #25
 800565e:	68e3      	ldr	r3, [r4, #12]
 8005660:	6832      	ldr	r2, [r6, #0]
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	42ab      	cmp	r3, r5
 8005666:	dc26      	bgt.n	80056b6 <_printf_common+0x96>
 8005668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800566c:	1e13      	subs	r3, r2, #0
 800566e:	6822      	ldr	r2, [r4, #0]
 8005670:	bf18      	it	ne
 8005672:	2301      	movne	r3, #1
 8005674:	0692      	lsls	r2, r2, #26
 8005676:	d42b      	bmi.n	80056d0 <_printf_common+0xb0>
 8005678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800567c:	4649      	mov	r1, r9
 800567e:	4638      	mov	r0, r7
 8005680:	47c0      	blx	r8
 8005682:	3001      	adds	r0, #1
 8005684:	d01e      	beq.n	80056c4 <_printf_common+0xa4>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	68e5      	ldr	r5, [r4, #12]
 800568a:	6832      	ldr	r2, [r6, #0]
 800568c:	f003 0306 	and.w	r3, r3, #6
 8005690:	2b04      	cmp	r3, #4
 8005692:	bf08      	it	eq
 8005694:	1aad      	subeq	r5, r5, r2
 8005696:	68a3      	ldr	r3, [r4, #8]
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	bf0c      	ite	eq
 800569c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a0:	2500      	movne	r5, #0
 80056a2:	4293      	cmp	r3, r2
 80056a4:	bfc4      	itt	gt
 80056a6:	1a9b      	subgt	r3, r3, r2
 80056a8:	18ed      	addgt	r5, r5, r3
 80056aa:	2600      	movs	r6, #0
 80056ac:	341a      	adds	r4, #26
 80056ae:	42b5      	cmp	r5, r6
 80056b0:	d11a      	bne.n	80056e8 <_printf_common+0xc8>
 80056b2:	2000      	movs	r0, #0
 80056b4:	e008      	b.n	80056c8 <_printf_common+0xa8>
 80056b6:	2301      	movs	r3, #1
 80056b8:	4652      	mov	r2, sl
 80056ba:	4649      	mov	r1, r9
 80056bc:	4638      	mov	r0, r7
 80056be:	47c0      	blx	r8
 80056c0:	3001      	adds	r0, #1
 80056c2:	d103      	bne.n	80056cc <_printf_common+0xac>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056cc:	3501      	adds	r5, #1
 80056ce:	e7c6      	b.n	800565e <_printf_common+0x3e>
 80056d0:	18e1      	adds	r1, r4, r3
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	2030      	movs	r0, #48	; 0x30
 80056d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056da:	4422      	add	r2, r4
 80056dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e4:	3302      	adds	r3, #2
 80056e6:	e7c7      	b.n	8005678 <_printf_common+0x58>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4622      	mov	r2, r4
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	3001      	adds	r0, #1
 80056f4:	d0e6      	beq.n	80056c4 <_printf_common+0xa4>
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7d9      	b.n	80056ae <_printf_common+0x8e>
	...

080056fc <_printf_i>:
 80056fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	7e0f      	ldrb	r7, [r1, #24]
 8005702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005704:	2f78      	cmp	r7, #120	; 0x78
 8005706:	4691      	mov	r9, r2
 8005708:	4680      	mov	r8, r0
 800570a:	460c      	mov	r4, r1
 800570c:	469a      	mov	sl, r3
 800570e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005712:	d807      	bhi.n	8005724 <_printf_i+0x28>
 8005714:	2f62      	cmp	r7, #98	; 0x62
 8005716:	d80a      	bhi.n	800572e <_printf_i+0x32>
 8005718:	2f00      	cmp	r7, #0
 800571a:	f000 80d8 	beq.w	80058ce <_printf_i+0x1d2>
 800571e:	2f58      	cmp	r7, #88	; 0x58
 8005720:	f000 80a3 	beq.w	800586a <_printf_i+0x16e>
 8005724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800572c:	e03a      	b.n	80057a4 <_printf_i+0xa8>
 800572e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005732:	2b15      	cmp	r3, #21
 8005734:	d8f6      	bhi.n	8005724 <_printf_i+0x28>
 8005736:	a101      	add	r1, pc, #4	; (adr r1, 800573c <_printf_i+0x40>)
 8005738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800573c:	08005795 	.word	0x08005795
 8005740:	080057a9 	.word	0x080057a9
 8005744:	08005725 	.word	0x08005725
 8005748:	08005725 	.word	0x08005725
 800574c:	08005725 	.word	0x08005725
 8005750:	08005725 	.word	0x08005725
 8005754:	080057a9 	.word	0x080057a9
 8005758:	08005725 	.word	0x08005725
 800575c:	08005725 	.word	0x08005725
 8005760:	08005725 	.word	0x08005725
 8005764:	08005725 	.word	0x08005725
 8005768:	080058b5 	.word	0x080058b5
 800576c:	080057d9 	.word	0x080057d9
 8005770:	08005897 	.word	0x08005897
 8005774:	08005725 	.word	0x08005725
 8005778:	08005725 	.word	0x08005725
 800577c:	080058d7 	.word	0x080058d7
 8005780:	08005725 	.word	0x08005725
 8005784:	080057d9 	.word	0x080057d9
 8005788:	08005725 	.word	0x08005725
 800578c:	08005725 	.word	0x08005725
 8005790:	0800589f 	.word	0x0800589f
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	602a      	str	r2, [r5, #0]
 800579c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0a3      	b.n	80058f0 <_printf_i+0x1f4>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	6829      	ldr	r1, [r5, #0]
 80057ac:	0606      	lsls	r6, r0, #24
 80057ae:	f101 0304 	add.w	r3, r1, #4
 80057b2:	d50a      	bpl.n	80057ca <_printf_i+0xce>
 80057b4:	680e      	ldr	r6, [r1, #0]
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	2e00      	cmp	r6, #0
 80057ba:	da03      	bge.n	80057c4 <_printf_i+0xc8>
 80057bc:	232d      	movs	r3, #45	; 0x2d
 80057be:	4276      	negs	r6, r6
 80057c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c4:	485e      	ldr	r0, [pc, #376]	; (8005940 <_printf_i+0x244>)
 80057c6:	230a      	movs	r3, #10
 80057c8:	e019      	b.n	80057fe <_printf_i+0x102>
 80057ca:	680e      	ldr	r6, [r1, #0]
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057d2:	bf18      	it	ne
 80057d4:	b236      	sxthne	r6, r6
 80057d6:	e7ef      	b.n	80057b8 <_printf_i+0xbc>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	6820      	ldr	r0, [r4, #0]
 80057dc:	1d19      	adds	r1, r3, #4
 80057de:	6029      	str	r1, [r5, #0]
 80057e0:	0601      	lsls	r1, r0, #24
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0xec>
 80057e4:	681e      	ldr	r6, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0xf2>
 80057e8:	0646      	lsls	r6, r0, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0xe8>
 80057ec:	881e      	ldrh	r6, [r3, #0]
 80057ee:	4854      	ldr	r0, [pc, #336]	; (8005940 <_printf_i+0x244>)
 80057f0:	2f6f      	cmp	r7, #111	; 0x6f
 80057f2:	bf0c      	ite	eq
 80057f4:	2308      	moveq	r3, #8
 80057f6:	230a      	movne	r3, #10
 80057f8:	2100      	movs	r1, #0
 80057fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057fe:	6865      	ldr	r5, [r4, #4]
 8005800:	60a5      	str	r5, [r4, #8]
 8005802:	2d00      	cmp	r5, #0
 8005804:	bfa2      	ittt	ge
 8005806:	6821      	ldrge	r1, [r4, #0]
 8005808:	f021 0104 	bicge.w	r1, r1, #4
 800580c:	6021      	strge	r1, [r4, #0]
 800580e:	b90e      	cbnz	r6, 8005814 <_printf_i+0x118>
 8005810:	2d00      	cmp	r5, #0
 8005812:	d04d      	beq.n	80058b0 <_printf_i+0x1b4>
 8005814:	4615      	mov	r5, r2
 8005816:	fbb6 f1f3 	udiv	r1, r6, r3
 800581a:	fb03 6711 	mls	r7, r3, r1, r6
 800581e:	5dc7      	ldrb	r7, [r0, r7]
 8005820:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005824:	4637      	mov	r7, r6
 8005826:	42bb      	cmp	r3, r7
 8005828:	460e      	mov	r6, r1
 800582a:	d9f4      	bls.n	8005816 <_printf_i+0x11a>
 800582c:	2b08      	cmp	r3, #8
 800582e:	d10b      	bne.n	8005848 <_printf_i+0x14c>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	07de      	lsls	r6, r3, #31
 8005834:	d508      	bpl.n	8005848 <_printf_i+0x14c>
 8005836:	6923      	ldr	r3, [r4, #16]
 8005838:	6861      	ldr	r1, [r4, #4]
 800583a:	4299      	cmp	r1, r3
 800583c:	bfde      	ittt	le
 800583e:	2330      	movle	r3, #48	; 0x30
 8005840:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005844:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005848:	1b52      	subs	r2, r2, r5
 800584a:	6122      	str	r2, [r4, #16]
 800584c:	f8cd a000 	str.w	sl, [sp]
 8005850:	464b      	mov	r3, r9
 8005852:	aa03      	add	r2, sp, #12
 8005854:	4621      	mov	r1, r4
 8005856:	4640      	mov	r0, r8
 8005858:	f7ff fee2 	bl	8005620 <_printf_common>
 800585c:	3001      	adds	r0, #1
 800585e:	d14c      	bne.n	80058fa <_printf_i+0x1fe>
 8005860:	f04f 30ff 	mov.w	r0, #4294967295
 8005864:	b004      	add	sp, #16
 8005866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586a:	4835      	ldr	r0, [pc, #212]	; (8005940 <_printf_i+0x244>)
 800586c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005870:	6829      	ldr	r1, [r5, #0]
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	f851 6b04 	ldr.w	r6, [r1], #4
 8005878:	6029      	str	r1, [r5, #0]
 800587a:	061d      	lsls	r5, r3, #24
 800587c:	d514      	bpl.n	80058a8 <_printf_i+0x1ac>
 800587e:	07df      	lsls	r7, r3, #31
 8005880:	bf44      	itt	mi
 8005882:	f043 0320 	orrmi.w	r3, r3, #32
 8005886:	6023      	strmi	r3, [r4, #0]
 8005888:	b91e      	cbnz	r6, 8005892 <_printf_i+0x196>
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	f023 0320 	bic.w	r3, r3, #32
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	2310      	movs	r3, #16
 8005894:	e7b0      	b.n	80057f8 <_printf_i+0xfc>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	f043 0320 	orr.w	r3, r3, #32
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	2378      	movs	r3, #120	; 0x78
 80058a0:	4828      	ldr	r0, [pc, #160]	; (8005944 <_printf_i+0x248>)
 80058a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058a6:	e7e3      	b.n	8005870 <_printf_i+0x174>
 80058a8:	0659      	lsls	r1, r3, #25
 80058aa:	bf48      	it	mi
 80058ac:	b2b6      	uxthmi	r6, r6
 80058ae:	e7e6      	b.n	800587e <_printf_i+0x182>
 80058b0:	4615      	mov	r5, r2
 80058b2:	e7bb      	b.n	800582c <_printf_i+0x130>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	6826      	ldr	r6, [r4, #0]
 80058b8:	6961      	ldr	r1, [r4, #20]
 80058ba:	1d18      	adds	r0, r3, #4
 80058bc:	6028      	str	r0, [r5, #0]
 80058be:	0635      	lsls	r5, r6, #24
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	d501      	bpl.n	80058c8 <_printf_i+0x1cc>
 80058c4:	6019      	str	r1, [r3, #0]
 80058c6:	e002      	b.n	80058ce <_printf_i+0x1d2>
 80058c8:	0670      	lsls	r0, r6, #25
 80058ca:	d5fb      	bpl.n	80058c4 <_printf_i+0x1c8>
 80058cc:	8019      	strh	r1, [r3, #0]
 80058ce:	2300      	movs	r3, #0
 80058d0:	6123      	str	r3, [r4, #16]
 80058d2:	4615      	mov	r5, r2
 80058d4:	e7ba      	b.n	800584c <_printf_i+0x150>
 80058d6:	682b      	ldr	r3, [r5, #0]
 80058d8:	1d1a      	adds	r2, r3, #4
 80058da:	602a      	str	r2, [r5, #0]
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	6862      	ldr	r2, [r4, #4]
 80058e0:	2100      	movs	r1, #0
 80058e2:	4628      	mov	r0, r5
 80058e4:	f7fa fc84 	bl	80001f0 <memchr>
 80058e8:	b108      	cbz	r0, 80058ee <_printf_i+0x1f2>
 80058ea:	1b40      	subs	r0, r0, r5
 80058ec:	6060      	str	r0, [r4, #4]
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	6123      	str	r3, [r4, #16]
 80058f2:	2300      	movs	r3, #0
 80058f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f8:	e7a8      	b.n	800584c <_printf_i+0x150>
 80058fa:	6923      	ldr	r3, [r4, #16]
 80058fc:	462a      	mov	r2, r5
 80058fe:	4649      	mov	r1, r9
 8005900:	4640      	mov	r0, r8
 8005902:	47d0      	blx	sl
 8005904:	3001      	adds	r0, #1
 8005906:	d0ab      	beq.n	8005860 <_printf_i+0x164>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	079b      	lsls	r3, r3, #30
 800590c:	d413      	bmi.n	8005936 <_printf_i+0x23a>
 800590e:	68e0      	ldr	r0, [r4, #12]
 8005910:	9b03      	ldr	r3, [sp, #12]
 8005912:	4298      	cmp	r0, r3
 8005914:	bfb8      	it	lt
 8005916:	4618      	movlt	r0, r3
 8005918:	e7a4      	b.n	8005864 <_printf_i+0x168>
 800591a:	2301      	movs	r3, #1
 800591c:	4632      	mov	r2, r6
 800591e:	4649      	mov	r1, r9
 8005920:	4640      	mov	r0, r8
 8005922:	47d0      	blx	sl
 8005924:	3001      	adds	r0, #1
 8005926:	d09b      	beq.n	8005860 <_printf_i+0x164>
 8005928:	3501      	adds	r5, #1
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	9903      	ldr	r1, [sp, #12]
 800592e:	1a5b      	subs	r3, r3, r1
 8005930:	42ab      	cmp	r3, r5
 8005932:	dcf2      	bgt.n	800591a <_printf_i+0x21e>
 8005934:	e7eb      	b.n	800590e <_printf_i+0x212>
 8005936:	2500      	movs	r5, #0
 8005938:	f104 0619 	add.w	r6, r4, #25
 800593c:	e7f5      	b.n	800592a <_printf_i+0x22e>
 800593e:	bf00      	nop
 8005940:	08006039 	.word	0x08006039
 8005944:	0800604a 	.word	0x0800604a

08005948 <_sbrk_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	4d06      	ldr	r5, [pc, #24]	; (8005964 <_sbrk_r+0x1c>)
 800594c:	2300      	movs	r3, #0
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	602b      	str	r3, [r5, #0]
 8005954:	f7fb fccc 	bl	80012f0 <_sbrk>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_sbrk_r+0x1a>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_sbrk_r+0x1a>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	20000228 	.word	0x20000228

08005968 <__sread>:
 8005968:	b510      	push	{r4, lr}
 800596a:	460c      	mov	r4, r1
 800596c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005970:	f000 fab2 	bl	8005ed8 <_read_r>
 8005974:	2800      	cmp	r0, #0
 8005976:	bfab      	itete	ge
 8005978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800597a:	89a3      	ldrhlt	r3, [r4, #12]
 800597c:	181b      	addge	r3, r3, r0
 800597e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005982:	bfac      	ite	ge
 8005984:	6563      	strge	r3, [r4, #84]	; 0x54
 8005986:	81a3      	strhlt	r3, [r4, #12]
 8005988:	bd10      	pop	{r4, pc}

0800598a <__swrite>:
 800598a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598e:	461f      	mov	r7, r3
 8005990:	898b      	ldrh	r3, [r1, #12]
 8005992:	05db      	lsls	r3, r3, #23
 8005994:	4605      	mov	r5, r0
 8005996:	460c      	mov	r4, r1
 8005998:	4616      	mov	r6, r2
 800599a:	d505      	bpl.n	80059a8 <__swrite+0x1e>
 800599c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a0:	2302      	movs	r3, #2
 80059a2:	2200      	movs	r2, #0
 80059a4:	f000 f9c8 	bl	8005d38 <_lseek_r>
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059b2:	81a3      	strh	r3, [r4, #12]
 80059b4:	4632      	mov	r2, r6
 80059b6:	463b      	mov	r3, r7
 80059b8:	4628      	mov	r0, r5
 80059ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059be:	f000 b869 	b.w	8005a94 <_write_r>

080059c2 <__sseek>:
 80059c2:	b510      	push	{r4, lr}
 80059c4:	460c      	mov	r4, r1
 80059c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ca:	f000 f9b5 	bl	8005d38 <_lseek_r>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	bf15      	itete	ne
 80059d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80059d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059de:	81a3      	strheq	r3, [r4, #12]
 80059e0:	bf18      	it	ne
 80059e2:	81a3      	strhne	r3, [r4, #12]
 80059e4:	bd10      	pop	{r4, pc}

080059e6 <__sclose>:
 80059e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ea:	f000 b8d3 	b.w	8005b94 <_close_r>
	...

080059f0 <__swbuf_r>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	460e      	mov	r6, r1
 80059f4:	4614      	mov	r4, r2
 80059f6:	4605      	mov	r5, r0
 80059f8:	b118      	cbz	r0, 8005a02 <__swbuf_r+0x12>
 80059fa:	6983      	ldr	r3, [r0, #24]
 80059fc:	b90b      	cbnz	r3, 8005a02 <__swbuf_r+0x12>
 80059fe:	f7ff fb81 	bl	8005104 <__sinit>
 8005a02:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <__swbuf_r+0x98>)
 8005a04:	429c      	cmp	r4, r3
 8005a06:	d12b      	bne.n	8005a60 <__swbuf_r+0x70>
 8005a08:	686c      	ldr	r4, [r5, #4]
 8005a0a:	69a3      	ldr	r3, [r4, #24]
 8005a0c:	60a3      	str	r3, [r4, #8]
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	071a      	lsls	r2, r3, #28
 8005a12:	d52f      	bpl.n	8005a74 <__swbuf_r+0x84>
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	b36b      	cbz	r3, 8005a74 <__swbuf_r+0x84>
 8005a18:	6923      	ldr	r3, [r4, #16]
 8005a1a:	6820      	ldr	r0, [r4, #0]
 8005a1c:	1ac0      	subs	r0, r0, r3
 8005a1e:	6963      	ldr	r3, [r4, #20]
 8005a20:	b2f6      	uxtb	r6, r6
 8005a22:	4283      	cmp	r3, r0
 8005a24:	4637      	mov	r7, r6
 8005a26:	dc04      	bgt.n	8005a32 <__swbuf_r+0x42>
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f948 	bl	8005cc0 <_fflush_r>
 8005a30:	bb30      	cbnz	r0, 8005a80 <__swbuf_r+0x90>
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	60a3      	str	r3, [r4, #8]
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	6022      	str	r2, [r4, #0]
 8005a3e:	701e      	strb	r6, [r3, #0]
 8005a40:	6963      	ldr	r3, [r4, #20]
 8005a42:	3001      	adds	r0, #1
 8005a44:	4283      	cmp	r3, r0
 8005a46:	d004      	beq.n	8005a52 <__swbuf_r+0x62>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	07db      	lsls	r3, r3, #31
 8005a4c:	d506      	bpl.n	8005a5c <__swbuf_r+0x6c>
 8005a4e:	2e0a      	cmp	r6, #10
 8005a50:	d104      	bne.n	8005a5c <__swbuf_r+0x6c>
 8005a52:	4621      	mov	r1, r4
 8005a54:	4628      	mov	r0, r5
 8005a56:	f000 f933 	bl	8005cc0 <_fflush_r>
 8005a5a:	b988      	cbnz	r0, 8005a80 <__swbuf_r+0x90>
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <__swbuf_r+0x9c>)
 8005a62:	429c      	cmp	r4, r3
 8005a64:	d101      	bne.n	8005a6a <__swbuf_r+0x7a>
 8005a66:	68ac      	ldr	r4, [r5, #8]
 8005a68:	e7cf      	b.n	8005a0a <__swbuf_r+0x1a>
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <__swbuf_r+0xa0>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	bf08      	it	eq
 8005a70:	68ec      	ldreq	r4, [r5, #12]
 8005a72:	e7ca      	b.n	8005a0a <__swbuf_r+0x1a>
 8005a74:	4621      	mov	r1, r4
 8005a76:	4628      	mov	r0, r5
 8005a78:	f000 f81e 	bl	8005ab8 <__swsetup_r>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d0cb      	beq.n	8005a18 <__swbuf_r+0x28>
 8005a80:	f04f 37ff 	mov.w	r7, #4294967295
 8005a84:	e7ea      	b.n	8005a5c <__swbuf_r+0x6c>
 8005a86:	bf00      	nop
 8005a88:	08005fe8 	.word	0x08005fe8
 8005a8c:	08006008 	.word	0x08006008
 8005a90:	08005fc8 	.word	0x08005fc8

08005a94 <_write_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d07      	ldr	r5, [pc, #28]	; (8005ab4 <_write_r+0x20>)
 8005a98:	4604      	mov	r4, r0
 8005a9a:	4608      	mov	r0, r1
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	602a      	str	r2, [r5, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f7fb fbd3 	bl	800124e <_write>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_write_r+0x1e>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_write_r+0x1e>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20000228 	.word	0x20000228

08005ab8 <__swsetup_r>:
 8005ab8:	4b32      	ldr	r3, [pc, #200]	; (8005b84 <__swsetup_r+0xcc>)
 8005aba:	b570      	push	{r4, r5, r6, lr}
 8005abc:	681d      	ldr	r5, [r3, #0]
 8005abe:	4606      	mov	r6, r0
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	b125      	cbz	r5, 8005ace <__swsetup_r+0x16>
 8005ac4:	69ab      	ldr	r3, [r5, #24]
 8005ac6:	b913      	cbnz	r3, 8005ace <__swsetup_r+0x16>
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f7ff fb1b 	bl	8005104 <__sinit>
 8005ace:	4b2e      	ldr	r3, [pc, #184]	; (8005b88 <__swsetup_r+0xd0>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	d10f      	bne.n	8005af4 <__swsetup_r+0x3c>
 8005ad4:	686c      	ldr	r4, [r5, #4]
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005adc:	0719      	lsls	r1, r3, #28
 8005ade:	d42c      	bmi.n	8005b3a <__swsetup_r+0x82>
 8005ae0:	06dd      	lsls	r5, r3, #27
 8005ae2:	d411      	bmi.n	8005b08 <__swsetup_r+0x50>
 8005ae4:	2309      	movs	r3, #9
 8005ae6:	6033      	str	r3, [r6, #0]
 8005ae8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295
 8005af2:	e03e      	b.n	8005b72 <__swsetup_r+0xba>
 8005af4:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <__swsetup_r+0xd4>)
 8005af6:	429c      	cmp	r4, r3
 8005af8:	d101      	bne.n	8005afe <__swsetup_r+0x46>
 8005afa:	68ac      	ldr	r4, [r5, #8]
 8005afc:	e7eb      	b.n	8005ad6 <__swsetup_r+0x1e>
 8005afe:	4b24      	ldr	r3, [pc, #144]	; (8005b90 <__swsetup_r+0xd8>)
 8005b00:	429c      	cmp	r4, r3
 8005b02:	bf08      	it	eq
 8005b04:	68ec      	ldreq	r4, [r5, #12]
 8005b06:	e7e6      	b.n	8005ad6 <__swsetup_r+0x1e>
 8005b08:	0758      	lsls	r0, r3, #29
 8005b0a:	d512      	bpl.n	8005b32 <__swsetup_r+0x7a>
 8005b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b0e:	b141      	cbz	r1, 8005b22 <__swsetup_r+0x6a>
 8005b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b14:	4299      	cmp	r1, r3
 8005b16:	d002      	beq.n	8005b1e <__swsetup_r+0x66>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f000 f991 	bl	8005e40 <_free_r>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	6363      	str	r3, [r4, #52]	; 0x34
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6063      	str	r3, [r4, #4]
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	f043 0308 	orr.w	r3, r3, #8
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	b94b      	cbnz	r3, 8005b52 <__swsetup_r+0x9a>
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b48:	d003      	beq.n	8005b52 <__swsetup_r+0x9a>
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 f92b 	bl	8005da8 <__smakebuf_r>
 8005b52:	89a0      	ldrh	r0, [r4, #12]
 8005b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b58:	f010 0301 	ands.w	r3, r0, #1
 8005b5c:	d00a      	beq.n	8005b74 <__swsetup_r+0xbc>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60a3      	str	r3, [r4, #8]
 8005b62:	6963      	ldr	r3, [r4, #20]
 8005b64:	425b      	negs	r3, r3
 8005b66:	61a3      	str	r3, [r4, #24]
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	b943      	cbnz	r3, 8005b7e <__swsetup_r+0xc6>
 8005b6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b70:	d1ba      	bne.n	8005ae8 <__swsetup_r+0x30>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	0781      	lsls	r1, r0, #30
 8005b76:	bf58      	it	pl
 8005b78:	6963      	ldrpl	r3, [r4, #20]
 8005b7a:	60a3      	str	r3, [r4, #8]
 8005b7c:	e7f4      	b.n	8005b68 <__swsetup_r+0xb0>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e7f7      	b.n	8005b72 <__swsetup_r+0xba>
 8005b82:	bf00      	nop
 8005b84:	2000000c 	.word	0x2000000c
 8005b88:	08005fe8 	.word	0x08005fe8
 8005b8c:	08006008 	.word	0x08006008
 8005b90:	08005fc8 	.word	0x08005fc8

08005b94 <_close_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d06      	ldr	r5, [pc, #24]	; (8005bb0 <_close_r+0x1c>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	f7fb fb71 	bl	8001286 <_close>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_close_r+0x1a>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_close_r+0x1a>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	20000228 	.word	0x20000228

08005bb4 <__sflush_r>:
 8005bb4:	898a      	ldrh	r2, [r1, #12]
 8005bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bba:	4605      	mov	r5, r0
 8005bbc:	0710      	lsls	r0, r2, #28
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	d458      	bmi.n	8005c74 <__sflush_r+0xc0>
 8005bc2:	684b      	ldr	r3, [r1, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dc05      	bgt.n	8005bd4 <__sflush_r+0x20>
 8005bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dc02      	bgt.n	8005bd4 <__sflush_r+0x20>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	d0f9      	beq.n	8005bce <__sflush_r+0x1a>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005be0:	682f      	ldr	r7, [r5, #0]
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	d032      	beq.n	8005c4c <__sflush_r+0x98>
 8005be6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	075a      	lsls	r2, r3, #29
 8005bec:	d505      	bpl.n	8005bfa <__sflush_r+0x46>
 8005bee:	6863      	ldr	r3, [r4, #4]
 8005bf0:	1ac0      	subs	r0, r0, r3
 8005bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bf4:	b10b      	cbz	r3, 8005bfa <__sflush_r+0x46>
 8005bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bf8:	1ac0      	subs	r0, r0, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c00:	6a21      	ldr	r1, [r4, #32]
 8005c02:	4628      	mov	r0, r5
 8005c04:	47b0      	blx	r6
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	d106      	bne.n	8005c1a <__sflush_r+0x66>
 8005c0c:	6829      	ldr	r1, [r5, #0]
 8005c0e:	291d      	cmp	r1, #29
 8005c10:	d82c      	bhi.n	8005c6c <__sflush_r+0xb8>
 8005c12:	4a2a      	ldr	r2, [pc, #168]	; (8005cbc <__sflush_r+0x108>)
 8005c14:	40ca      	lsrs	r2, r1
 8005c16:	07d6      	lsls	r6, r2, #31
 8005c18:	d528      	bpl.n	8005c6c <__sflush_r+0xb8>
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	6062      	str	r2, [r4, #4]
 8005c1e:	04d9      	lsls	r1, r3, #19
 8005c20:	6922      	ldr	r2, [r4, #16]
 8005c22:	6022      	str	r2, [r4, #0]
 8005c24:	d504      	bpl.n	8005c30 <__sflush_r+0x7c>
 8005c26:	1c42      	adds	r2, r0, #1
 8005c28:	d101      	bne.n	8005c2e <__sflush_r+0x7a>
 8005c2a:	682b      	ldr	r3, [r5, #0]
 8005c2c:	b903      	cbnz	r3, 8005c30 <__sflush_r+0x7c>
 8005c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8005c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c32:	602f      	str	r7, [r5, #0]
 8005c34:	2900      	cmp	r1, #0
 8005c36:	d0ca      	beq.n	8005bce <__sflush_r+0x1a>
 8005c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	d002      	beq.n	8005c46 <__sflush_r+0x92>
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 f8fd 	bl	8005e40 <_free_r>
 8005c46:	2000      	movs	r0, #0
 8005c48:	6360      	str	r0, [r4, #52]	; 0x34
 8005c4a:	e7c1      	b.n	8005bd0 <__sflush_r+0x1c>
 8005c4c:	6a21      	ldr	r1, [r4, #32]
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b0      	blx	r6
 8005c54:	1c41      	adds	r1, r0, #1
 8005c56:	d1c7      	bne.n	8005be8 <__sflush_r+0x34>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0c4      	beq.n	8005be8 <__sflush_r+0x34>
 8005c5e:	2b1d      	cmp	r3, #29
 8005c60:	d001      	beq.n	8005c66 <__sflush_r+0xb2>
 8005c62:	2b16      	cmp	r3, #22
 8005c64:	d101      	bne.n	8005c6a <__sflush_r+0xb6>
 8005c66:	602f      	str	r7, [r5, #0]
 8005c68:	e7b1      	b.n	8005bce <__sflush_r+0x1a>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	e7ad      	b.n	8005bd0 <__sflush_r+0x1c>
 8005c74:	690f      	ldr	r7, [r1, #16]
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	d0a9      	beq.n	8005bce <__sflush_r+0x1a>
 8005c7a:	0793      	lsls	r3, r2, #30
 8005c7c:	680e      	ldr	r6, [r1, #0]
 8005c7e:	bf08      	it	eq
 8005c80:	694b      	ldreq	r3, [r1, #20]
 8005c82:	600f      	str	r7, [r1, #0]
 8005c84:	bf18      	it	ne
 8005c86:	2300      	movne	r3, #0
 8005c88:	eba6 0807 	sub.w	r8, r6, r7
 8005c8c:	608b      	str	r3, [r1, #8]
 8005c8e:	f1b8 0f00 	cmp.w	r8, #0
 8005c92:	dd9c      	ble.n	8005bce <__sflush_r+0x1a>
 8005c94:	6a21      	ldr	r1, [r4, #32]
 8005c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c98:	4643      	mov	r3, r8
 8005c9a:	463a      	mov	r2, r7
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b0      	blx	r6
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	dc06      	bgt.n	8005cb2 <__sflush_r+0xfe>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	e78e      	b.n	8005bd0 <__sflush_r+0x1c>
 8005cb2:	4407      	add	r7, r0
 8005cb4:	eba8 0800 	sub.w	r8, r8, r0
 8005cb8:	e7e9      	b.n	8005c8e <__sflush_r+0xda>
 8005cba:	bf00      	nop
 8005cbc:	20400001 	.word	0x20400001

08005cc0 <_fflush_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	690b      	ldr	r3, [r1, #16]
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	b913      	cbnz	r3, 8005cd0 <_fflush_r+0x10>
 8005cca:	2500      	movs	r5, #0
 8005ccc:	4628      	mov	r0, r5
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	b118      	cbz	r0, 8005cda <_fflush_r+0x1a>
 8005cd2:	6983      	ldr	r3, [r0, #24]
 8005cd4:	b90b      	cbnz	r3, 8005cda <_fflush_r+0x1a>
 8005cd6:	f7ff fa15 	bl	8005104 <__sinit>
 8005cda:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <_fflush_r+0x6c>)
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	d11b      	bne.n	8005d18 <_fflush_r+0x58>
 8005ce0:	686c      	ldr	r4, [r5, #4]
 8005ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0ef      	beq.n	8005cca <_fflush_r+0xa>
 8005cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cec:	07d0      	lsls	r0, r2, #31
 8005cee:	d404      	bmi.n	8005cfa <_fflush_r+0x3a>
 8005cf0:	0599      	lsls	r1, r3, #22
 8005cf2:	d402      	bmi.n	8005cfa <_fflush_r+0x3a>
 8005cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cf6:	f7ff faa3 	bl	8005240 <__retarget_lock_acquire_recursive>
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	f7ff ff59 	bl	8005bb4 <__sflush_r>
 8005d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d04:	07da      	lsls	r2, r3, #31
 8005d06:	4605      	mov	r5, r0
 8005d08:	d4e0      	bmi.n	8005ccc <_fflush_r+0xc>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	059b      	lsls	r3, r3, #22
 8005d0e:	d4dd      	bmi.n	8005ccc <_fflush_r+0xc>
 8005d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d12:	f7ff fa96 	bl	8005242 <__retarget_lock_release_recursive>
 8005d16:	e7d9      	b.n	8005ccc <_fflush_r+0xc>
 8005d18:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <_fflush_r+0x70>)
 8005d1a:	429c      	cmp	r4, r3
 8005d1c:	d101      	bne.n	8005d22 <_fflush_r+0x62>
 8005d1e:	68ac      	ldr	r4, [r5, #8]
 8005d20:	e7df      	b.n	8005ce2 <_fflush_r+0x22>
 8005d22:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <_fflush_r+0x74>)
 8005d24:	429c      	cmp	r4, r3
 8005d26:	bf08      	it	eq
 8005d28:	68ec      	ldreq	r4, [r5, #12]
 8005d2a:	e7da      	b.n	8005ce2 <_fflush_r+0x22>
 8005d2c:	08005fe8 	.word	0x08005fe8
 8005d30:	08006008 	.word	0x08006008
 8005d34:	08005fc8 	.word	0x08005fc8

08005d38 <_lseek_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4d07      	ldr	r5, [pc, #28]	; (8005d58 <_lseek_r+0x20>)
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	4608      	mov	r0, r1
 8005d40:	4611      	mov	r1, r2
 8005d42:	2200      	movs	r2, #0
 8005d44:	602a      	str	r2, [r5, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f7fb fac4 	bl	80012d4 <_lseek>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d102      	bne.n	8005d56 <_lseek_r+0x1e>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	b103      	cbz	r3, 8005d56 <_lseek_r+0x1e>
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	bd38      	pop	{r3, r4, r5, pc}
 8005d58:	20000228 	.word	0x20000228

08005d5c <__swhatbuf_r>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	460e      	mov	r6, r1
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	2900      	cmp	r1, #0
 8005d66:	b096      	sub	sp, #88	; 0x58
 8005d68:	4614      	mov	r4, r2
 8005d6a:	461d      	mov	r5, r3
 8005d6c:	da08      	bge.n	8005d80 <__swhatbuf_r+0x24>
 8005d6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	602a      	str	r2, [r5, #0]
 8005d76:	061a      	lsls	r2, r3, #24
 8005d78:	d410      	bmi.n	8005d9c <__swhatbuf_r+0x40>
 8005d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d7e:	e00e      	b.n	8005d9e <__swhatbuf_r+0x42>
 8005d80:	466a      	mov	r2, sp
 8005d82:	f000 f8bb 	bl	8005efc <_fstat_r>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	dbf1      	blt.n	8005d6e <__swhatbuf_r+0x12>
 8005d8a:	9a01      	ldr	r2, [sp, #4]
 8005d8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d94:	425a      	negs	r2, r3
 8005d96:	415a      	adcs	r2, r3
 8005d98:	602a      	str	r2, [r5, #0]
 8005d9a:	e7ee      	b.n	8005d7a <__swhatbuf_r+0x1e>
 8005d9c:	2340      	movs	r3, #64	; 0x40
 8005d9e:	2000      	movs	r0, #0
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	b016      	add	sp, #88	; 0x58
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005da8 <__smakebuf_r>:
 8005da8:	898b      	ldrh	r3, [r1, #12]
 8005daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dac:	079d      	lsls	r5, r3, #30
 8005dae:	4606      	mov	r6, r0
 8005db0:	460c      	mov	r4, r1
 8005db2:	d507      	bpl.n	8005dc4 <__smakebuf_r+0x1c>
 8005db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	6123      	str	r3, [r4, #16]
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	6163      	str	r3, [r4, #20]
 8005dc0:	b002      	add	sp, #8
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	ab01      	add	r3, sp, #4
 8005dc6:	466a      	mov	r2, sp
 8005dc8:	f7ff ffc8 	bl	8005d5c <__swhatbuf_r>
 8005dcc:	9900      	ldr	r1, [sp, #0]
 8005dce:	4605      	mov	r5, r0
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f7ff fa57 	bl	8005284 <_malloc_r>
 8005dd6:	b948      	cbnz	r0, 8005dec <__smakebuf_r+0x44>
 8005dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ddc:	059a      	lsls	r2, r3, #22
 8005dde:	d4ef      	bmi.n	8005dc0 <__smakebuf_r+0x18>
 8005de0:	f023 0303 	bic.w	r3, r3, #3
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	e7e3      	b.n	8005db4 <__smakebuf_r+0xc>
 8005dec:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <__smakebuf_r+0x7c>)
 8005dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	6020      	str	r0, [r4, #0]
 8005df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df8:	81a3      	strh	r3, [r4, #12]
 8005dfa:	9b00      	ldr	r3, [sp, #0]
 8005dfc:	6163      	str	r3, [r4, #20]
 8005dfe:	9b01      	ldr	r3, [sp, #4]
 8005e00:	6120      	str	r0, [r4, #16]
 8005e02:	b15b      	cbz	r3, 8005e1c <__smakebuf_r+0x74>
 8005e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f000 f889 	bl	8005f20 <_isatty_r>
 8005e0e:	b128      	cbz	r0, 8005e1c <__smakebuf_r+0x74>
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	89a0      	ldrh	r0, [r4, #12]
 8005e1e:	4305      	orrs	r5, r0
 8005e20:	81a5      	strh	r5, [r4, #12]
 8005e22:	e7cd      	b.n	8005dc0 <__smakebuf_r+0x18>
 8005e24:	0800509d 	.word	0x0800509d

08005e28 <__malloc_lock>:
 8005e28:	4801      	ldr	r0, [pc, #4]	; (8005e30 <__malloc_lock+0x8>)
 8005e2a:	f7ff ba09 	b.w	8005240 <__retarget_lock_acquire_recursive>
 8005e2e:	bf00      	nop
 8005e30:	2000021c 	.word	0x2000021c

08005e34 <__malloc_unlock>:
 8005e34:	4801      	ldr	r0, [pc, #4]	; (8005e3c <__malloc_unlock+0x8>)
 8005e36:	f7ff ba04 	b.w	8005242 <__retarget_lock_release_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	2000021c 	.word	0x2000021c

08005e40 <_free_r>:
 8005e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e42:	2900      	cmp	r1, #0
 8005e44:	d044      	beq.n	8005ed0 <_free_r+0x90>
 8005e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4a:	9001      	str	r0, [sp, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e52:	bfb8      	it	lt
 8005e54:	18e4      	addlt	r4, r4, r3
 8005e56:	f7ff ffe7 	bl	8005e28 <__malloc_lock>
 8005e5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ed4 <_free_r+0x94>)
 8005e5c:	9801      	ldr	r0, [sp, #4]
 8005e5e:	6813      	ldr	r3, [r2, #0]
 8005e60:	b933      	cbnz	r3, 8005e70 <_free_r+0x30>
 8005e62:	6063      	str	r3, [r4, #4]
 8005e64:	6014      	str	r4, [r2, #0]
 8005e66:	b003      	add	sp, #12
 8005e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e6c:	f7ff bfe2 	b.w	8005e34 <__malloc_unlock>
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d908      	bls.n	8005e86 <_free_r+0x46>
 8005e74:	6825      	ldr	r5, [r4, #0]
 8005e76:	1961      	adds	r1, r4, r5
 8005e78:	428b      	cmp	r3, r1
 8005e7a:	bf01      	itttt	eq
 8005e7c:	6819      	ldreq	r1, [r3, #0]
 8005e7e:	685b      	ldreq	r3, [r3, #4]
 8005e80:	1949      	addeq	r1, r1, r5
 8005e82:	6021      	streq	r1, [r4, #0]
 8005e84:	e7ed      	b.n	8005e62 <_free_r+0x22>
 8005e86:	461a      	mov	r2, r3
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	b10b      	cbz	r3, 8005e90 <_free_r+0x50>
 8005e8c:	42a3      	cmp	r3, r4
 8005e8e:	d9fa      	bls.n	8005e86 <_free_r+0x46>
 8005e90:	6811      	ldr	r1, [r2, #0]
 8005e92:	1855      	adds	r5, r2, r1
 8005e94:	42a5      	cmp	r5, r4
 8005e96:	d10b      	bne.n	8005eb0 <_free_r+0x70>
 8005e98:	6824      	ldr	r4, [r4, #0]
 8005e9a:	4421      	add	r1, r4
 8005e9c:	1854      	adds	r4, r2, r1
 8005e9e:	42a3      	cmp	r3, r4
 8005ea0:	6011      	str	r1, [r2, #0]
 8005ea2:	d1e0      	bne.n	8005e66 <_free_r+0x26>
 8005ea4:	681c      	ldr	r4, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	6053      	str	r3, [r2, #4]
 8005eaa:	4421      	add	r1, r4
 8005eac:	6011      	str	r1, [r2, #0]
 8005eae:	e7da      	b.n	8005e66 <_free_r+0x26>
 8005eb0:	d902      	bls.n	8005eb8 <_free_r+0x78>
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	6003      	str	r3, [r0, #0]
 8005eb6:	e7d6      	b.n	8005e66 <_free_r+0x26>
 8005eb8:	6825      	ldr	r5, [r4, #0]
 8005eba:	1961      	adds	r1, r4, r5
 8005ebc:	428b      	cmp	r3, r1
 8005ebe:	bf04      	itt	eq
 8005ec0:	6819      	ldreq	r1, [r3, #0]
 8005ec2:	685b      	ldreq	r3, [r3, #4]
 8005ec4:	6063      	str	r3, [r4, #4]
 8005ec6:	bf04      	itt	eq
 8005ec8:	1949      	addeq	r1, r1, r5
 8005eca:	6021      	streq	r1, [r4, #0]
 8005ecc:	6054      	str	r4, [r2, #4]
 8005ece:	e7ca      	b.n	8005e66 <_free_r+0x26>
 8005ed0:	b003      	add	sp, #12
 8005ed2:	bd30      	pop	{r4, r5, pc}
 8005ed4:	20000220 	.word	0x20000220

08005ed8 <_read_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4d07      	ldr	r5, [pc, #28]	; (8005ef8 <_read_r+0x20>)
 8005edc:	4604      	mov	r4, r0
 8005ede:	4608      	mov	r0, r1
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	602a      	str	r2, [r5, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f7fb f994 	bl	8001214 <_read>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_read_r+0x1e>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_read_r+0x1e>
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	20000228 	.word	0x20000228

08005efc <_fstat_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4d07      	ldr	r5, [pc, #28]	; (8005f1c <_fstat_r+0x20>)
 8005f00:	2300      	movs	r3, #0
 8005f02:	4604      	mov	r4, r0
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	f7fb f9c8 	bl	800129e <_fstat>
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	d102      	bne.n	8005f18 <_fstat_r+0x1c>
 8005f12:	682b      	ldr	r3, [r5, #0]
 8005f14:	b103      	cbz	r3, 8005f18 <_fstat_r+0x1c>
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	bd38      	pop	{r3, r4, r5, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000228 	.word	0x20000228

08005f20 <_isatty_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4d06      	ldr	r5, [pc, #24]	; (8005f3c <_isatty_r+0x1c>)
 8005f24:	2300      	movs	r3, #0
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	f7fb f9c7 	bl	80012be <_isatty>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_isatty_r+0x1a>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_isatty_r+0x1a>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	20000228 	.word	0x20000228

08005f40 <_init>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	bf00      	nop
 8005f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f46:	bc08      	pop	{r3}
 8005f48:	469e      	mov	lr, r3
 8005f4a:	4770      	bx	lr

08005f4c <_fini>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr
