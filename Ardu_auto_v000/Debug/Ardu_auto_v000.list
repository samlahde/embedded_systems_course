
Ardu_auto_v000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006084  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006300  08006300  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006308  08006308  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006308  08006308  00016308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800630c  0800630c  0001630c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001bc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d084  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020cd  00000000  00000000  0002d124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0002f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a30  00000000  00000000  0002fd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025874  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd7a  00000000  00000000  00055fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1d2b  00000000  00000000  00063d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145a49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003438  00000000  00000000  00145a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800621c 	.word	0x0800621c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800621c 	.word	0x0800621c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <handle_bt_msg>:
#include <L3G4200D.h>
#include <string.h>
#include "bt_control.h"
#include "motor_control.h"

void handle_bt_msg(uint8_t msg, Cmd_holder cmd) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	6039      	str	r1, [r7, #0]
 800059e:	71fb      	strb	r3, [r7, #7]
	uint8_t new = CMD_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
	switch(msg) {
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	3b46      	subs	r3, #70	; 0x46
 80005a8:	2b13      	cmp	r3, #19
 80005aa:	d83d      	bhi.n	8000628 <handle_bt_msg+0x94>
 80005ac:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <handle_bt_msg+0x20>)
 80005ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b2:	bf00      	nop
 80005b4:	08000611 	.word	0x08000611
 80005b8:	08000617 	.word	0x08000617
 80005bc:	08000629 	.word	0x08000629
 80005c0:	08000629 	.word	0x08000629
 80005c4:	08000629 	.word	0x08000629
 80005c8:	08000629 	.word	0x08000629
 80005cc:	0800060b 	.word	0x0800060b
 80005d0:	08000629 	.word	0x08000629
 80005d4:	08000629 	.word	0x08000629
 80005d8:	08000629 	.word	0x08000629
 80005dc:	08000629 	.word	0x08000629
 80005e0:	08000629 	.word	0x08000629
 80005e4:	08000605 	.word	0x08000605
 80005e8:	08000629 	.word	0x08000629
 80005ec:	08000629 	.word	0x08000629
 80005f0:	08000629 	.word	0x08000629
 80005f4:	08000629 	.word	0x08000629
 80005f8:	08000629 	.word	0x08000629
 80005fc:	0800061d 	.word	0x0800061d
 8000600:	08000623 	.word	0x08000623
		case BT_TURN_RIGHT:
			new = CMD_TURN_RIGHT;
 8000604:	2305      	movs	r3, #5
 8000606:	73fb      	strb	r3, [r7, #15]
			break;
 8000608:	e011      	b.n	800062e <handle_bt_msg+0x9a>
		case BT_TURN_LEFT:
			new = CMD_TURN_LEFT;
 800060a:	2306      	movs	r3, #6
 800060c:	73fb      	strb	r3, [r7, #15]
			break;
 800060e:	e00e      	b.n	800062e <handle_bt_msg+0x9a>
		case BT_FORWARD:
			new = CMD_FORWARD;
 8000610:	2303      	movs	r3, #3
 8000612:	73fb      	strb	r3, [r7, #15]
			break;
 8000614:	e00b      	b.n	800062e <handle_bt_msg+0x9a>
		case BT_REVERSE:
			new = CMD_REVERSE;
 8000616:	2304      	movs	r3, #4
 8000618:	73fb      	strb	r3, [r7, #15]
			break;
 800061a:	e008      	b.n	800062e <handle_bt_msg+0x9a>
		case BT_X:
			new = CMD_CONT_FORW;
 800061c:	2307      	movs	r3, #7
 800061e:	73fb      	strb	r3, [r7, #15]
			break;
 8000620:	e005      	b.n	800062e <handle_bt_msg+0x9a>
		case BT_Y:
			new = CMD_STOP;
 8000622:	2301      	movs	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
			break;
 8000626:	e002      	b.n	800062e <handle_bt_msg+0x9a>
		default:
			new = CMD_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
			break;
 800062c:	bf00      	nop
	}
	cmd->new_cmd = new;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	705a      	strb	r2, [r3, #1]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000648:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800064c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d013      	beq.n	8000680 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000658:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800065c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000660:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00b      	beq.n	8000680 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000668:	e000      	b.n	800066c <ITM_SendChar+0x2c>
    {
      __NOP();
 800066a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f9      	beq.n	800066a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000676:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <__io_putchar>:
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

//For printing debug data into monitoring
int __io_putchar(int ch)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffd1 	bl	8000640 <ITM_SendChar>
	return(ch);
 800069e:	687b      	ldr	r3, [r7, #4]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 ffff 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f847 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f9e7 	bl	8000a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ba:	f000 f971 	bl	80009a0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80006be:	f000 f9c3 	bl	8000a48 <MX_DMA_Init>
  MX_USART6_UART_Init();
 80006c2:	f000 f997 	bl	80009f4 <MX_USART6_UART_Init>
  MX_ADC3_Init();
 80006c6:	f000 f8a9 	bl	800081c <MX_ADC3_Init>
  MX_SPI1_Init();
 80006ca:	f000 f931 	bl	8000930 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //SPI TX off
  HAL_GPIO_WritePin(GPIOF, SPI_CS_Pin, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d4:	4818      	ldr	r0, [pc, #96]	; (8000738 <main+0x90>)
 80006d6:	f002 fb63 	bl	8002da0 <HAL_GPIO_WritePin>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bt_msg = get_bt_msg();
 80006da:	f000 fb05 	bl	8000ce8 <get_bt_msg>
 80006de:	4603      	mov	r3, r0
 80006e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  handle_bt_msg(bt_msg, cmd_holder);
 80006e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff52 	bl	8000594 <handle_bt_msg>
	  handle_driving(cmd_holder);
 80006f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006f2:	f000 fc43 	bl	8000f7c <handle_driving>
	   * HAL ADC3 DMA values
	   * IR_data[0] = IR1 ... IR_data[4] = IR5
	   * IR_data[n] = 4095 -> distance > 10 cm
	   * IR_data[n] = 100-300 -> distance < 10 cm
	   * */
	  HAL_ADC_Start_DMA(&hadc3, IR_data, 5);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2205      	movs	r2, #5
 80006fc:	4619      	mov	r1, r3
 80006fe:	480f      	ldr	r0, [pc, #60]	; (800073c <main+0x94>)
 8000700:	f001 f8b0 	bl	8001864 <HAL_ADC_Start_DMA>
	  /*GY-50
	   * HAL SPI 1 Bus
	   * Addresses in L3G4200D.h library
	   * */

	  me = SPIRead(L3G4200D_REG_WHO_AM_I);
 8000704:	200f      	movs	r0, #15
 8000706:	f000 fac1 	bl	8000c8c <SPIRead>
 800070a:	4603      	mov	r3, r0
 800070c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  gyro_data = Get_gyro_values();
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fafa 	bl	8000d0c <Get_gyro_values>
	  printf("%d %d %d\r\n", gyro_data.x, gyro_data.y, gyro_data.z);
 8000718:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800071c:	4619      	mov	r1, r3
 800071e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000722:	461a      	mov	r2, r3
 8000724:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <main+0x98>)
 800072a:	f004 fde9 	bl	8005300 <iprintf>

	  // Delay for readability
	  HAL_Delay(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000732:	f001 f82f 	bl	8001794 <HAL_Delay>
	  bt_msg = get_bt_msg();
 8000736:	e7d0      	b.n	80006da <main+0x32>
 8000738:	40021400 	.word	0x40021400
 800073c:	2000008c 	.word	0x2000008c
 8000740:	08006234 	.word	0x08006234

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f004 fdcc 	bl	80052f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <SystemClock_Config+0xd0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a28      	ldr	r2, [pc, #160]	; (8000814 <SystemClock_Config+0xd0>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <SystemClock_Config+0xd0>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <SystemClock_Config+0xd4>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemClock_Config+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ac:	2310      	movs	r3, #16
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007bc:	2332      	movs	r3, #50	; 0x32
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fb01 	bl	8002dd4 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d8:	f000 fb16 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2101      	movs	r1, #1
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 fd62 	bl	80032c4 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000806:	f000 faff 	bl	8000e08 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800082e:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <MX_ADC3_Init+0x108>)
 8000830:	4a3d      	ldr	r2, [pc, #244]	; (8000928 <MX_ADC3_Init+0x10c>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000834:	4b3b      	ldr	r3, [pc, #236]	; (8000924 <MX_ADC3_Init+0x108>)
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800083a:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <MX_ADC3_Init+0x108>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000840:	4b38      	ldr	r3, [pc, #224]	; (8000924 <MX_ADC3_Init+0x108>)
 8000842:	2201      	movs	r2, #1
 8000844:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <MX_ADC3_Init+0x108>)
 8000848:	2200      	movs	r2, #0
 800084a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800084c:	4b35      	ldr	r3, [pc, #212]	; (8000924 <MX_ADC3_Init+0x108>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <MX_ADC3_Init+0x108>)
 8000856:	2200      	movs	r2, #0
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <MX_ADC3_Init+0x108>)
 800085c:	4a33      	ldr	r2, [pc, #204]	; (800092c <MX_ADC3_Init+0x110>)
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000860:	4b30      	ldr	r3, [pc, #192]	; (8000924 <MX_ADC3_Init+0x108>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 5;
 8000866:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <MX_ADC3_Init+0x108>)
 8000868:	2205      	movs	r2, #5
 800086a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_ADC3_Init+0x108>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <MX_ADC3_Init+0x108>)
 8000876:	2201      	movs	r2, #1
 8000878:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800087a:	482a      	ldr	r0, [pc, #168]	; (8000924 <MX_ADC3_Init+0x108>)
 800087c:	f000 ffae 	bl	80017dc <HAL_ADC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 fabf 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800088a:	2308      	movs	r3, #8
 800088c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4822      	ldr	r0, [pc, #136]	; (8000924 <MX_ADC3_Init+0x108>)
 800089c:	f001 f910 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80008a6:	f000 faaf 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008aa:	230f      	movs	r3, #15
 80008ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	481b      	ldr	r0, [pc, #108]	; (8000924 <MX_ADC3_Init+0x108>)
 80008b8:	f001 f902 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 80008c2:	f000 faa1 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008c6:	2309      	movs	r3, #9
 80008c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80008ca:	2303      	movs	r3, #3
 80008cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <MX_ADC3_Init+0x108>)
 80008d4:	f001 f8f4 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 80008de:	f000 fa93 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008e2:	230d      	movs	r3, #13
 80008e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_ADC3_Init+0x108>)
 80008f0:	f001 f8e6 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 80008fa:	f000 fa85 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008fe:	230a      	movs	r3, #10
 8000900:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000902:	2305      	movs	r3, #5
 8000904:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000906:	463b      	mov	r3, r7
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <MX_ADC3_Init+0x108>)
 800090c:	f001 f8d8 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8000916:	f000 fa77 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000008c 	.word	0x2000008c
 8000928:	40012200 	.word	0x40012200
 800092c:	0f000001 	.word	0x0f000001

08000930 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_SPI1_Init+0x68>)
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <MX_SPI1_Init+0x6c>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_SPI1_Init+0x68>)
 800093c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_SPI1_Init+0x68>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_SPI1_Init+0x68>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_SPI1_Init+0x68>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_SPI1_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_SPI1_Init+0x68>)
 800095c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000960:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_SPI1_Init+0x68>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_SPI1_Init+0x68>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_SPI1_Init+0x68>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_SPI1_Init+0x68>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_SPI1_Init+0x68>)
 800097c:	220a      	movs	r2, #10
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_SPI1_Init+0x68>)
 8000982:	f002 febf 	bl	8003704 <HAL_SPI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800098c:	f000 fa3c 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  gyroInit();
 8000990:	f000 fa0e 	bl	8000db0 <gyroInit>
  /* USER CODE END SPI1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000134 	.word	0x20000134
 800099c:	40013000 	.word	0x40013000

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_USART2_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d8:	f003 fc3c 	bl	8004254 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f000 fa11 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000018c 	.word	0x2000018c
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART6_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART6_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART6_UART_Init+0x4c>)
 8000a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART6_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART6_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART6_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART6_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART6_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART6_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART6_UART_Init+0x4c>)
 8000a2c:	f003 fc12 	bl	8004254 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f9e7 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001d0 	.word	0x200001d0
 8000a44:	40011400 	.word	0x40011400

08000a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_DMA_Init+0x3c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <MX_DMA_Init+0x3c>)
 8000a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_DMA_Init+0x3c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2038      	movs	r0, #56	; 0x38
 8000a70:	f001 fbb1 	bl	80021d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a74:	2038      	movs	r0, #56	; 0x38
 8000a76:	f001 fbca 	bl	800220e <HAL_NVIC_EnableIRQ>

}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	4b5d      	ldr	r3, [pc, #372]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a5c      	ldr	r2, [pc, #368]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000aa8:	f043 0320 	orr.w	r3, r3, #32
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b5a      	ldr	r3, [pc, #360]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0320 	and.w	r3, r3, #32
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	4b56      	ldr	r3, [pc, #344]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a55      	ldr	r2, [pc, #340]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b53      	ldr	r3, [pc, #332]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b4f      	ldr	r3, [pc, #316]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a4e      	ldr	r2, [pc, #312]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b4c      	ldr	r3, [pc, #304]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b48      	ldr	r3, [pc, #288]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a47      	ldr	r2, [pc, #284]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a40      	ldr	r2, [pc, #256]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b3a      	ldr	r3, [pc, #232]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a39      	ldr	r2, [pc, #228]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a32      	ldr	r2, [pc, #200]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <MX_GPIO_Init+0x190>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, IN1_Pin|ENA_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000b68:	482c      	ldr	r0, [pc, #176]	; (8000c1c <MX_GPIO_Init+0x194>)
 8000b6a:	f002 f919 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b74:	4829      	ldr	r0, [pc, #164]	; (8000c1c <MX_GPIO_Init+0x194>)
 8000b76:	f002 f913 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI_INT_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8000b80:	4827      	ldr	r0, [pc, #156]	; (8000c20 <MX_GPIO_Init+0x198>)
 8000b82:	f002 f90d 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin|IN2_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000b8c:	4825      	ldr	r0, [pc, #148]	; (8000c24 <MX_GPIO_Init+0x19c>)
 8000b8e:	f002 f907 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin ENB_Pin ENA_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|ENB_Pin|ENA_Pin;
 8000b92:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481c      	ldr	r0, [pc, #112]	; (8000c1c <MX_GPIO_Init+0x194>)
 8000bac:	f001 ff4c 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_INT_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = SPI_INT_Pin|IN3_Pin|IN4_Pin;
 8000bb0:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4815      	ldr	r0, [pc, #84]	; (8000c20 <MX_GPIO_Init+0x198>)
 8000bca:	f001 ff3d 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin IN2_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|IN2_Pin;
 8000bce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	480f      	ldr	r0, [pc, #60]	; (8000c24 <MX_GPIO_Init+0x19c>)
 8000be8:	f001 ff2e 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <MX_GPIO_Init+0x1a0>)
 8000c0a:	f001 ff1d 	bl	8002a48 <HAL_GPIO_Init>

}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	; 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40021400 	.word	0x40021400
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40020c00 	.word	0x40020c00
 8000c28:	40020400 	.word	0x40020400

08000c2c <SPIWrite>:

/* USER CODE BEGIN 4 */
void SPIWrite(uint8_t address, uint8_t data)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	460a      	mov	r2, r1
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	71bb      	strb	r3, [r7, #6]
  address &= 0x7F;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	71fb      	strb	r3, [r7, #7]
  //SPI TX on
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <SPIWrite+0x58>)
 8000c4e:	f002 f8a7 	bl	8002da0 <HAL_GPIO_WritePin>
  //SPI address transmit
  HAL_SPI_Transmit(&hspi1, &address, sizeof(address), HAL_MAX_DELAY);
 8000c52:	1df9      	adds	r1, r7, #7
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	2201      	movs	r2, #1
 8000c5a:	480b      	ldr	r0, [pc, #44]	; (8000c88 <SPIWrite+0x5c>)
 8000c5c:	f002 fddb 	bl	8003816 <HAL_SPI_Transmit>
  //SPI data transmit
  HAL_SPI_Transmit(&hspi1, &data, sizeof(data), HAL_MAX_DELAY);
 8000c60:	1db9      	adds	r1, r7, #6
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	2201      	movs	r2, #1
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <SPIWrite+0x5c>)
 8000c6a:	f002 fdd4 	bl	8003816 <HAL_SPI_Transmit>
  //SPI TX off
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <SPIWrite+0x58>)
 8000c76:	f002 f893 	bl	8002da0 <HAL_GPIO_WritePin>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020c00 	.word	0x40020c00
 8000c88:	20000134 	.word	0x20000134

08000c8c <SPIRead>:

uint8_t SPIRead(uint8_t address)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  address |= 0x80;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	71fb      	strb	r3, [r7, #7]
  //SPI TX on
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <SPIRead+0x54>)
 8000ca8:	f002 f87a 	bl	8002da0 <HAL_GPIO_WritePin>
  //SPI address transmit
  HAL_SPI_Transmit(&hspi1, &address, sizeof(address), HAL_MAX_DELAY);
 8000cac:	1df9      	adds	r1, r7, #7
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <SPIRead+0x58>)
 8000cb6:	f002 fdae 	bl	8003816 <HAL_SPI_Transmit>
  //SPI data receive
  HAL_SPI_Receive(&hspi1, &data, sizeof(data), HAL_MAX_DELAY);
 8000cba:	f107 010f 	add.w	r1, r7, #15
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <SPIRead+0x58>)
 8000cc6:	f002 fee2 	bl	8003a8e <HAL_SPI_Receive>
  //SPI TX off
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <SPIRead+0x54>)
 8000cd2:	f002 f865 	bl	8002da0 <HAL_GPIO_WritePin>
  return data;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	20000134 	.word	0x20000134

08000ce8 <get_bt_msg>:


uint8_t get_bt_msg() {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  uint8_t msg;
  HAL_UART_Receive(&huart6, &msg, sizeof(msg), 500);
 8000cee:	1df9      	adds	r1, r7, #7
 8000cf0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4804      	ldr	r0, [pc, #16]	; (8000d08 <get_bt_msg+0x20>)
 8000cf8:	f003 faf9 	bl	80042ee <HAL_UART_Receive>
  //printf("%d\r\n", msg);
  return msg;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200001d0 	.word	0x200001d0

08000d0c <Get_gyro_values>:

L3G4200D_output Get_gyro_values()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	int8_t x_l,x_h,y_l,y_h,z_l,z_h;
	L3G4200D_output gyro_data;
	x_l = SPIRead(L3G4200D_REG_OUT_X_L);
 8000d14:	2028      	movs	r0, #40	; 0x28
 8000d16:	f7ff ffb9 	bl	8000c8c <SPIRead>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	75fb      	strb	r3, [r7, #23]
	x_h = SPIRead(L3G4200D_REG_OUT_X_H);
 8000d1e:	2029      	movs	r0, #41	; 0x29
 8000d20:	f7ff ffb4 	bl	8000c8c <SPIRead>
 8000d24:	4603      	mov	r3, r0
 8000d26:	75bb      	strb	r3, [r7, #22]
	y_l = SPIRead(L3G4200D_REG_OUT_Y_L);
 8000d28:	202a      	movs	r0, #42	; 0x2a
 8000d2a:	f7ff ffaf 	bl	8000c8c <SPIRead>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	757b      	strb	r3, [r7, #21]
	y_h = SPIRead(L3G4200D_REG_OUT_Y_H);
 8000d32:	202b      	movs	r0, #43	; 0x2b
 8000d34:	f7ff ffaa 	bl	8000c8c <SPIRead>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	753b      	strb	r3, [r7, #20]
	z_l = SPIRead(L3G4200D_REG_OUT_Z_L);
 8000d3c:	202c      	movs	r0, #44	; 0x2c
 8000d3e:	f7ff ffa5 	bl	8000c8c <SPIRead>
 8000d42:	4603      	mov	r3, r0
 8000d44:	74fb      	strb	r3, [r7, #19]
	z_h = SPIRead(L3G4200D_REG_OUT_Z_H);
 8000d46:	202d      	movs	r0, #45	; 0x2d
 8000d48:	f7ff ffa0 	bl	8000c8c <SPIRead>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	74bb      	strb	r3, [r7, #18]
	gyro_data.x = (x_l & 0xFF) | ((x_h & 0xFF) << 8);
 8000d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	81bb      	strh	r3, [r7, #12]
	gyro_data.y = (y_l & 0xFF) | ((y_h & 0xFF) << 8);
 8000d68:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	81fb      	strh	r3, [r7, #14]
	gyro_data.z = (z_l & 0xFF) | ((z_h & 0xFF) << 8);
 8000d80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	823b      	strh	r3, [r7, #16]
	return gyro_data;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	6010      	str	r0, [r2, #0]
 8000da4:	889b      	ldrh	r3, [r3, #4]
 8000da6:	8093      	strh	r3, [r2, #4]
}
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <gyroInit>:

void gyroInit()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  uint8_t scale, status;
  status = SPIRead(L3G4200D_REG_WHO_AM_I);
 8000db6:	200f      	movs	r0, #15
 8000db8:	f7ff ff68 	bl	8000c8c <SPIRead>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  printf("%d\r\n", status);
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <gyroInit+0x54>)
 8000dc6:	f004 fa9b 	bl	8005300 <iprintf>
  // Enable x, y, z and turn off power down mode:
  SPIWrite(L3G4200D_REG_CTRL_REG1, 0x0f);
 8000dca:	210f      	movs	r1, #15
 8000dcc:	2020      	movs	r0, #32
 8000dce:	f7ff ff2d 	bl	8000c2c <SPIWrite>
  // HPF
  SPIWrite(L3G4200D_REG_CTRL_REG2, 0);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2021      	movs	r0, #33	; 0x21
 8000dd6:	f7ff ff29 	bl	8000c2c <SPIWrite>
  // Configure CTRL_REG3 to generate data ready interrupt on INT2
  // No interrupts used on INT1, if you'd like to configure INT1
  // or INT2 otherwise, consult the datasheet:
  SPIWrite(L3G4200D_REG_CTRL_REG3, 0);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2022      	movs	r0, #34	; 0x22
 8000dde:	f7ff ff25 	bl	8000c2c <SPIWrite>
  // CTRL_REG4 controls the full-scale range, among other things:
  scale = 2 & 0x03;
 8000de2:	2302      	movs	r3, #2
 8000de4:	71bb      	strb	r3, [r7, #6]
  SPIWrite(L3G4200D_REG_CTRL_REG4, scale << 4);
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4619      	mov	r1, r3
 8000dee:	2023      	movs	r0, #35	; 0x23
 8000df0:	f7ff ff1c 	bl	8000c2c <SPIWrite>
  // CTRL_REG5 controls high-pass filtering of outputs, use it
  // if you'd like:
  SPIWrite(L3G4200D_REG_CTRL_REG5, 0);
 8000df4:	2100      	movs	r1, #0
 8000df6:	2024      	movs	r0, #36	; 0x24
 8000df8:	f7ff ff18 	bl	8000c2c <SPIWrite>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	08006240 	.word	0x08006240

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>
	...

08000e14 <motor_set>:
	   * A high, B high -> fast motor stop
	   *
	   * enable low -> motor stop
	   * */

void motor_set(uint8_t motor, uint8_t command){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	4613      	mov	r3, r2
 8000e22:	71bb      	strb	r3, [r7, #6]
	switch(motor){
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <motor_set+0x1c>
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d04e      	beq.n	8000ecc <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_SET);
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_SET);
					break;
		}
	}
}
 8000e2e:	e09b      	b.n	8000f68 <motor_set+0x154>
			switch(command){
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d84a      	bhi.n	8000ecc <motor_set+0xb8>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <motor_set+0x28>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000e99 	.word	0x08000e99
 8000e40:	08000ea7 	.word	0x08000ea7
 8000e44:	08000e4d 	.word	0x08000e4d
 8000e48:	08000e73 	.word	0x08000e73
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e52:	4847      	ldr	r0, [pc, #284]	; (8000f70 <motor_set+0x15c>)
 8000e54:	f001 ffa4 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, IN1_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5e:	4844      	ldr	r0, [pc, #272]	; (8000f70 <motor_set+0x15c>)
 8000e60:	f001 ff9e 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, IN2_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6a:	4842      	ldr	r0, [pc, #264]	; (8000f74 <motor_set+0x160>)
 8000e6c:	f001 ff98 	bl	8002da0 <HAL_GPIO_WritePin>
					break;
 8000e70:	e02c      	b.n	8000ecc <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e78:	483d      	ldr	r0, [pc, #244]	; (8000f70 <motor_set+0x15c>)
 8000e7a:	f001 ff91 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, IN1_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e84:	483a      	ldr	r0, [pc, #232]	; (8000f70 <motor_set+0x15c>)
 8000e86:	f001 ff8b 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, IN2_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e90:	4838      	ldr	r0, [pc, #224]	; (8000f74 <motor_set+0x160>)
 8000e92:	f001 ff85 	bl	8002da0 <HAL_GPIO_WritePin>
					break;
 8000e96:	e019      	b.n	8000ecc <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9e:	4834      	ldr	r0, [pc, #208]	; (8000f70 <motor_set+0x15c>)
 8000ea0:	f001 ff7e 	bl	8002da0 <HAL_GPIO_WritePin>
					break;
 8000ea4:	e012      	b.n	8000ecc <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eac:	4830      	ldr	r0, [pc, #192]	; (8000f70 <motor_set+0x15c>)
 8000eae:	f001 ff77 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, IN1_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb8:	482d      	ldr	r0, [pc, #180]	; (8000f70 <motor_set+0x15c>)
 8000eba:	f001 ff71 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, IN2_Pin, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec4:	482b      	ldr	r0, [pc, #172]	; (8000f74 <motor_set+0x160>)
 8000ec6:	f001 ff6b 	bl	8002da0 <HAL_GPIO_WritePin>
					break;
 8000eca:	bf00      	nop
			switch(command){
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d84a      	bhi.n	8000f68 <motor_set+0x154>
 8000ed2:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <motor_set+0xc4>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000f35 	.word	0x08000f35
 8000edc:	08000f43 	.word	0x08000f43
 8000ee0:	08000ee9 	.word	0x08000ee9
 8000ee4:	08000f0f 	.word	0x08000f0f
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eee:	4820      	ldr	r0, [pc, #128]	; (8000f70 <motor_set+0x15c>)
 8000ef0:	f001 ff56 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efa:	481f      	ldr	r0, [pc, #124]	; (8000f78 <motor_set+0x164>)
 8000efc:	f001 ff50 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f06:	481c      	ldr	r0, [pc, #112]	; (8000f78 <motor_set+0x164>)
 8000f08:	f001 ff4a 	bl	8002da0 <HAL_GPIO_WritePin>
					break;
 8000f0c:	e02c      	b.n	8000f68 <motor_set+0x154>
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	4816      	ldr	r0, [pc, #88]	; (8000f70 <motor_set+0x15c>)
 8000f16:	f001 ff43 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f20:	4815      	ldr	r0, [pc, #84]	; (8000f78 <motor_set+0x164>)
 8000f22:	f001 ff3d 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2c:	4812      	ldr	r0, [pc, #72]	; (8000f78 <motor_set+0x164>)
 8000f2e:	f001 ff37 	bl	8002da0 <HAL_GPIO_WritePin>
					break;
 8000f32:	e019      	b.n	8000f68 <motor_set+0x154>
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <motor_set+0x15c>)
 8000f3c:	f001 ff30 	bl	8002da0 <HAL_GPIO_WritePin>
					break;
 8000f40:	e012      	b.n	8000f68 <motor_set+0x154>
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <motor_set+0x15c>)
 8000f4a:	f001 ff29 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <motor_set+0x164>)
 8000f56:	f001 ff23 	bl	8002da0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <motor_set+0x164>)
 8000f62:	f001 ff1d 	bl	8002da0 <HAL_GPIO_WritePin>
					break;
 8000f66:	bf00      	nop
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021400 	.word	0x40021400
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	40021000 	.word	0x40021000

08000f7c <handle_driving>:

void handle_driving(Cmd_holder cmd){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	uint8_t old = cmd->old_cmd;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	73fb      	strb	r3, [r7, #15]
	uint8_t new = cmd->new_cmd;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	785b      	ldrb	r3, [r3, #1]
 8000f8e:	73bb      	strb	r3, [r7, #14]
	uint8_t moving = cmd->moving;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	789b      	ldrb	r3, [r3, #2]
 8000f94:	737b      	strb	r3, [r7, #13]
	if (new != old && new != CMD_NONE){
 8000f96:	7bba      	ldrb	r2, [r7, #14]
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	f000 80bc 	beq.w	8001118 <handle_driving+0x19c>
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80b8 	beq.w	8001118 <handle_driving+0x19c>
		switch(new){
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	2b06      	cmp	r3, #6
 8000fae:	f200 80b1 	bhi.w	8001114 <handle_driving+0x198>
 8000fb2:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <handle_driving+0x3c>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	08001005 	.word	0x08001005
 8000fbc:	0800101d 	.word	0x0800101d
 8000fc0:	08000fd5 	.word	0x08000fd5
 8000fc4:	08000fed 	.word	0x08000fed
 8000fc8:	08001035 	.word	0x08001035
 8000fcc:	08001099 	.word	0x08001099
 8000fd0:	080010fd 	.word	0x080010fd
		    case CMD_FORWARD:
		    	motor_set(LEFT_MT, MT_FORWARD);
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff ff1c 	bl	8000e14 <motor_set>
		    	motor_set(RIGHT_MT, MT_FORWARD);
 8000fdc:	2102      	movs	r1, #2
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff ff18 	bl	8000e14 <motor_set>
		    	cmd->moving = MOVING_FORWARD;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	709a      	strb	r2, [r3, #2]
		    	break;
 8000fea:	e094      	b.n	8001116 <handle_driving+0x19a>

		    case CMD_REVERSE:
				motor_set(LEFT_MT, MT_REVERSE);
 8000fec:	2103      	movs	r1, #3
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff ff10 	bl	8000e14 <motor_set>
				motor_set(RIGHT_MT, MT_REVERSE);
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff ff0c 	bl	8000e14 <motor_set>
				cmd->moving = MOVING_REVERSE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2202      	movs	r2, #2
 8001000:	709a      	strb	r2, [r3, #2]
				break;
 8001002:	e088      	b.n	8001116 <handle_driving+0x19a>

		    case CMD_STOP:
		    	motor_set(LEFT_MT, MT_STOP);
 8001004:	2100      	movs	r1, #0
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff ff04 	bl	8000e14 <motor_set>
				motor_set(RIGHT_MT, MT_STOP);
 800100c:	2100      	movs	r1, #0
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff ff00 	bl	8000e14 <motor_set>
				cmd->moving = STOPPED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	709a      	strb	r2, [r3, #2]
				break;
 800101a:	e07c      	b.n	8001116 <handle_driving+0x19a>

		    case CMD_FAST_STOP:
		    	motor_set(LEFT_MT, MT_FAST_STOP);
 800101c:	2101      	movs	r1, #1
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff fef8 	bl	8000e14 <motor_set>
		    	motor_set(RIGHT_MT, MT_FAST_STOP);
 8001024:	2101      	movs	r1, #1
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff fef4 	bl	8000e14 <motor_set>
		    	cmd->moving = STOPPED;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	709a      	strb	r2, [r3, #2]
		    	break;
 8001032:	e070      	b.n	8001116 <handle_driving+0x19a>

			case CMD_TURN_RIGHT:
				switch(moving){
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	2b03      	cmp	r3, #3
 8001038:	d006      	beq.n	8001048 <handle_driving+0xcc>
 800103a:	2b03      	cmp	r3, #3
 800103c:	dc1f      	bgt.n	800107e <handle_driving+0x102>
 800103e:	2b00      	cmp	r3, #0
 8001040:	d014      	beq.n	800106c <handle_driving+0xf0>
 8001042:	2b02      	cmp	r3, #2
 8001044:	d009      	beq.n	800105a <handle_driving+0xde>
 8001046:	e01a      	b.n	800107e <handle_driving+0x102>
					case MOVE_CONT_FORW:
						motor_set(LEFT_MT, MT_FORWARD);
 8001048:	2102      	movs	r1, #2
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff fee2 	bl	8000e14 <motor_set>
						motor_set(RIGHT_MT, MT_STOP);
 8001050:	2100      	movs	r1, #0
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fede 	bl	8000e14 <motor_set>
						break;
 8001058:	e01a      	b.n	8001090 <handle_driving+0x114>

					case MOVING_REVERSE:
						motor_set(LEFT_MT, MT_REVERSE);
 800105a:	2103      	movs	r1, #3
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff fed9 	bl	8000e14 <motor_set>
						motor_set(RIGHT_MT, MT_STOP);
 8001062:	2100      	movs	r1, #0
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff fed5 	bl	8000e14 <motor_set>
						break;
 800106a:	e011      	b.n	8001090 <handle_driving+0x114>

					case STOPPED:
						motor_set(LEFT_MT, MT_FORWARD);
 800106c:	2102      	movs	r1, #2
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff fed0 	bl	8000e14 <motor_set>
						motor_set(RIGHT_MT, MT_REVERSE);
 8001074:	2103      	movs	r1, #3
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff fecc 	bl	8000e14 <motor_set>
						break;
 800107c:	e008      	b.n	8001090 <handle_driving+0x114>

					default:
						motor_set(LEFT_MT, MT_FORWARD);
 800107e:	2102      	movs	r1, #2
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fec7 	bl	8000e14 <motor_set>
						motor_set(RIGHT_MT, MT_REVERSE);
 8001086:	2103      	movs	r1, #3
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fec3 	bl	8000e14 <motor_set>
						break;
 800108e:	bf00      	nop
				}
				cmd->moving = moving;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7b7a      	ldrb	r2, [r7, #13]
 8001094:	709a      	strb	r2, [r3, #2]
				break;
 8001096:	e03e      	b.n	8001116 <handle_driving+0x19a>

			case CMD_TURN_LEFT:
				switch(moving){
 8001098:	7b7b      	ldrb	r3, [r7, #13]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d006      	beq.n	80010ac <handle_driving+0x130>
 800109e:	2b03      	cmp	r3, #3
 80010a0:	dc1f      	bgt.n	80010e2 <handle_driving+0x166>
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d014      	beq.n	80010d0 <handle_driving+0x154>
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d009      	beq.n	80010be <handle_driving+0x142>
 80010aa:	e01a      	b.n	80010e2 <handle_driving+0x166>
					case MOVE_CONT_FORW:
						motor_set(LEFT_MT, MT_STOP);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff feb0 	bl	8000e14 <motor_set>
						motor_set(RIGHT_MT, MT_FORWARD);
 80010b4:	2102      	movs	r1, #2
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff feac 	bl	8000e14 <motor_set>
						break;
 80010bc:	e01a      	b.n	80010f4 <handle_driving+0x178>

					case MOVING_REVERSE:
						motor_set(LEFT_MT, MT_STOP);
 80010be:	2100      	movs	r1, #0
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fea7 	bl	8000e14 <motor_set>
						motor_set(RIGHT_MT, MT_REVERSE);
 80010c6:	2103      	movs	r1, #3
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff fea3 	bl	8000e14 <motor_set>
						break;
 80010ce:	e011      	b.n	80010f4 <handle_driving+0x178>

					case STOPPED:
						motor_set(LEFT_MT, MT_REVERSE);
 80010d0:	2103      	movs	r1, #3
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fe9e 	bl	8000e14 <motor_set>
						motor_set(RIGHT_MT, MT_FORWARD);
 80010d8:	2102      	movs	r1, #2
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff fe9a 	bl	8000e14 <motor_set>
						break;
 80010e0:	e008      	b.n	80010f4 <handle_driving+0x178>

					default:
						motor_set(LEFT_MT, MT_REVERSE);
 80010e2:	2103      	movs	r1, #3
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fe95 	bl	8000e14 <motor_set>
						motor_set(RIGHT_MT, MT_FORWARD);
 80010ea:	2102      	movs	r1, #2
 80010ec:	2001      	movs	r0, #1
 80010ee:	f7ff fe91 	bl	8000e14 <motor_set>
						break;
 80010f2:	bf00      	nop

				}
				cmd->moving = moving;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7b7a      	ldrb	r2, [r7, #13]
 80010f8:	709a      	strb	r2, [r3, #2]
				break;
 80010fa:	e00c      	b.n	8001116 <handle_driving+0x19a>
			case CMD_CONT_FORW:
				motor_set(LEFT_MT, MT_FORWARD);
 80010fc:	2102      	movs	r1, #2
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fe88 	bl	8000e14 <motor_set>
				motor_set(RIGHT_MT, MT_FORWARD);
 8001104:	2102      	movs	r1, #2
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff fe84 	bl	8000e14 <motor_set>
				cmd->moving = MOVE_CONT_FORW;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	709a      	strb	r2, [r3, #2]
				break;
 8001112:	e000      	b.n	8001116 <handle_driving+0x19a>
			default:
				break;
 8001114:	bf00      	nop
		switch(new){
 8001116:	e01a      	b.n	800114e <handle_driving+0x1d2>
		}

	}
	else
	{
		if(cmd->moving == MOVE_CONT_FORW){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	789b      	ldrb	r3, [r3, #2]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d10b      	bne.n	8001138 <handle_driving+0x1bc>
			motor_set(LEFT_MT, MT_FORWARD);
 8001120:	2102      	movs	r1, #2
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff fe76 	bl	8000e14 <motor_set>
			motor_set(RIGHT_MT, MT_FORWARD);
 8001128:	2102      	movs	r1, #2
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff fe72 	bl	8000e14 <motor_set>
			cmd->moving = MOVE_CONT_FORW;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	709a      	strb	r2, [r3, #2]
 8001136:	e00a      	b.n	800114e <handle_driving+0x1d2>
		}
		else
		{
			motor_set(LEFT_MT, MT_STOP);
 8001138:	2100      	movs	r1, #0
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff fe6a 	bl	8000e14 <motor_set>
			motor_set(RIGHT_MT, MT_STOP);
 8001140:	2100      	movs	r1, #0
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff fe66 	bl	8000e14 <motor_set>
			cmd->moving = STOPPED;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	709a      	strb	r2, [r3, #2]
		}
	}
	cmd->old_cmd = new;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7bba      	ldrb	r2, [r7, #14]
 8001152:	701a      	strb	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_MspInit+0x4c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_MspInit+0x4c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_ADC_MspInit+0x114>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d173      	bne.n	80012b6 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <HAL_ADC_MspInit+0x118>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <HAL_ADC_MspInit+0x118>)
 80011d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <HAL_ADC_MspInit+0x118>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_ADC_MspInit+0x118>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a34      	ldr	r2, [pc, #208]	; (80012c4 <HAL_ADC_MspInit+0x118>)
 80011f4:	f043 0320 	orr.w	r3, r3, #32
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HAL_ADC_MspInit+0x118>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <HAL_ADC_MspInit+0x118>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a2d      	ldr	r2, [pc, #180]	; (80012c4 <HAL_ADC_MspInit+0x118>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <HAL_ADC_MspInit+0x118>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
    PF5     ------> ADC3_IN15
    PF10     ------> ADC3_IN8
    PC0     ------> ADC3_IN10
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = IR3_Pin|IR2_Pin|IR1_Pin;
 8001222:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001228:	2303      	movs	r3, #3
 800122a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4824      	ldr	r0, [pc, #144]	; (80012c8 <HAL_ADC_MspInit+0x11c>)
 8001238:	f001 fc06 	bl	8002a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR5_Pin|IR4_Pin;
 800123c:	2309      	movs	r3, #9
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001240:	2303      	movs	r3, #3
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	481f      	ldr	r0, [pc, #124]	; (80012cc <HAL_ADC_MspInit+0x120>)
 8001250:	f001 fbfa 	bl	8002a48 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 8001256:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <HAL_ADC_MspInit+0x128>)
 8001258:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 800125c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001260:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 8001270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001274:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 8001278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 8001280:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001284:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 8001288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800128c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 800129c:	f000 ffd2 	bl	8002244 <HAL_DMA_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_ADC_MspInit+0xfe>
    {
      Error_Handler();
 80012a6:	f7ff fdaf 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_ADC_MspInit+0x124>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80012b6:	bf00      	nop
 80012b8:	3728      	adds	r7, #40	; 0x28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40012200 	.word	0x40012200
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40021400 	.word	0x40021400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	200000d4 	.word	0x200000d4
 80012d4:	40026410 	.word	0x40026410

080012d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_SPI_MspInit+0x84>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12b      	bne.n	8001352 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001304:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_SPI_MspInit+0x88>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_SPI_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDA_Pin;
 8001332:	23e0      	movs	r3, #224	; 0xe0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001342:	2305      	movs	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_SPI_MspInit+0x8c>)
 800134e:	f001 fb7b 	bl	8002a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013000 	.word	0x40013000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a36      	ldr	r2, [pc, #216]	; (8001460 <HAL_UART_MspInit+0xf8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d12c      	bne.n	80013e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	4b35      	ldr	r3, [pc, #212]	; (8001464 <HAL_UART_MspInit+0xfc>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a34      	ldr	r2, [pc, #208]	; (8001464 <HAL_UART_MspInit+0xfc>)
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <HAL_UART_MspInit+0xfc>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <HAL_UART_MspInit+0xfc>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <HAL_UART_MspInit+0xfc>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <HAL_UART_MspInit+0xfc>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013c2:	230c      	movs	r3, #12
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d2:	2307      	movs	r3, #7
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4822      	ldr	r0, [pc, #136]	; (8001468 <HAL_UART_MspInit+0x100>)
 80013de:	f001 fb33 	bl	8002a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013e2:	e039      	b.n	8001458 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a20      	ldr	r2, [pc, #128]	; (800146c <HAL_UART_MspInit+0x104>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d134      	bne.n	8001458 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_UART_MspInit+0xfc>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <HAL_UART_MspInit+0xfc>)
 80013f8:	f043 0320 	orr.w	r3, r3, #32
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_UART_MspInit+0xfc>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_UART_MspInit+0xfc>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_UART_MspInit+0xfc>)
 8001414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_UART_MspInit+0xfc>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BT_RX_Pin|BT_TX_Pin;
 8001426:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001438:	2308      	movs	r3, #8
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <HAL_UART_MspInit+0x108>)
 8001444:	f001 fb00 	bl	8002a48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2047      	movs	r0, #71	; 0x47
 800144e:	f000 fec2 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001452:	2047      	movs	r0, #71	; 0x47
 8001454:	f000 fedb 	bl	800220e <HAL_NVIC_EnableIRQ>
}
 8001458:	bf00      	nop
 800145a:	3730      	adds	r7, #48	; 0x30
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40004400 	.word	0x40004400
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40011400 	.word	0x40011400
 8001470:	40021800 	.word	0x40021800

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 f948 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <DMA2_Stream0_IRQHandler+0x10>)
 80014ce:	f001 f851 	bl	8002574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200000d4 	.word	0x200000d4

080014dc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <USART6_IRQHandler+0x10>)
 80014e2:	f002 ffa7 	bl	8004434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200001d0 	.word	0x200001d0

080014f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001502:	f3af 8000 	nop.w
 8001506:	4601      	mov	r1, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <_read+0x12>
	}

return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f8a2 	bl	800068e <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf1      	blt.n	800153c <_write+0x12>
	}
	return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158a:	605a      	str	r2, [r3, #4]
	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_isatty>:

int _isatty(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f003 fe4e 	bl	800529c <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20030000 	.word	0x20030000
 800162c:	00000400 	.word	0x00000400
 8001630:	20000214 	.word	0x20000214
 8001634:	20000230 	.word	0x20000230

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001686:	f7ff ffd7 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f003 fe0d 	bl	80052a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff f80b 	bl	80006a8 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001694:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016a0:	08006310 	.word	0x08006310
  ldr r2, =_sbss
 80016a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016a8:	2000022c 	.word	0x2000022c

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 fd71 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fd3a 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fd89 	bl	800222a <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 fd51 	bl	80021d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000008 	.word	0x20000008
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	20000218 	.word	0x20000218

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000218 	.word	0x20000218

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008

080017dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e033      	b.n	800185a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fcd6 	bl	80011ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	f043 0202 	orr.w	r2, r3, #2
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fa78 	bl	8001d24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
 800184a:	e001      	b.n	8001850 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_ADC_Start_DMA+0x1e>
 800187e:	2302      	movs	r3, #2
 8001880:	e0e9      	b.n	8001a56 <HAL_ADC_Start_DMA+0x1f2>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d018      	beq.n	80018ca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018a8:	4b6d      	ldr	r3, [pc, #436]	; (8001a60 <HAL_ADC_Start_DMA+0x1fc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a6d      	ldr	r2, [pc, #436]	; (8001a64 <HAL_ADC_Start_DMA+0x200>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9a      	lsrs	r2, r3, #18
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80018bc:	e002      	b.n	80018c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f9      	bne.n	80018be <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d8:	d107      	bne.n	80018ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 80a1 	bne.w	8001a3c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001924:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001938:	d106      	bne.n	8001948 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f023 0206 	bic.w	r2, r3, #6
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
 8001946:	e002      	b.n	800194e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <HAL_ADC_Start_DMA+0x204>)
 8001958:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195e:	4a43      	ldr	r2, [pc, #268]	; (8001a6c <HAL_ADC_Start_DMA+0x208>)
 8001960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001966:	4a42      	ldr	r2, [pc, #264]	; (8001a70 <HAL_ADC_Start_DMA+0x20c>)
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196e:	4a41      	ldr	r2, [pc, #260]	; (8001a74 <HAL_ADC_Start_DMA+0x210>)
 8001970:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800197a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800198a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800199a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	334c      	adds	r3, #76	; 0x4c
 80019a6:	4619      	mov	r1, r3
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f000 fcf8 	bl	80023a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d12a      	bne.n	8001a12 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2d      	ldr	r2, [pc, #180]	; (8001a78 <HAL_ADC_Start_DMA+0x214>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d015      	beq.n	80019f2 <HAL_ADC_Start_DMA+0x18e>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2c      	ldr	r2, [pc, #176]	; (8001a7c <HAL_ADC_Start_DMA+0x218>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_Start_DMA+0x178>
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_ADC_Start_DMA+0x204>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00a      	beq.n	80019f2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <HAL_ADC_Start_DMA+0x21c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d136      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x1f0>
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_ADC_Start_DMA+0x204>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d130      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d129      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e020      	b.n	8001a54 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_ADC_Start_DMA+0x214>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d11b      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x1f0>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d114      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	e00b      	b.n	8001a54 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f043 0210 	orr.w	r2, r3, #16
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000000 	.word	0x20000000
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	08001f1d 	.word	0x08001f1d
 8001a70:	08001fd7 	.word	0x08001fd7
 8001a74:	08001ff3 	.word	0x08001ff3
 8001a78:	40012000 	.word	0x40012000
 8001a7c:	40012100 	.word	0x40012100
 8001a80:	40012200 	.word	0x40012200

08001a84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x1c>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e113      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x244>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	d925      	bls.n	8001b38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68d9      	ldr	r1, [r3, #12]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	3b1e      	subs	r3, #30
 8001b02:	2207      	movs	r2, #7
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	400a      	ands	r2, r1
 8001b10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68d9      	ldr	r1, [r3, #12]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4403      	add	r3, r0
 8001b2a:	3b1e      	subs	r3, #30
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	e022      	b.n	8001b7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	400a      	ands	r2, r1
 8001b5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6919      	ldr	r1, [r3, #16]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4403      	add	r3, r0
 8001b74:	409a      	lsls	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d824      	bhi.n	8001bd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b05      	subs	r3, #5
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b05      	subs	r3, #5
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bce:	e04c      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d824      	bhi.n	8001c22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b23      	subs	r3, #35	; 0x23
 8001bea:	221f      	movs	r2, #31
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b23      	subs	r3, #35	; 0x23
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c20:	e023      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b41      	subs	r3, #65	; 0x41
 8001c34:	221f      	movs	r2, #31
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	400a      	ands	r2, r1
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b41      	subs	r3, #65	; 0x41
 8001c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <HAL_ADC_ConfigChannel+0x250>)
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a28      	ldr	r2, [pc, #160]	; (8001d14 <HAL_ADC_ConfigChannel+0x254>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d10f      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1d8>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d10b      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_ADC_ConfigChannel+0x254>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d12b      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x23a>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_ADC_ConfigChannel+0x258>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d003      	beq.n	8001cb4 <HAL_ADC_ConfigChannel+0x1f4>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b11      	cmp	r3, #17
 8001cb2:	d122      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_ADC_ConfigChannel+0x258>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d111      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_ADC_ConfigChannel+0x25c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a11      	ldr	r2, [pc, #68]	; (8001d20 <HAL_ADC_ConfigChannel+0x260>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	0c9a      	lsrs	r2, r3, #18
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40012300 	.word	0x40012300
 8001d14:	40012000 	.word	0x40012000
 8001d18:	10000012 	.word	0x10000012
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d2c:	4b79      	ldr	r3, [pc, #484]	; (8001f14 <ADC_Init+0x1f0>)
 8001d2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	021a      	lsls	r2, r3, #8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6899      	ldr	r1, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	4a58      	ldr	r2, [pc, #352]	; (8001f18 <ADC_Init+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d022      	beq.n	8001e02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	e00f      	b.n	8001e22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0202 	bic.w	r2, r2, #2
 8001e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6899      	ldr	r1, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7e1b      	ldrb	r3, [r3, #24]
 8001e3c:	005a      	lsls	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01b      	beq.n	8001e88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	035a      	lsls	r2, r3, #13
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	e007      	b.n	8001e98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	051a      	lsls	r2, r3, #20
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ecc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eda:	025a      	lsls	r2, r3, #9
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6899      	ldr	r1, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	029a      	lsls	r2, r3, #10
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	609a      	str	r2, [r3, #8]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40012300 	.word	0x40012300
 8001f18:	0f000001 	.word	0x0f000001

08001f1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d13c      	bne.n	8001fb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d12b      	bne.n	8001fa8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d127      	bne.n	8001fa8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d119      	bne.n	8001fa8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0220 	bic.w	r2, r2, #32
 8001f82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff fd6b 	bl	8001a84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fae:	e00e      	b.n	8001fce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff fd75 	bl	8001aac <HAL_ADC_ErrorCallback>
}
 8001fc2:	e004      	b.n	8001fce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	4798      	blx	r3
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff fd57 	bl	8001a98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f043 0204 	orr.w	r2, r3, #4
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7ff fd4a 	bl	8001aac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <__NVIC_SetPriorityGrouping>:
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4907      	ldr	r1, [pc, #28]	; (80020bc <__NVIC_EnableIRQ+0x38>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <__NVIC_SetPriority>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	; (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	; (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <SysTick_Config>:
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f7ff ff8e 	bl	80020c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff29 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff3e 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff8e 	bl	8002114 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5d 	bl	80020c0 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff31 	bl	8002084 <__NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffa2 	bl	800217c <SysTick_Config>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff fa94 	bl	800177c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e099      	b.n	8002394 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002280:	e00f      	b.n	80022a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002282:	f7ff fa7b 	bl	800177c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b05      	cmp	r3, #5
 800228e:	d908      	bls.n	80022a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2203      	movs	r2, #3
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e078      	b.n	8002394 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e8      	bne.n	8002282 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4b38      	ldr	r3, [pc, #224]	; (800239c <HAL_DMA_Init+0x158>)
 80022bc:	4013      	ands	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d107      	bne.n	800230c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	4313      	orrs	r3, r2
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f023 0307 	bic.w	r3, r3, #7
 8002322:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2b04      	cmp	r3, #4
 8002334:	d117      	bne.n	8002366 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00e      	beq.n	8002366 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fb01 	bl	8002950 <DMA_CheckFifoParam>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2240      	movs	r2, #64	; 0x40
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002362:	2301      	movs	r3, #1
 8002364:	e016      	b.n	8002394 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fab8 	bl	80028e4 <DMA_CalcBaseAndBitshift>
 8002374:	4603      	mov	r3, r0
 8002376:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	223f      	movs	r2, #63	; 0x3f
 800237e:	409a      	lsls	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	f010803f 	.word	0xf010803f

080023a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_DMA_Start_IT+0x26>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e040      	b.n	8002448 <HAL_DMA_Start_IT+0xa8>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d12f      	bne.n	800243a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fa4a 	bl	8002888 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	223f      	movs	r2, #63	; 0x3f
 80023fa:	409a      	lsls	r2, r3
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0216 	orr.w	r2, r2, #22
 800240e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0208 	orr.w	r2, r2, #8
 8002426:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e005      	b.n	8002446 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002446:	7dfb      	ldrb	r3, [r7, #23]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800245e:	f7ff f98d 	bl	800177c <HAL_GetTick>
 8002462:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d008      	beq.n	8002482 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e052      	b.n	8002528 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0216 	bic.w	r2, r2, #22
 8002490:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <HAL_DMA_Abort+0x62>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0208 	bic.w	r2, r2, #8
 80024c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d2:	e013      	b.n	80024fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d4:	f7ff f952 	bl	800177c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d90c      	bls.n	80024fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2220      	movs	r2, #32
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2203      	movs	r2, #3
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e015      	b.n	8002528 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e4      	bne.n	80024d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	223f      	movs	r2, #63	; 0x3f
 8002510:	409a      	lsls	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d004      	beq.n	800254e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00c      	b.n	8002568 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2205      	movs	r2, #5
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002580:	4b8e      	ldr	r3, [pc, #568]	; (80027bc <HAL_DMA_IRQHandler+0x248>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a8e      	ldr	r2, [pc, #568]	; (80027c0 <HAL_DMA_IRQHandler+0x24c>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0a9b      	lsrs	r3, r3, #10
 800258c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2208      	movs	r2, #8
 80025a0:	409a      	lsls	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01a      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0204 	bic.w	r2, r2, #4
 80025c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025cc:	2208      	movs	r2, #8
 80025ce:	409a      	lsls	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	f043 0201 	orr.w	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	2201      	movs	r2, #1
 80025e6:	409a      	lsls	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	2201      	movs	r2, #1
 8002604:	409a      	lsls	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f043 0202 	orr.w	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	2204      	movs	r2, #4
 800261c:	409a      	lsls	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d012      	beq.n	800264c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00b      	beq.n	800264c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	2204      	movs	r2, #4
 800263a:	409a      	lsls	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002644:	f043 0204 	orr.w	r2, r3, #4
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2210      	movs	r2, #16
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d043      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d03c      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	2210      	movs	r2, #16
 8002670:	409a      	lsls	r2, r3
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d018      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d108      	bne.n	80026a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d024      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
 80026a2:	e01f      	b.n	80026e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01b      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
 80026b4:	e016      	b.n	80026e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0208 	bic.w	r2, r2, #8
 80026d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	2220      	movs	r2, #32
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 808f 	beq.w	8002814 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8087 	beq.w	8002814 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	2220      	movs	r2, #32
 800270c:	409a      	lsls	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b05      	cmp	r3, #5
 800271c:	d136      	bne.n	800278c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0216 	bic.w	r2, r2, #22
 800272c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <HAL_DMA_IRQHandler+0x1da>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0208 	bic.w	r2, r2, #8
 800275c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	223f      	movs	r2, #63	; 0x3f
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277e:	2b00      	cmp	r3, #0
 8002780:	d07e      	beq.n	8002880 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
        }
        return;
 800278a:	e079      	b.n	8002880 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01d      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10d      	bne.n	80027c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d031      	beq.n	8002814 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
 80027b8:	e02c      	b.n	8002814 <HAL_DMA_IRQHandler+0x2a0>
 80027ba:	bf00      	nop
 80027bc:	20000000 	.word	0x20000000
 80027c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d023      	beq.n	8002814 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
 80027d4:	e01e      	b.n	8002814 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10f      	bne.n	8002804 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0210 	bic.w	r2, r2, #16
 80027f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	2b00      	cmp	r3, #0
 800281a:	d032      	beq.n	8002882 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d022      	beq.n	800286e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2205      	movs	r2, #5
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3301      	adds	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	429a      	cmp	r2, r3
 800284a:	d307      	bcc.n	800285c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f2      	bne.n	8002840 <HAL_DMA_IRQHandler+0x2cc>
 800285a:	e000      	b.n	800285e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800285c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
 800287e:	e000      	b.n	8002882 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002880:	bf00      	nop
    }
  }
}
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b40      	cmp	r3, #64	; 0x40
 80028b4:	d108      	bne.n	80028c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028c6:	e007      	b.n	80028d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3b10      	subs	r3, #16
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <DMA_CalcBaseAndBitshift+0x64>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028fe:	4a13      	ldr	r2, [pc, #76]	; (800294c <DMA_CalcBaseAndBitshift+0x68>)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b03      	cmp	r3, #3
 8002910:	d909      	bls.n	8002926 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	1d1a      	adds	r2, r3, #4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	659a      	str	r2, [r3, #88]	; 0x58
 8002924:	e007      	b.n	8002936 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800292e:	f023 0303 	bic.w	r3, r3, #3
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	aaaaaaab 	.word	0xaaaaaaab
 800294c:	08006260 	.word	0x08006260

08002950 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d11f      	bne.n	80029aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d856      	bhi.n	8002a1e <DMA_CheckFifoParam+0xce>
 8002970:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <DMA_CheckFifoParam+0x28>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	08002989 	.word	0x08002989
 800297c:	0800299b 	.word	0x0800299b
 8002980:	08002989 	.word	0x08002989
 8002984:	08002a1f 	.word	0x08002a1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d046      	beq.n	8002a22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002998:	e043      	b.n	8002a22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029a2:	d140      	bne.n	8002a26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a8:	e03d      	b.n	8002a26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b2:	d121      	bne.n	80029f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d837      	bhi.n	8002a2a <DMA_CheckFifoParam+0xda>
 80029ba:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <DMA_CheckFifoParam+0x70>)
 80029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c0:	080029d1 	.word	0x080029d1
 80029c4:	080029d7 	.word	0x080029d7
 80029c8:	080029d1 	.word	0x080029d1
 80029cc:	080029e9 	.word	0x080029e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      break;
 80029d4:	e030      	b.n	8002a38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d025      	beq.n	8002a2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e6:	e022      	b.n	8002a2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029f0:	d11f      	bne.n	8002a32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029f6:	e01c      	b.n	8002a32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d903      	bls.n	8002a06 <DMA_CheckFifoParam+0xb6>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d003      	beq.n	8002a0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a04:	e018      	b.n	8002a38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
      break;
 8002a0a:	e015      	b.n	8002a38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00e      	beq.n	8002a36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e00b      	b.n	8002a36 <DMA_CheckFifoParam+0xe6>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e00a      	b.n	8002a38 <DMA_CheckFifoParam+0xe8>
      break;
 8002a22:	bf00      	nop
 8002a24:	e008      	b.n	8002a38 <DMA_CheckFifoParam+0xe8>
      break;
 8002a26:	bf00      	nop
 8002a28:	e006      	b.n	8002a38 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e004      	b.n	8002a38 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e002      	b.n	8002a38 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a32:	bf00      	nop
 8002a34:	e000      	b.n	8002a38 <DMA_CheckFifoParam+0xe8>
      break;
 8002a36:	bf00      	nop
    }
  } 
  
  return status; 
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop

08002a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	e177      	b.n	8002d54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a64:	2201      	movs	r2, #1
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	f040 8166 	bne.w	8002d4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d005      	beq.n	8002a9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d130      	bne.n	8002afc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 0201 	and.w	r2, r3, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d017      	beq.n	8002b38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d123      	bne.n	8002b8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	08da      	lsrs	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	220f      	movs	r2, #15
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	08da      	lsrs	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3208      	adds	r2, #8
 8002b86:	69b9      	ldr	r1, [r7, #24]
 8002b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0203 	and.w	r2, r3, #3
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80c0 	beq.w	8002d4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <HAL_GPIO_Init+0x324>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4a65      	ldr	r2, [pc, #404]	; (8002d6c <HAL_GPIO_Init+0x324>)
 8002bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bde:	4b63      	ldr	r3, [pc, #396]	; (8002d6c <HAL_GPIO_Init+0x324>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bea:	4a61      	ldr	r2, [pc, #388]	; (8002d70 <HAL_GPIO_Init+0x328>)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	220f      	movs	r2, #15
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_GPIO_Init+0x32c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d037      	beq.n	8002c86 <HAL_GPIO_Init+0x23e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a57      	ldr	r2, [pc, #348]	; (8002d78 <HAL_GPIO_Init+0x330>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d031      	beq.n	8002c82 <HAL_GPIO_Init+0x23a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a56      	ldr	r2, [pc, #344]	; (8002d7c <HAL_GPIO_Init+0x334>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02b      	beq.n	8002c7e <HAL_GPIO_Init+0x236>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a55      	ldr	r2, [pc, #340]	; (8002d80 <HAL_GPIO_Init+0x338>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d025      	beq.n	8002c7a <HAL_GPIO_Init+0x232>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a54      	ldr	r2, [pc, #336]	; (8002d84 <HAL_GPIO_Init+0x33c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01f      	beq.n	8002c76 <HAL_GPIO_Init+0x22e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a53      	ldr	r2, [pc, #332]	; (8002d88 <HAL_GPIO_Init+0x340>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x22a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_GPIO_Init+0x344>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x226>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a51      	ldr	r2, [pc, #324]	; (8002d90 <HAL_GPIO_Init+0x348>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x222>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a50      	ldr	r2, [pc, #320]	; (8002d94 <HAL_GPIO_Init+0x34c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x21e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4f      	ldr	r2, [pc, #316]	; (8002d98 <HAL_GPIO_Init+0x350>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x21a>
 8002c5e:	2309      	movs	r3, #9
 8002c60:	e012      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c62:	230a      	movs	r3, #10
 8002c64:	e010      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c66:	2308      	movs	r3, #8
 8002c68:	e00e      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	e00c      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c6e:	2306      	movs	r3, #6
 8002c70:	e00a      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c72:	2305      	movs	r3, #5
 8002c74:	e008      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c76:	2304      	movs	r3, #4
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e004      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c86:	2300      	movs	r3, #0
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	f002 0203 	and.w	r2, r2, #3
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4093      	lsls	r3, r2
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c98:	4935      	ldr	r1, [pc, #212]	; (8002d70 <HAL_GPIO_Init+0x328>)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_GPIO_Init+0x354>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cca:	4a34      	ldr	r2, [pc, #208]	; (8002d9c <HAL_GPIO_Init+0x354>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd0:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <HAL_GPIO_Init+0x354>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf4:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <HAL_GPIO_Init+0x354>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cfa:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_GPIO_Init+0x354>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d1e:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_GPIO_Init+0x354>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_GPIO_Init+0x354>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d48:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <HAL_GPIO_Init+0x354>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	f67f ae84 	bls.w	8002a64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40013800 	.word	0x40013800
 8002d74:	40020000 	.word	0x40020000
 8002d78:	40020400 	.word	0x40020400
 8002d7c:	40020800 	.word	0x40020800
 8002d80:	40020c00 	.word	0x40020c00
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40021400 	.word	0x40021400
 8002d8c:	40021800 	.word	0x40021800
 8002d90:	40021c00 	.word	0x40021c00
 8002d94:	40022000 	.word	0x40022000
 8002d98:	40022400 	.word	0x40022400
 8002d9c:	40013c00 	.word	0x40013c00

08002da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
 8002dac:	4613      	mov	r3, r2
 8002dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db0:	787b      	ldrb	r3, [r7, #1]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dbc:	e003      	b.n	8002dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	041a      	lsls	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	619a      	str	r2, [r3, #24]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e267      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d075      	beq.n	8002ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002df2:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d00c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfe:	4b85      	ldr	r3, [pc, #532]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d112      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0a:	4b82      	ldr	r3, [pc, #520]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e16:	d10b      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	4b7e      	ldr	r3, [pc, #504]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d05b      	beq.n	8002edc <HAL_RCC_OscConfig+0x108>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d157      	bne.n	8002edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e242      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_OscConfig+0x74>
 8002e3a:	4b76      	ldr	r3, [pc, #472]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a75      	ldr	r2, [pc, #468]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e01d      	b.n	8002e84 <HAL_RCC_OscConfig+0xb0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x98>
 8002e52:	4b70      	ldr	r3, [pc, #448]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6f      	ldr	r2, [pc, #444]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b6d      	ldr	r3, [pc, #436]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a6c      	ldr	r2, [pc, #432]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0xb0>
 8002e6c:	4b69      	ldr	r3, [pc, #420]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a68      	ldr	r2, [pc, #416]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b66      	ldr	r3, [pc, #408]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a65      	ldr	r2, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fc76 	bl	800177c <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe fc72 	bl	800177c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e207      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	4b5b      	ldr	r3, [pc, #364]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0xc0>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fc62 	bl	800177c <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7fe fc5e 	bl	800177c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e1f3      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	4b51      	ldr	r3, [pc, #324]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0xe8>
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d063      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eea:	4b4a      	ldr	r3, [pc, #296]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d11c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f02:	4b44      	ldr	r3, [pc, #272]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d116      	bne.n	8002f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_RCC_OscConfig+0x152>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e1c7      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4937      	ldr	r1, [pc, #220]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3a:	e03a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f44:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_RCC_OscConfig+0x244>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fc17 	bl	800177c <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fe fc13 	bl	800177c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e1a8      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f70:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4925      	ldr	r1, [pc, #148]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]
 8002f84:	e015      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCC_OscConfig+0x244>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fbf6 	bl	800177c <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f94:	f7fe fbf2 	bl	800177c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e187      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d036      	beq.n	800302c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d016      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_RCC_OscConfig+0x248>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fe fbd6 	bl	800177c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd4:	f7fe fbd2 	bl	800177c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e167      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x200>
 8002ff2:	e01b      	b.n	800302c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_RCC_OscConfig+0x248>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fbbf 	bl	800177c <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003000:	e00e      	b.n	8003020 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003002:	f7fe fbbb 	bl	800177c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d907      	bls.n	8003020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e150      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
 8003014:	40023800 	.word	0x40023800
 8003018:	42470000 	.word	0x42470000
 800301c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	4b88      	ldr	r3, [pc, #544]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ea      	bne.n	8003002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8097 	beq.w	8003168 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303e:	4b81      	ldr	r3, [pc, #516]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10f      	bne.n	800306a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	4b7d      	ldr	r3, [pc, #500]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a7c      	ldr	r2, [pc, #496]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 8003054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b7a      	ldr	r3, [pc, #488]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306a:	4b77      	ldr	r3, [pc, #476]	; (8003248 <HAL_RCC_OscConfig+0x474>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d118      	bne.n	80030a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003076:	4b74      	ldr	r3, [pc, #464]	; (8003248 <HAL_RCC_OscConfig+0x474>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a73      	ldr	r2, [pc, #460]	; (8003248 <HAL_RCC_OscConfig+0x474>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003082:	f7fe fb7b 	bl	800177c <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308a:	f7fe fb77 	bl	800177c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e10c      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <HAL_RCC_OscConfig+0x474>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x2ea>
 80030b0:	4b64      	ldr	r3, [pc, #400]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	4a63      	ldr	r2, [pc, #396]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6713      	str	r3, [r2, #112]	; 0x70
 80030bc:	e01c      	b.n	80030f8 <HAL_RCC_OscConfig+0x324>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x30c>
 80030c6:	4b5f      	ldr	r3, [pc, #380]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	4a5e      	ldr	r2, [pc, #376]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70
 80030d2:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	4a5b      	ldr	r2, [pc, #364]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0x324>
 80030e0:	4b58      	ldr	r3, [pc, #352]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a57      	ldr	r2, [pc, #348]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
 80030ec:	4b55      	ldr	r3, [pc, #340]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a54      	ldr	r2, [pc, #336]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80030f2:	f023 0304 	bic.w	r3, r3, #4
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d015      	beq.n	800312c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe fb3c 	bl	800177c <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003106:	e00a      	b.n	800311e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fe fb38 	bl	800177c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0cb      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311e:	4b49      	ldr	r3, [pc, #292]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0ee      	beq.n	8003108 <HAL_RCC_OscConfig+0x334>
 800312a:	e014      	b.n	8003156 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312c:	f7fe fb26 	bl	800177c <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003132:	e00a      	b.n	800314a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7fe fb22 	bl	800177c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e0b5      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314a:	4b3e      	ldr	r3, [pc, #248]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1ee      	bne.n	8003134 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	4a38      	ldr	r2, [pc, #224]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 8003162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003166:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80a1 	beq.w	80032b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b08      	cmp	r3, #8
 800317c:	d05c      	beq.n	8003238 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d141      	bne.n	800320a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_RCC_OscConfig+0x478>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe faf6 	bl	800177c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe faf2 	bl	800177c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e087      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	019b      	lsls	r3, r3, #6
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	3b01      	subs	r3, #1
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	061b      	lsls	r3, r3, #24
 80031d6:	491b      	ldr	r1, [pc, #108]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x478>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fe facb 	bl	800177c <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ea:	f7fe fac7 	bl	800177c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e05c      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x416>
 8003208:	e054      	b.n	80032b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <HAL_RCC_OscConfig+0x478>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe fab4 	bl	800177c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003218:	f7fe fab0 	bl	800177c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e045      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_RCC_OscConfig+0x470>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x444>
 8003236:	e03d      	b.n	80032b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d107      	bne.n	8003250 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e038      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
 8003244:	40023800 	.word	0x40023800
 8003248:	40007000 	.word	0x40007000
 800324c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_RCC_OscConfig+0x4ec>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d028      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d121      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d11a      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003280:	4013      	ands	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003288:	4293      	cmp	r3, r2
 800328a:	d111      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	3b01      	subs	r3, #1
 800329a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800

080032c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0cc      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d90c      	bls.n	8003300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b65      	ldr	r3, [pc, #404]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b63      	ldr	r3, [pc, #396]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0b8      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003318:	4b59      	ldr	r3, [pc, #356]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a58      	ldr	r2, [pc, #352]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003330:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a52      	ldr	r2, [pc, #328]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800333a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333c:	4b50      	ldr	r3, [pc, #320]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	494d      	ldr	r1, [pc, #308]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d044      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d107      	bne.n	8003372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b47      	ldr	r3, [pc, #284]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d119      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e07f      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d003      	beq.n	8003382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337e:	2b03      	cmp	r3, #3
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e06f      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003392:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e067      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a2:	4b37      	ldr	r3, [pc, #220]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f023 0203 	bic.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4934      	ldr	r1, [pc, #208]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b4:	f7fe f9e2 	bl	800177c <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fe f9de 	bl	800177c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e04f      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 020c 	and.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1eb      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e4:	4b25      	ldr	r3, [pc, #148]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d20c      	bcs.n	800340c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e032      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4916      	ldr	r1, [pc, #88]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	490e      	ldr	r1, [pc, #56]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800344a:	f000 f821 	bl	8003490 <HAL_RCC_GetSysClockFreq>
 800344e:	4602      	mov	r2, r0
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	490a      	ldr	r1, [pc, #40]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 800345c:	5ccb      	ldrb	r3, [r1, r3]
 800345e:	fa22 f303 	lsr.w	r3, r2, r3
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe f942 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023c00 	.word	0x40023c00
 8003480:	40023800 	.word	0x40023800
 8003484:	08006248 	.word	0x08006248
 8003488:	20000000 	.word	0x20000000
 800348c:	20000004 	.word	0x20000004

08003490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b094      	sub	sp, #80	; 0x50
 8003496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	647b      	str	r3, [r7, #68]	; 0x44
 800349c:	2300      	movs	r3, #0
 800349e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a0:	2300      	movs	r3, #0
 80034a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d00d      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x40>
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	f200 80e1 	bhi.w	800367c <HAL_RCC_GetSysClockFreq+0x1ec>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x34>
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d003      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x3a>
 80034c2:	e0db      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c4:	4b73      	ldr	r3, [pc, #460]	; (8003694 <HAL_RCC_GetSysClockFreq+0x204>)
 80034c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034c8:	e0db      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ca:	4b73      	ldr	r3, [pc, #460]	; (8003698 <HAL_RCC_GetSysClockFreq+0x208>)
 80034cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ce:	e0d8      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d0:	4b6f      	ldr	r3, [pc, #444]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034da:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e6:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	099b      	lsrs	r3, r3, #6
 80034ec:	2200      	movs	r2, #0
 80034ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
 80034fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003502:	4622      	mov	r2, r4
 8003504:	462b      	mov	r3, r5
 8003506:	f04f 0000 	mov.w	r0, #0
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	0159      	lsls	r1, r3, #5
 8003510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003514:	0150      	lsls	r0, r2, #5
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4621      	mov	r1, r4
 800351c:	1a51      	subs	r1, r2, r1
 800351e:	6139      	str	r1, [r7, #16]
 8003520:	4629      	mov	r1, r5
 8003522:	eb63 0301 	sbc.w	r3, r3, r1
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003534:	4659      	mov	r1, fp
 8003536:	018b      	lsls	r3, r1, #6
 8003538:	4651      	mov	r1, sl
 800353a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800353e:	4651      	mov	r1, sl
 8003540:	018a      	lsls	r2, r1, #6
 8003542:	4651      	mov	r1, sl
 8003544:	ebb2 0801 	subs.w	r8, r2, r1
 8003548:	4659      	mov	r1, fp
 800354a:	eb63 0901 	sbc.w	r9, r3, r1
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800355a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800355e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003562:	4690      	mov	r8, r2
 8003564:	4699      	mov	r9, r3
 8003566:	4623      	mov	r3, r4
 8003568:	eb18 0303 	adds.w	r3, r8, r3
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	462b      	mov	r3, r5
 8003570:	eb49 0303 	adc.w	r3, r9, r3
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003582:	4629      	mov	r1, r5
 8003584:	024b      	lsls	r3, r1, #9
 8003586:	4621      	mov	r1, r4
 8003588:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800358c:	4621      	mov	r1, r4
 800358e:	024a      	lsls	r2, r1, #9
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003596:	2200      	movs	r2, #0
 8003598:	62bb      	str	r3, [r7, #40]	; 0x28
 800359a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800359c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035a0:	f7fc fe76 	bl	8000290 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4613      	mov	r3, r2
 80035aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ac:	e058      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ae:	4b38      	ldr	r3, [pc, #224]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	2200      	movs	r2, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	4611      	mov	r1, r2
 80035ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
 80035c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	f04f 0000 	mov.w	r0, #0
 80035d0:	f04f 0100 	mov.w	r1, #0
 80035d4:	0159      	lsls	r1, r3, #5
 80035d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035da:	0150      	lsls	r0, r2, #5
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4641      	mov	r1, r8
 80035e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80035e6:	4649      	mov	r1, r9
 80035e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003600:	ebb2 040a 	subs.w	r4, r2, sl
 8003604:	eb63 050b 	sbc.w	r5, r3, fp
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	00eb      	lsls	r3, r5, #3
 8003612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003616:	00e2      	lsls	r2, r4, #3
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	4643      	mov	r3, r8
 800361e:	18e3      	adds	r3, r4, r3
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	464b      	mov	r3, r9
 8003624:	eb45 0303 	adc.w	r3, r5, r3
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003636:	4629      	mov	r1, r5
 8003638:	028b      	lsls	r3, r1, #10
 800363a:	4621      	mov	r1, r4
 800363c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003640:	4621      	mov	r1, r4
 8003642:	028a      	lsls	r2, r1, #10
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364a:	2200      	movs	r2, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	61fa      	str	r2, [r7, #28]
 8003650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003654:	f7fc fe1c 	bl	8000290 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800367a:	e002      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetSysClockFreq+0x204>)
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003684:	4618      	mov	r0, r3
 8003686:	3750      	adds	r7, #80	; 0x50
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	00f42400 	.word	0x00f42400
 8003698:	007a1200 	.word	0x007a1200

0800369c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000000 	.word	0x20000000

080036b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036b8:	f7ff fff0 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0a9b      	lsrs	r3, r3, #10
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08006258 	.word	0x08006258

080036dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036e0:	f7ff ffdc 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0b5b      	lsrs	r3, r3, #13
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	08006258 	.word	0x08006258

08003704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e07b      	b.n	800380e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2b00      	cmp	r3, #0
 800371c:	d108      	bne.n	8003730 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003726:	d009      	beq.n	800373c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	61da      	str	r2, [r3, #28]
 800372e:	e005      	b.n	800373c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fd fdbe 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003772:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c0:	ea42 0103 	orr.w	r1, r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	f003 0104 	and.w	r1, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0210 	and.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b088      	sub	sp, #32
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_SPI_Transmit+0x22>
 8003834:	2302      	movs	r3, #2
 8003836:	e126      	b.n	8003a86 <HAL_SPI_Transmit+0x270>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003840:	f7fd ff9c 	bl	800177c <HAL_GetTick>
 8003844:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d002      	beq.n	800385c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	77fb      	strb	r3, [r7, #31]
    goto error;
 800385a:	e10b      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_SPI_Transmit+0x52>
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800386c:	e102      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2203      	movs	r2, #3
 8003872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b4:	d10f      	bne.n	80038d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d007      	beq.n	80038f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fc:	d14b      	bne.n	8003996 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_SPI_Transmit+0xf6>
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d13e      	bne.n	800398a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003930:	e02b      	b.n	800398a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d112      	bne.n	8003966 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	86da      	strh	r2, [r3, #54]	; 0x36
 8003964:	e011      	b.n	800398a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003966:	f7fd ff09 	bl	800177c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d803      	bhi.n	800397e <HAL_SPI_Transmit+0x168>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d102      	bne.n	8003984 <HAL_SPI_Transmit+0x16e>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003988:	e074      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ce      	bne.n	8003932 <HAL_SPI_Transmit+0x11c>
 8003994:	e04c      	b.n	8003a30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Transmit+0x18e>
 800399e:	8afb      	ldrh	r3, [r7, #22]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d140      	bne.n	8003a26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039ca:	e02c      	b.n	8003a26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d113      	bne.n	8003a02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a00:	e011      	b.n	8003a26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a02:	f7fd febb 	bl	800177c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d803      	bhi.n	8003a1a <HAL_SPI_Transmit+0x204>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d102      	bne.n	8003a20 <HAL_SPI_Transmit+0x20a>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a24:	e026      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1cd      	bne.n	80039cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	6839      	ldr	r1, [r7, #0]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fbcb 	bl	80041d0 <SPI_EndRxTxTransaction>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e000      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b088      	sub	sp, #32
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aaa:	d112      	bne.n	8003ad2 <HAL_SPI_Receive+0x44>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10e      	bne.n	8003ad2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003abc:	88fa      	ldrh	r2, [r7, #6]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f8f1 	bl	8003cb0 <HAL_SPI_TransmitReceive>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	e0ea      	b.n	8003ca8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_SPI_Receive+0x52>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e0e3      	b.n	8003ca8 <HAL_SPI_Receive+0x21a>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ae8:	f7fd fe48 	bl	800177c <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d002      	beq.n	8003b00 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
 8003afc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003afe:	e0ca      	b.n	8003c96 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_Receive+0x7e>
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b10:	e0c1      	b.n	8003c96 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2204      	movs	r2, #4
 8003b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d10f      	bne.n	8003b7a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d007      	beq.n	8003b98 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d162      	bne.n	8003c66 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ba0:	e02e      	b.n	8003c00 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d115      	bne.n	8003bdc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f103 020c 	add.w	r2, r3, #12
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bda:	e011      	b.n	8003c00 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bdc:	f7fd fdce 	bl	800177c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d803      	bhi.n	8003bf4 <HAL_SPI_Receive+0x166>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	d102      	bne.n	8003bfa <HAL_SPI_Receive+0x16c>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d102      	bne.n	8003c00 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bfe:	e04a      	b.n	8003c96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1cb      	bne.n	8003ba2 <HAL_SPI_Receive+0x114>
 8003c0a:	e031      	b.n	8003c70 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d113      	bne.n	8003c42 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	b292      	uxth	r2, r2
 8003c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	1c9a      	adds	r2, r3, #2
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c40:	e011      	b.n	8003c66 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c42:	f7fd fd9b 	bl	800177c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d803      	bhi.n	8003c5a <HAL_SPI_Receive+0x1cc>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d102      	bne.n	8003c60 <HAL_SPI_Receive+0x1d2>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c64:	e017      	b.n	8003c96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1cd      	bne.n	8003c0c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	6839      	ldr	r1, [r7, #0]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fa45 	bl	8004104 <SPI_EndRxTransaction>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
 8003c92:	e000      	b.n	8003c96 <HAL_SPI_Receive+0x208>
  }

error :
 8003c94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08c      	sub	sp, #48	; 0x30
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x26>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e18a      	b.n	8003fec <HAL_SPI_TransmitReceive+0x33c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cde:	f7fd fd4d 	bl	800177c <HAL_GetTick>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d00f      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x70>
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d06:	d107      	bne.n	8003d18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d103      	bne.n	8003d18 <HAL_SPI_TransmitReceive+0x68>
 8003d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d003      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d1e:	e15b      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x82>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x82>
 8003d2c:	887b      	ldrh	r3, [r7, #2]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d38:	e14e      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d003      	beq.n	8003d4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2205      	movs	r2, #5
 8003d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	887a      	ldrh	r2, [r7, #2]
 8003d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	887a      	ldrh	r2, [r7, #2]
 8003d70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	887a      	ldrh	r2, [r7, #2]
 8003d76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d007      	beq.n	8003da2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003daa:	d178      	bne.n	8003e9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_TransmitReceive+0x10a>
 8003db4:	8b7b      	ldrh	r3, [r7, #26]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d166      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dde:	e053      	b.n	8003e88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d11b      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x176>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d016      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x176>
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d113      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	881a      	ldrh	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	1c9a      	adds	r2, r3, #2
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d119      	bne.n	8003e68 <HAL_SPI_TransmitReceive+0x1b8>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d014      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	b292      	uxth	r2, r2
 8003e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e64:	2301      	movs	r3, #1
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e68:	f7fd fc88 	bl	800177c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d807      	bhi.n	8003e88 <HAL_SPI_TransmitReceive+0x1d8>
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d003      	beq.n	8003e88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e86:	e0a7      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1a6      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x130>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1a1      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x130>
 8003e9c:	e07c      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x1fc>
 8003ea6:	8b7b      	ldrh	r3, [r7, #26]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d16b      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed2:	e057      	b.n	8003f84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d11c      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x26c>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d017      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x26c>
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d114      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d119      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x2ae>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d014      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f5e:	f7fd fc0d 	bl	800177c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d803      	bhi.n	8003f76 <HAL_SPI_TransmitReceive+0x2c6>
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d102      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x2cc>
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f82:	e029      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1a2      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x224>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d19d      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f917 	bl	80041d0 <SPI_EndRxTxTransaction>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003fb4:	e010      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	e000      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3730      	adds	r7, #48	; 0x30
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004004:	f7fd fbba 	bl	800177c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	4413      	add	r3, r2
 8004012:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004014:	f7fd fbb2 	bl	800177c <HAL_GetTick>
 8004018:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800401a:	4b39      	ldr	r3, [pc, #228]	; (8004100 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	015b      	lsls	r3, r3, #5
 8004020:	0d1b      	lsrs	r3, r3, #20
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800402a:	e054      	b.n	80040d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004032:	d050      	beq.n	80040d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004034:	f7fd fba2 	bl	800177c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	429a      	cmp	r2, r3
 8004042:	d902      	bls.n	800404a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d13d      	bne.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004058:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004062:	d111      	bne.n	8004088 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406c:	d004      	beq.n	8004078 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d107      	bne.n	8004088 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004090:	d10f      	bne.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e017      	b.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	bf0c      	ite	eq
 80040e6:	2301      	moveq	r3, #1
 80040e8:	2300      	movne	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d19b      	bne.n	800402c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000000 	.word	0x20000000

08004104 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004118:	d111      	bne.n	800413e <SPI_EndRxTransaction+0x3a>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004122:	d004      	beq.n	800412e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412c:	d107      	bne.n	800413e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004146:	d12a      	bne.n	800419e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d012      	beq.n	8004178 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2200      	movs	r2, #0
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f7ff ff49 	bl	8003ff4 <SPI_WaitFlagStateUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02d      	beq.n	80041c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e026      	b.n	80041c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2200      	movs	r2, #0
 8004180:	2101      	movs	r1, #1
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff ff36 	bl	8003ff4 <SPI_WaitFlagStateUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01a      	beq.n	80041c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f043 0220 	orr.w	r2, r3, #32
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e013      	b.n	80041c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2101      	movs	r1, #1
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7ff ff23 	bl	8003ff4 <SPI_WaitFlagStateUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e000      	b.n	80041c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041dc:	4b1b      	ldr	r3, [pc, #108]	; (800424c <SPI_EndRxTxTransaction+0x7c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <SPI_EndRxTxTransaction+0x80>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	0d5b      	lsrs	r3, r3, #21
 80041e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fa:	d112      	bne.n	8004222 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2200      	movs	r2, #0
 8004204:	2180      	movs	r1, #128	; 0x80
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff fef4 	bl	8003ff4 <SPI_WaitFlagStateUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f043 0220 	orr.w	r2, r3, #32
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e00f      	b.n	8004242 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3b01      	subs	r3, #1
 800422c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b80      	cmp	r3, #128	; 0x80
 800423a:	d0f2      	beq.n	8004222 <SPI_EndRxTxTransaction+0x52>
 800423c:	e000      	b.n	8004240 <SPI_EndRxTxTransaction+0x70>
        break;
 800423e:	bf00      	nop
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000000 	.word	0x20000000
 8004250:	165e9f81 	.word	0x165e9f81

08004254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e03f      	b.n	80042e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd f874 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fd8b 	bl	8004db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b08a      	sub	sp, #40	; 0x28
 80042f2:	af02      	add	r7, sp, #8
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	f040 808c 	bne.w	8004428 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_UART_Receive+0x2e>
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e084      	b.n	800442a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_UART_Receive+0x40>
 800432a:	2302      	movs	r3, #2
 800432c:	e07d      	b.n	800442a <HAL_UART_Receive+0x13c>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2222      	movs	r2, #34	; 0x22
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800434a:	f7fd fa17 	bl	800177c <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	88fa      	ldrh	r2, [r7, #6]
 800435a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004364:	d108      	bne.n	8004378 <HAL_UART_Receive+0x8a>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e003      	b.n	8004380 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004388:	e043      	b.n	8004412 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	2120      	movs	r1, #32
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fb05 	bl	80049a4 <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e042      	b.n	800442a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10c      	bne.n	80043c4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	3302      	adds	r3, #2
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e01f      	b.n	8004404 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	d007      	beq.n	80043de <HAL_UART_Receive+0xf0>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <HAL_UART_Receive+0xfe>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e008      	b.n	80043fe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3301      	adds	r3, #1
 8004402:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1b6      	bne.n	800438a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b0ba      	sub	sp, #232	; 0xe8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800445a:	2300      	movs	r3, #0
 800445c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004460:	2300      	movs	r3, #0
 8004462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10f      	bne.n	800449a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <HAL_UART_IRQHandler+0x66>
 8004486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fbd3 	bl	8004c3e <UART_Receive_IT>
      return;
 8004498:	e256      	b.n	8004948 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800449a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80de 	beq.w	8004660 <HAL_UART_IRQHandler+0x22c>
 80044a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80d1 	beq.w	8004660 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_UART_IRQHandler+0xae>
 80044ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f043 0201 	orr.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_UART_IRQHandler+0xd2>
 80044ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f043 0202 	orr.w	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <HAL_UART_IRQHandler+0xf6>
 8004512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f043 0204 	orr.w	r2, r3, #4
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d011      	beq.n	800455a <HAL_UART_IRQHandler+0x126>
 8004536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d105      	bne.n	800454e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f043 0208 	orr.w	r2, r3, #8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 81ed 	beq.w	800493e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_UART_IRQHandler+0x14e>
 8004570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fb5e 	bl	8004c3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d103      	bne.n	80045ae <HAL_UART_IRQHandler+0x17a>
 80045a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d04f      	beq.n	800464e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa66 	bl	8004a80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d141      	bne.n	8004646 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3314      	adds	r3, #20
 80045c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3314      	adds	r3, #20
 80045ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1d9      	bne.n	80045c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	2b00      	cmp	r3, #0
 8004614:	d013      	beq.n	800463e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	4a7d      	ldr	r2, [pc, #500]	; (8004810 <HAL_UART_IRQHandler+0x3dc>)
 800461c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	4618      	mov	r0, r3
 8004624:	f7fd ff84 	bl	8002530 <HAL_DMA_Abort_IT>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d016      	beq.n	800465c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004638:	4610      	mov	r0, r2
 800463a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800463c:	e00e      	b.n	800465c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f99a 	bl	8004978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	e00a      	b.n	800465c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f996 	bl	8004978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464c:	e006      	b.n	800465c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f992 	bl	8004978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800465a:	e170      	b.n	800493e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	bf00      	nop
    return;
 800465e:	e16e      	b.n	800493e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	2b01      	cmp	r3, #1
 8004666:	f040 814a 	bne.w	80048fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8143 	beq.w	80048fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 813c 	beq.w	80048fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	f040 80b4 	bne.w	8004814 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8140 	beq.w	8004942 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046ca:	429a      	cmp	r2, r3
 80046cc:	f080 8139 	bcs.w	8004942 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e2:	f000 8088 	beq.w	80047f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800471e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800472a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1d9      	bne.n	80046e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3314      	adds	r3, #20
 8004738:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3314      	adds	r3, #20
 8004752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004756:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800475a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800475e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e1      	bne.n	8004732 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3314      	adds	r3, #20
 8004774:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800477e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3314      	adds	r3, #20
 800478e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004792:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004794:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e3      	bne.n	800476e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c6:	f023 0310 	bic.w	r3, r3, #16
 80047ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	330c      	adds	r3, #12
 80047d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80047d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80047da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e3      	bne.n	80047b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fd fe2d 	bl	8002450 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047fe:	b29b      	uxth	r3, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	b29b      	uxth	r3, r3
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f8c0 	bl	800498c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800480c:	e099      	b.n	8004942 <HAL_UART_IRQHandler+0x50e>
 800480e:	bf00      	nop
 8004810:	08004b47 	.word	0x08004b47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800481c:	b29b      	uxth	r3, r3
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 808b 	beq.w	8004946 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8086 	beq.w	8004946 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004850:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800485e:	647a      	str	r2, [r7, #68]	; 0x44
 8004860:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e3      	bne.n	800483a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3314      	adds	r3, #20
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	623b      	str	r3, [r7, #32]
   return(result);
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3314      	adds	r3, #20
 8004892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004896:	633a      	str	r2, [r7, #48]	; 0x30
 8004898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800489c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e3      	bne.n	8004872 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0310 	bic.w	r3, r3, #16
 80048ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048dc:	61fa      	str	r2, [r7, #28]
 80048de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	69b9      	ldr	r1, [r7, #24]
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	617b      	str	r3, [r7, #20]
   return(result);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e3      	bne.n	80048b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f848 	bl	800498c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048fc:	e023      	b.n	8004946 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_UART_IRQHandler+0x4ea>
 800490a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f929 	bl	8004b6e <UART_Transmit_IT>
    return;
 800491c:	e014      	b.n	8004948 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00e      	beq.n	8004948 <HAL_UART_IRQHandler+0x514>
 800492a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f969 	bl	8004c0e <UART_EndTransmit_IT>
    return;
 800493c:	e004      	b.n	8004948 <HAL_UART_IRQHandler+0x514>
    return;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <HAL_UART_IRQHandler+0x514>
      return;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <HAL_UART_IRQHandler+0x514>
      return;
 8004946:	bf00      	nop
  }
}
 8004948:	37e8      	adds	r7, #232	; 0xe8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop

08004950 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b090      	sub	sp, #64	; 0x40
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b4:	e050      	b.n	8004a58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d04c      	beq.n	8004a58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80049c4:	f7fc feda 	bl	800177c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d241      	bcs.n	8004a58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049f4:	637a      	str	r2, [r7, #52]	; 0x34
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e5      	bne.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3314      	adds	r3, #20
 8004a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	613b      	str	r3, [r7, #16]
   return(result);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a28:	623a      	str	r2, [r7, #32]
 8004a2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	69f9      	ldr	r1, [r7, #28]
 8004a2e:	6a3a      	ldr	r2, [r7, #32]
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e00f      	b.n	8004a78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4013      	ands	r3, r2
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d09f      	beq.n	80049b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3740      	adds	r7, #64	; 0x40
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b095      	sub	sp, #84	; 0x54
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aa8:	643a      	str	r2, [r7, #64]	; 0x40
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e5      	bne.n	8004a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e5      	bne.n	8004abc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d119      	bne.n	8004b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f023 0310 	bic.w	r3, r3, #16
 8004b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b18:	61ba      	str	r2, [r7, #24]
 8004b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	613b      	str	r3, [r7, #16]
   return(result);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e5      	bne.n	8004af8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b3a:	bf00      	nop
 8004b3c:	3754      	adds	r7, #84	; 0x54
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff ff09 	bl	8004978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b21      	cmp	r3, #33	; 0x21
 8004b80:	d13e      	bne.n	8004c00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8a:	d114      	bne.n	8004bb6 <UART_Transmit_IT+0x48>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d110      	bne.n	8004bb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	1c9a      	adds	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	621a      	str	r2, [r3, #32]
 8004bb4:	e008      	b.n	8004bc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	1c59      	adds	r1, r3, #1
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6211      	str	r1, [r2, #32]
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10f      	bne.n	8004bfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff fe8e 	bl	8004950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b08c      	sub	sp, #48	; 0x30
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b22      	cmp	r3, #34	; 0x22
 8004c50:	f040 80ab 	bne.w	8004daa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d117      	bne.n	8004c8e <UART_Receive_IT+0x50>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d113      	bne.n	8004c8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	1c9a      	adds	r2, r3, #2
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c8c:	e026      	b.n	8004cdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca0:	d007      	beq.n	8004cb2 <UART_Receive_IT+0x74>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <UART_Receive_IT+0x82>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e008      	b.n	8004cd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d15a      	bne.n	8004da6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0220 	bic.w	r2, r2, #32
 8004cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d135      	bne.n	8004d9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	613b      	str	r3, [r7, #16]
   return(result);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	623a      	str	r2, [r7, #32]
 8004d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	69f9      	ldr	r1, [r7, #28]
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e5      	bne.n	8004d36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d10a      	bne.n	8004d8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fdf9 	bl	800498c <HAL_UARTEx_RxEventCallback>
 8004d9a:	e002      	b.n	8004da2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fde1 	bl	8004964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e002      	b.n	8004dac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
  }
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3730      	adds	r7, #48	; 0x30
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db8:	b0c0      	sub	sp, #256	; 0x100
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	68d9      	ldr	r1, [r3, #12]
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	ea40 0301 	orr.w	r3, r0, r1
 8004ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e0c:	f021 010c 	bic.w	r1, r1, #12
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2e:	6999      	ldr	r1, [r3, #24]
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	ea40 0301 	orr.w	r3, r0, r1
 8004e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b8f      	ldr	r3, [pc, #572]	; (8005080 <UART_SetConfig+0x2cc>)
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d005      	beq.n	8004e54 <UART_SetConfig+0xa0>
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b8d      	ldr	r3, [pc, #564]	; (8005084 <UART_SetConfig+0x2d0>)
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d104      	bne.n	8004e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e54:	f7fe fc42 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 8004e58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e5c:	e003      	b.n	8004e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e5e:	f7fe fc29 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8004e62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e70:	f040 810c 	bne.w	800508c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e86:	4622      	mov	r2, r4
 8004e88:	462b      	mov	r3, r5
 8004e8a:	1891      	adds	r1, r2, r2
 8004e8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e8e:	415b      	adcs	r3, r3
 8004e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e96:	4621      	mov	r1, r4
 8004e98:	eb12 0801 	adds.w	r8, r2, r1
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	eb43 0901 	adc.w	r9, r3, r1
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eb6:	4690      	mov	r8, r2
 8004eb8:	4699      	mov	r9, r3
 8004eba:	4623      	mov	r3, r4
 8004ebc:	eb18 0303 	adds.w	r3, r8, r3
 8004ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	eb49 0303 	adc.w	r3, r9, r3
 8004eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	18db      	adds	r3, r3, r3
 8004ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee8:	4613      	mov	r3, r2
 8004eea:	eb42 0303 	adc.w	r3, r2, r3
 8004eee:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ef8:	f7fb f9ca 	bl	8000290 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4b61      	ldr	r3, [pc, #388]	; (8005088 <UART_SetConfig+0x2d4>)
 8004f02:	fba3 2302 	umull	r2, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	011c      	lsls	r4, r3, #4
 8004f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	1891      	adds	r1, r2, r2
 8004f22:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f24:	415b      	adcs	r3, r3
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f32:	4649      	mov	r1, r9
 8004f34:	eb43 0b01 	adc.w	fp, r3, r1
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f4c:	4692      	mov	sl, r2
 8004f4e:	469b      	mov	fp, r3
 8004f50:	4643      	mov	r3, r8
 8004f52:	eb1a 0303 	adds.w	r3, sl, r3
 8004f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	18db      	adds	r3, r3, r3
 8004f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f7e:	4613      	mov	r3, r2
 8004f80:	eb42 0303 	adc.w	r3, r2, r3
 8004f84:	647b      	str	r3, [r7, #68]	; 0x44
 8004f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f8e:	f7fb f97f 	bl	8000290 <__aeabi_uldivmod>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <UART_SetConfig+0x2d4>)
 8004f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	2264      	movs	r2, #100	; 0x64
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	1acb      	subs	r3, r1, r3
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fae:	4b36      	ldr	r3, [pc, #216]	; (8005088 <UART_SetConfig+0x2d4>)
 8004fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fbc:	441c      	add	r4, r3
 8004fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	1891      	adds	r1, r2, r2
 8004fd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fd8:	415b      	adcs	r3, r3
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	1851      	adds	r1, r2, r1
 8004fe4:	6339      	str	r1, [r7, #48]	; 0x30
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	414b      	adcs	r3, r1
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	00cb      	lsls	r3, r1, #3
 8004ffc:	4651      	mov	r1, sl
 8004ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005002:	4651      	mov	r1, sl
 8005004:	00ca      	lsls	r2, r1, #3
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	4603      	mov	r3, r0
 800500c:	4642      	mov	r2, r8
 800500e:	189b      	adds	r3, r3, r2
 8005010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005014:	464b      	mov	r3, r9
 8005016:	460a      	mov	r2, r1
 8005018:	eb42 0303 	adc.w	r3, r2, r3
 800501c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800502c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005034:	460b      	mov	r3, r1
 8005036:	18db      	adds	r3, r3, r3
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
 800503a:	4613      	mov	r3, r2
 800503c:	eb42 0303 	adc.w	r3, r2, r3
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800504a:	f7fb f921 	bl	8000290 <__aeabi_uldivmod>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <UART_SetConfig+0x2d4>)
 8005054:	fba3 1302 	umull	r1, r3, r3, r2
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	2164      	movs	r1, #100	; 0x64
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	3332      	adds	r3, #50	; 0x32
 8005066:	4a08      	ldr	r2, [pc, #32]	; (8005088 <UART_SetConfig+0x2d4>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	f003 0207 	and.w	r2, r3, #7
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4422      	add	r2, r4
 800507a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800507c:	e105      	b.n	800528a <UART_SetConfig+0x4d6>
 800507e:	bf00      	nop
 8005080:	40011000 	.word	0x40011000
 8005084:	40011400 	.word	0x40011400
 8005088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800508c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005096:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800509a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800509e:	4642      	mov	r2, r8
 80050a0:	464b      	mov	r3, r9
 80050a2:	1891      	adds	r1, r2, r2
 80050a4:	6239      	str	r1, [r7, #32]
 80050a6:	415b      	adcs	r3, r3
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ae:	4641      	mov	r1, r8
 80050b0:	1854      	adds	r4, r2, r1
 80050b2:	4649      	mov	r1, r9
 80050b4:	eb43 0501 	adc.w	r5, r3, r1
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	00eb      	lsls	r3, r5, #3
 80050c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050c6:	00e2      	lsls	r2, r4, #3
 80050c8:	4614      	mov	r4, r2
 80050ca:	461d      	mov	r5, r3
 80050cc:	4643      	mov	r3, r8
 80050ce:	18e3      	adds	r3, r4, r3
 80050d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050d4:	464b      	mov	r3, r9
 80050d6:	eb45 0303 	adc.w	r3, r5, r3
 80050da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050fa:	4629      	mov	r1, r5
 80050fc:	008b      	lsls	r3, r1, #2
 80050fe:	4621      	mov	r1, r4
 8005100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005104:	4621      	mov	r1, r4
 8005106:	008a      	lsls	r2, r1, #2
 8005108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800510c:	f7fb f8c0 	bl	8000290 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4b60      	ldr	r3, [pc, #384]	; (8005298 <UART_SetConfig+0x4e4>)
 8005116:	fba3 2302 	umull	r2, r3, r3, r2
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	011c      	lsls	r4, r3, #4
 800511e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005122:	2200      	movs	r2, #0
 8005124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005128:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800512c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005130:	4642      	mov	r2, r8
 8005132:	464b      	mov	r3, r9
 8005134:	1891      	adds	r1, r2, r2
 8005136:	61b9      	str	r1, [r7, #24]
 8005138:	415b      	adcs	r3, r3
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005140:	4641      	mov	r1, r8
 8005142:	1851      	adds	r1, r2, r1
 8005144:	6139      	str	r1, [r7, #16]
 8005146:	4649      	mov	r1, r9
 8005148:	414b      	adcs	r3, r1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005158:	4659      	mov	r1, fp
 800515a:	00cb      	lsls	r3, r1, #3
 800515c:	4651      	mov	r1, sl
 800515e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005162:	4651      	mov	r1, sl
 8005164:	00ca      	lsls	r2, r1, #3
 8005166:	4610      	mov	r0, r2
 8005168:	4619      	mov	r1, r3
 800516a:	4603      	mov	r3, r0
 800516c:	4642      	mov	r2, r8
 800516e:	189b      	adds	r3, r3, r2
 8005170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005174:	464b      	mov	r3, r9
 8005176:	460a      	mov	r2, r1
 8005178:	eb42 0303 	adc.w	r3, r2, r3
 800517c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	67bb      	str	r3, [r7, #120]	; 0x78
 800518a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005198:	4649      	mov	r1, r9
 800519a:	008b      	lsls	r3, r1, #2
 800519c:	4641      	mov	r1, r8
 800519e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a2:	4641      	mov	r1, r8
 80051a4:	008a      	lsls	r2, r1, #2
 80051a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051aa:	f7fb f871 	bl	8000290 <__aeabi_uldivmod>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4b39      	ldr	r3, [pc, #228]	; (8005298 <UART_SetConfig+0x4e4>)
 80051b4:	fba3 1302 	umull	r1, r3, r3, r2
 80051b8:	095b      	lsrs	r3, r3, #5
 80051ba:	2164      	movs	r1, #100	; 0x64
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	3332      	adds	r3, #50	; 0x32
 80051c6:	4a34      	ldr	r2, [pc, #208]	; (8005298 <UART_SetConfig+0x4e4>)
 80051c8:	fba2 2303 	umull	r2, r3, r2, r3
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d2:	441c      	add	r4, r3
 80051d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d8:	2200      	movs	r2, #0
 80051da:	673b      	str	r3, [r7, #112]	; 0x70
 80051dc:	677a      	str	r2, [r7, #116]	; 0x74
 80051de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051e2:	4642      	mov	r2, r8
 80051e4:	464b      	mov	r3, r9
 80051e6:	1891      	adds	r1, r2, r2
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	415b      	adcs	r3, r3
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051f2:	4641      	mov	r1, r8
 80051f4:	1851      	adds	r1, r2, r1
 80051f6:	6039      	str	r1, [r7, #0]
 80051f8:	4649      	mov	r1, r9
 80051fa:	414b      	adcs	r3, r1
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800520a:	4659      	mov	r1, fp
 800520c:	00cb      	lsls	r3, r1, #3
 800520e:	4651      	mov	r1, sl
 8005210:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005214:	4651      	mov	r1, sl
 8005216:	00ca      	lsls	r2, r1, #3
 8005218:	4610      	mov	r0, r2
 800521a:	4619      	mov	r1, r3
 800521c:	4603      	mov	r3, r0
 800521e:	4642      	mov	r2, r8
 8005220:	189b      	adds	r3, r3, r2
 8005222:	66bb      	str	r3, [r7, #104]	; 0x68
 8005224:	464b      	mov	r3, r9
 8005226:	460a      	mov	r2, r1
 8005228:	eb42 0303 	adc.w	r3, r2, r3
 800522c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	663b      	str	r3, [r7, #96]	; 0x60
 8005238:	667a      	str	r2, [r7, #100]	; 0x64
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005246:	4649      	mov	r1, r9
 8005248:	008b      	lsls	r3, r1, #2
 800524a:	4641      	mov	r1, r8
 800524c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005250:	4641      	mov	r1, r8
 8005252:	008a      	lsls	r2, r1, #2
 8005254:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005258:	f7fb f81a 	bl	8000290 <__aeabi_uldivmod>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <UART_SetConfig+0x4e4>)
 8005262:	fba3 1302 	umull	r1, r3, r3, r2
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2164      	movs	r1, #100	; 0x64
 800526a:	fb01 f303 	mul.w	r3, r1, r3
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	3332      	adds	r3, #50	; 0x32
 8005274:	4a08      	ldr	r2, [pc, #32]	; (8005298 <UART_SetConfig+0x4e4>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	f003 020f 	and.w	r2, r3, #15
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4422      	add	r2, r4
 8005288:	609a      	str	r2, [r3, #8]
}
 800528a:	bf00      	nop
 800528c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005290:	46bd      	mov	sp, r7
 8005292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005296:	bf00      	nop
 8005298:	51eb851f 	.word	0x51eb851f

0800529c <__errno>:
 800529c:	4b01      	ldr	r3, [pc, #4]	; (80052a4 <__errno+0x8>)
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	2000000c 	.word	0x2000000c

080052a8 <__libc_init_array>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4d0d      	ldr	r5, [pc, #52]	; (80052e0 <__libc_init_array+0x38>)
 80052ac:	4c0d      	ldr	r4, [pc, #52]	; (80052e4 <__libc_init_array+0x3c>)
 80052ae:	1b64      	subs	r4, r4, r5
 80052b0:	10a4      	asrs	r4, r4, #2
 80052b2:	2600      	movs	r6, #0
 80052b4:	42a6      	cmp	r6, r4
 80052b6:	d109      	bne.n	80052cc <__libc_init_array+0x24>
 80052b8:	4d0b      	ldr	r5, [pc, #44]	; (80052e8 <__libc_init_array+0x40>)
 80052ba:	4c0c      	ldr	r4, [pc, #48]	; (80052ec <__libc_init_array+0x44>)
 80052bc:	f000 ffae 	bl	800621c <_init>
 80052c0:	1b64      	subs	r4, r4, r5
 80052c2:	10a4      	asrs	r4, r4, #2
 80052c4:	2600      	movs	r6, #0
 80052c6:	42a6      	cmp	r6, r4
 80052c8:	d105      	bne.n	80052d6 <__libc_init_array+0x2e>
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d0:	4798      	blx	r3
 80052d2:	3601      	adds	r6, #1
 80052d4:	e7ee      	b.n	80052b4 <__libc_init_array+0xc>
 80052d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052da:	4798      	blx	r3
 80052dc:	3601      	adds	r6, #1
 80052de:	e7f2      	b.n	80052c6 <__libc_init_array+0x1e>
 80052e0:	08006308 	.word	0x08006308
 80052e4:	08006308 	.word	0x08006308
 80052e8:	08006308 	.word	0x08006308
 80052ec:	0800630c 	.word	0x0800630c

080052f0 <memset>:
 80052f0:	4402      	add	r2, r0
 80052f2:	4603      	mov	r3, r0
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d100      	bne.n	80052fa <memset+0xa>
 80052f8:	4770      	bx	lr
 80052fa:	f803 1b01 	strb.w	r1, [r3], #1
 80052fe:	e7f9      	b.n	80052f4 <memset+0x4>

08005300 <iprintf>:
 8005300:	b40f      	push	{r0, r1, r2, r3}
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <iprintf+0x2c>)
 8005304:	b513      	push	{r0, r1, r4, lr}
 8005306:	681c      	ldr	r4, [r3, #0]
 8005308:	b124      	cbz	r4, 8005314 <iprintf+0x14>
 800530a:	69a3      	ldr	r3, [r4, #24]
 800530c:	b913      	cbnz	r3, 8005314 <iprintf+0x14>
 800530e:	4620      	mov	r0, r4
 8005310:	f000 f9e8 	bl	80056e4 <__sinit>
 8005314:	ab05      	add	r3, sp, #20
 8005316:	9a04      	ldr	r2, [sp, #16]
 8005318:	68a1      	ldr	r1, [r4, #8]
 800531a:	9301      	str	r3, [sp, #4]
 800531c:	4620      	mov	r0, r4
 800531e:	f000 fbf1 	bl	8005b04 <_vfiprintf_r>
 8005322:	b002      	add	sp, #8
 8005324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005328:	b004      	add	sp, #16
 800532a:	4770      	bx	lr
 800532c:	2000000c 	.word	0x2000000c

08005330 <__swbuf_r>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	460e      	mov	r6, r1
 8005334:	4614      	mov	r4, r2
 8005336:	4605      	mov	r5, r0
 8005338:	b118      	cbz	r0, 8005342 <__swbuf_r+0x12>
 800533a:	6983      	ldr	r3, [r0, #24]
 800533c:	b90b      	cbnz	r3, 8005342 <__swbuf_r+0x12>
 800533e:	f000 f9d1 	bl	80056e4 <__sinit>
 8005342:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <__swbuf_r+0x98>)
 8005344:	429c      	cmp	r4, r3
 8005346:	d12b      	bne.n	80053a0 <__swbuf_r+0x70>
 8005348:	686c      	ldr	r4, [r5, #4]
 800534a:	69a3      	ldr	r3, [r4, #24]
 800534c:	60a3      	str	r3, [r4, #8]
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	071a      	lsls	r2, r3, #28
 8005352:	d52f      	bpl.n	80053b4 <__swbuf_r+0x84>
 8005354:	6923      	ldr	r3, [r4, #16]
 8005356:	b36b      	cbz	r3, 80053b4 <__swbuf_r+0x84>
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	6820      	ldr	r0, [r4, #0]
 800535c:	1ac0      	subs	r0, r0, r3
 800535e:	6963      	ldr	r3, [r4, #20]
 8005360:	b2f6      	uxtb	r6, r6
 8005362:	4283      	cmp	r3, r0
 8005364:	4637      	mov	r7, r6
 8005366:	dc04      	bgt.n	8005372 <__swbuf_r+0x42>
 8005368:	4621      	mov	r1, r4
 800536a:	4628      	mov	r0, r5
 800536c:	f000 f926 	bl	80055bc <_fflush_r>
 8005370:	bb30      	cbnz	r0, 80053c0 <__swbuf_r+0x90>
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	3b01      	subs	r3, #1
 8005376:	60a3      	str	r3, [r4, #8]
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	6022      	str	r2, [r4, #0]
 800537e:	701e      	strb	r6, [r3, #0]
 8005380:	6963      	ldr	r3, [r4, #20]
 8005382:	3001      	adds	r0, #1
 8005384:	4283      	cmp	r3, r0
 8005386:	d004      	beq.n	8005392 <__swbuf_r+0x62>
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	07db      	lsls	r3, r3, #31
 800538c:	d506      	bpl.n	800539c <__swbuf_r+0x6c>
 800538e:	2e0a      	cmp	r6, #10
 8005390:	d104      	bne.n	800539c <__swbuf_r+0x6c>
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 f911 	bl	80055bc <_fflush_r>
 800539a:	b988      	cbnz	r0, 80053c0 <__swbuf_r+0x90>
 800539c:	4638      	mov	r0, r7
 800539e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <__swbuf_r+0x9c>)
 80053a2:	429c      	cmp	r4, r3
 80053a4:	d101      	bne.n	80053aa <__swbuf_r+0x7a>
 80053a6:	68ac      	ldr	r4, [r5, #8]
 80053a8:	e7cf      	b.n	800534a <__swbuf_r+0x1a>
 80053aa:	4b09      	ldr	r3, [pc, #36]	; (80053d0 <__swbuf_r+0xa0>)
 80053ac:	429c      	cmp	r4, r3
 80053ae:	bf08      	it	eq
 80053b0:	68ec      	ldreq	r4, [r5, #12]
 80053b2:	e7ca      	b.n	800534a <__swbuf_r+0x1a>
 80053b4:	4621      	mov	r1, r4
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 f80c 	bl	80053d4 <__swsetup_r>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d0cb      	beq.n	8005358 <__swbuf_r+0x28>
 80053c0:	f04f 37ff 	mov.w	r7, #4294967295
 80053c4:	e7ea      	b.n	800539c <__swbuf_r+0x6c>
 80053c6:	bf00      	nop
 80053c8:	0800628c 	.word	0x0800628c
 80053cc:	080062ac 	.word	0x080062ac
 80053d0:	0800626c 	.word	0x0800626c

080053d4 <__swsetup_r>:
 80053d4:	4b32      	ldr	r3, [pc, #200]	; (80054a0 <__swsetup_r+0xcc>)
 80053d6:	b570      	push	{r4, r5, r6, lr}
 80053d8:	681d      	ldr	r5, [r3, #0]
 80053da:	4606      	mov	r6, r0
 80053dc:	460c      	mov	r4, r1
 80053de:	b125      	cbz	r5, 80053ea <__swsetup_r+0x16>
 80053e0:	69ab      	ldr	r3, [r5, #24]
 80053e2:	b913      	cbnz	r3, 80053ea <__swsetup_r+0x16>
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 f97d 	bl	80056e4 <__sinit>
 80053ea:	4b2e      	ldr	r3, [pc, #184]	; (80054a4 <__swsetup_r+0xd0>)
 80053ec:	429c      	cmp	r4, r3
 80053ee:	d10f      	bne.n	8005410 <__swsetup_r+0x3c>
 80053f0:	686c      	ldr	r4, [r5, #4]
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053f8:	0719      	lsls	r1, r3, #28
 80053fa:	d42c      	bmi.n	8005456 <__swsetup_r+0x82>
 80053fc:	06dd      	lsls	r5, r3, #27
 80053fe:	d411      	bmi.n	8005424 <__swsetup_r+0x50>
 8005400:	2309      	movs	r3, #9
 8005402:	6033      	str	r3, [r6, #0]
 8005404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005408:	81a3      	strh	r3, [r4, #12]
 800540a:	f04f 30ff 	mov.w	r0, #4294967295
 800540e:	e03e      	b.n	800548e <__swsetup_r+0xba>
 8005410:	4b25      	ldr	r3, [pc, #148]	; (80054a8 <__swsetup_r+0xd4>)
 8005412:	429c      	cmp	r4, r3
 8005414:	d101      	bne.n	800541a <__swsetup_r+0x46>
 8005416:	68ac      	ldr	r4, [r5, #8]
 8005418:	e7eb      	b.n	80053f2 <__swsetup_r+0x1e>
 800541a:	4b24      	ldr	r3, [pc, #144]	; (80054ac <__swsetup_r+0xd8>)
 800541c:	429c      	cmp	r4, r3
 800541e:	bf08      	it	eq
 8005420:	68ec      	ldreq	r4, [r5, #12]
 8005422:	e7e6      	b.n	80053f2 <__swsetup_r+0x1e>
 8005424:	0758      	lsls	r0, r3, #29
 8005426:	d512      	bpl.n	800544e <__swsetup_r+0x7a>
 8005428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800542a:	b141      	cbz	r1, 800543e <__swsetup_r+0x6a>
 800542c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005430:	4299      	cmp	r1, r3
 8005432:	d002      	beq.n	800543a <__swsetup_r+0x66>
 8005434:	4630      	mov	r0, r6
 8005436:	f000 fa5b 	bl	80058f0 <_free_r>
 800543a:	2300      	movs	r3, #0
 800543c:	6363      	str	r3, [r4, #52]	; 0x34
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	2300      	movs	r3, #0
 8005448:	6063      	str	r3, [r4, #4]
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	f043 0308 	orr.w	r3, r3, #8
 8005454:	81a3      	strh	r3, [r4, #12]
 8005456:	6923      	ldr	r3, [r4, #16]
 8005458:	b94b      	cbnz	r3, 800546e <__swsetup_r+0x9a>
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005464:	d003      	beq.n	800546e <__swsetup_r+0x9a>
 8005466:	4621      	mov	r1, r4
 8005468:	4630      	mov	r0, r6
 800546a:	f000 fa01 	bl	8005870 <__smakebuf_r>
 800546e:	89a0      	ldrh	r0, [r4, #12]
 8005470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005474:	f010 0301 	ands.w	r3, r0, #1
 8005478:	d00a      	beq.n	8005490 <__swsetup_r+0xbc>
 800547a:	2300      	movs	r3, #0
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	6963      	ldr	r3, [r4, #20]
 8005480:	425b      	negs	r3, r3
 8005482:	61a3      	str	r3, [r4, #24]
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	b943      	cbnz	r3, 800549a <__swsetup_r+0xc6>
 8005488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800548c:	d1ba      	bne.n	8005404 <__swsetup_r+0x30>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	0781      	lsls	r1, r0, #30
 8005492:	bf58      	it	pl
 8005494:	6963      	ldrpl	r3, [r4, #20]
 8005496:	60a3      	str	r3, [r4, #8]
 8005498:	e7f4      	b.n	8005484 <__swsetup_r+0xb0>
 800549a:	2000      	movs	r0, #0
 800549c:	e7f7      	b.n	800548e <__swsetup_r+0xba>
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c
 80054a4:	0800628c 	.word	0x0800628c
 80054a8:	080062ac 	.word	0x080062ac
 80054ac:	0800626c 	.word	0x0800626c

080054b0 <__sflush_r>:
 80054b0:	898a      	ldrh	r2, [r1, #12]
 80054b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b6:	4605      	mov	r5, r0
 80054b8:	0710      	lsls	r0, r2, #28
 80054ba:	460c      	mov	r4, r1
 80054bc:	d458      	bmi.n	8005570 <__sflush_r+0xc0>
 80054be:	684b      	ldr	r3, [r1, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dc05      	bgt.n	80054d0 <__sflush_r+0x20>
 80054c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	dc02      	bgt.n	80054d0 <__sflush_r+0x20>
 80054ca:	2000      	movs	r0, #0
 80054cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054d2:	2e00      	cmp	r6, #0
 80054d4:	d0f9      	beq.n	80054ca <__sflush_r+0x1a>
 80054d6:	2300      	movs	r3, #0
 80054d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054dc:	682f      	ldr	r7, [r5, #0]
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	d032      	beq.n	8005548 <__sflush_r+0x98>
 80054e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	075a      	lsls	r2, r3, #29
 80054e8:	d505      	bpl.n	80054f6 <__sflush_r+0x46>
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	1ac0      	subs	r0, r0, r3
 80054ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054f0:	b10b      	cbz	r3, 80054f6 <__sflush_r+0x46>
 80054f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054f4:	1ac0      	subs	r0, r0, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	4602      	mov	r2, r0
 80054fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054fc:	6a21      	ldr	r1, [r4, #32]
 80054fe:	4628      	mov	r0, r5
 8005500:	47b0      	blx	r6
 8005502:	1c43      	adds	r3, r0, #1
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	d106      	bne.n	8005516 <__sflush_r+0x66>
 8005508:	6829      	ldr	r1, [r5, #0]
 800550a:	291d      	cmp	r1, #29
 800550c:	d82c      	bhi.n	8005568 <__sflush_r+0xb8>
 800550e:	4a2a      	ldr	r2, [pc, #168]	; (80055b8 <__sflush_r+0x108>)
 8005510:	40ca      	lsrs	r2, r1
 8005512:	07d6      	lsls	r6, r2, #31
 8005514:	d528      	bpl.n	8005568 <__sflush_r+0xb8>
 8005516:	2200      	movs	r2, #0
 8005518:	6062      	str	r2, [r4, #4]
 800551a:	04d9      	lsls	r1, r3, #19
 800551c:	6922      	ldr	r2, [r4, #16]
 800551e:	6022      	str	r2, [r4, #0]
 8005520:	d504      	bpl.n	800552c <__sflush_r+0x7c>
 8005522:	1c42      	adds	r2, r0, #1
 8005524:	d101      	bne.n	800552a <__sflush_r+0x7a>
 8005526:	682b      	ldr	r3, [r5, #0]
 8005528:	b903      	cbnz	r3, 800552c <__sflush_r+0x7c>
 800552a:	6560      	str	r0, [r4, #84]	; 0x54
 800552c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800552e:	602f      	str	r7, [r5, #0]
 8005530:	2900      	cmp	r1, #0
 8005532:	d0ca      	beq.n	80054ca <__sflush_r+0x1a>
 8005534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005538:	4299      	cmp	r1, r3
 800553a:	d002      	beq.n	8005542 <__sflush_r+0x92>
 800553c:	4628      	mov	r0, r5
 800553e:	f000 f9d7 	bl	80058f0 <_free_r>
 8005542:	2000      	movs	r0, #0
 8005544:	6360      	str	r0, [r4, #52]	; 0x34
 8005546:	e7c1      	b.n	80054cc <__sflush_r+0x1c>
 8005548:	6a21      	ldr	r1, [r4, #32]
 800554a:	2301      	movs	r3, #1
 800554c:	4628      	mov	r0, r5
 800554e:	47b0      	blx	r6
 8005550:	1c41      	adds	r1, r0, #1
 8005552:	d1c7      	bne.n	80054e4 <__sflush_r+0x34>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0c4      	beq.n	80054e4 <__sflush_r+0x34>
 800555a:	2b1d      	cmp	r3, #29
 800555c:	d001      	beq.n	8005562 <__sflush_r+0xb2>
 800555e:	2b16      	cmp	r3, #22
 8005560:	d101      	bne.n	8005566 <__sflush_r+0xb6>
 8005562:	602f      	str	r7, [r5, #0]
 8005564:	e7b1      	b.n	80054ca <__sflush_r+0x1a>
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	e7ad      	b.n	80054cc <__sflush_r+0x1c>
 8005570:	690f      	ldr	r7, [r1, #16]
 8005572:	2f00      	cmp	r7, #0
 8005574:	d0a9      	beq.n	80054ca <__sflush_r+0x1a>
 8005576:	0793      	lsls	r3, r2, #30
 8005578:	680e      	ldr	r6, [r1, #0]
 800557a:	bf08      	it	eq
 800557c:	694b      	ldreq	r3, [r1, #20]
 800557e:	600f      	str	r7, [r1, #0]
 8005580:	bf18      	it	ne
 8005582:	2300      	movne	r3, #0
 8005584:	eba6 0807 	sub.w	r8, r6, r7
 8005588:	608b      	str	r3, [r1, #8]
 800558a:	f1b8 0f00 	cmp.w	r8, #0
 800558e:	dd9c      	ble.n	80054ca <__sflush_r+0x1a>
 8005590:	6a21      	ldr	r1, [r4, #32]
 8005592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005594:	4643      	mov	r3, r8
 8005596:	463a      	mov	r2, r7
 8005598:	4628      	mov	r0, r5
 800559a:	47b0      	blx	r6
 800559c:	2800      	cmp	r0, #0
 800559e:	dc06      	bgt.n	80055ae <__sflush_r+0xfe>
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	e78e      	b.n	80054cc <__sflush_r+0x1c>
 80055ae:	4407      	add	r7, r0
 80055b0:	eba8 0800 	sub.w	r8, r8, r0
 80055b4:	e7e9      	b.n	800558a <__sflush_r+0xda>
 80055b6:	bf00      	nop
 80055b8:	20400001 	.word	0x20400001

080055bc <_fflush_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	690b      	ldr	r3, [r1, #16]
 80055c0:	4605      	mov	r5, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	b913      	cbnz	r3, 80055cc <_fflush_r+0x10>
 80055c6:	2500      	movs	r5, #0
 80055c8:	4628      	mov	r0, r5
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	b118      	cbz	r0, 80055d6 <_fflush_r+0x1a>
 80055ce:	6983      	ldr	r3, [r0, #24]
 80055d0:	b90b      	cbnz	r3, 80055d6 <_fflush_r+0x1a>
 80055d2:	f000 f887 	bl	80056e4 <__sinit>
 80055d6:	4b14      	ldr	r3, [pc, #80]	; (8005628 <_fflush_r+0x6c>)
 80055d8:	429c      	cmp	r4, r3
 80055da:	d11b      	bne.n	8005614 <_fflush_r+0x58>
 80055dc:	686c      	ldr	r4, [r5, #4]
 80055de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ef      	beq.n	80055c6 <_fflush_r+0xa>
 80055e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055e8:	07d0      	lsls	r0, r2, #31
 80055ea:	d404      	bmi.n	80055f6 <_fflush_r+0x3a>
 80055ec:	0599      	lsls	r1, r3, #22
 80055ee:	d402      	bmi.n	80055f6 <_fflush_r+0x3a>
 80055f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055f2:	f000 f915 	bl	8005820 <__retarget_lock_acquire_recursive>
 80055f6:	4628      	mov	r0, r5
 80055f8:	4621      	mov	r1, r4
 80055fa:	f7ff ff59 	bl	80054b0 <__sflush_r>
 80055fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005600:	07da      	lsls	r2, r3, #31
 8005602:	4605      	mov	r5, r0
 8005604:	d4e0      	bmi.n	80055c8 <_fflush_r+0xc>
 8005606:	89a3      	ldrh	r3, [r4, #12]
 8005608:	059b      	lsls	r3, r3, #22
 800560a:	d4dd      	bmi.n	80055c8 <_fflush_r+0xc>
 800560c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800560e:	f000 f908 	bl	8005822 <__retarget_lock_release_recursive>
 8005612:	e7d9      	b.n	80055c8 <_fflush_r+0xc>
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <_fflush_r+0x70>)
 8005616:	429c      	cmp	r4, r3
 8005618:	d101      	bne.n	800561e <_fflush_r+0x62>
 800561a:	68ac      	ldr	r4, [r5, #8]
 800561c:	e7df      	b.n	80055de <_fflush_r+0x22>
 800561e:	4b04      	ldr	r3, [pc, #16]	; (8005630 <_fflush_r+0x74>)
 8005620:	429c      	cmp	r4, r3
 8005622:	bf08      	it	eq
 8005624:	68ec      	ldreq	r4, [r5, #12]
 8005626:	e7da      	b.n	80055de <_fflush_r+0x22>
 8005628:	0800628c 	.word	0x0800628c
 800562c:	080062ac 	.word	0x080062ac
 8005630:	0800626c 	.word	0x0800626c

08005634 <std>:
 8005634:	2300      	movs	r3, #0
 8005636:	b510      	push	{r4, lr}
 8005638:	4604      	mov	r4, r0
 800563a:	e9c0 3300 	strd	r3, r3, [r0]
 800563e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005642:	6083      	str	r3, [r0, #8]
 8005644:	8181      	strh	r1, [r0, #12]
 8005646:	6643      	str	r3, [r0, #100]	; 0x64
 8005648:	81c2      	strh	r2, [r0, #14]
 800564a:	6183      	str	r3, [r0, #24]
 800564c:	4619      	mov	r1, r3
 800564e:	2208      	movs	r2, #8
 8005650:	305c      	adds	r0, #92	; 0x5c
 8005652:	f7ff fe4d 	bl	80052f0 <memset>
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <std+0x38>)
 8005658:	6263      	str	r3, [r4, #36]	; 0x24
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <std+0x3c>)
 800565c:	62a3      	str	r3, [r4, #40]	; 0x28
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <std+0x40>)
 8005660:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <std+0x44>)
 8005664:	6224      	str	r4, [r4, #32]
 8005666:	6323      	str	r3, [r4, #48]	; 0x30
 8005668:	bd10      	pop	{r4, pc}
 800566a:	bf00      	nop
 800566c:	080060ad 	.word	0x080060ad
 8005670:	080060cf 	.word	0x080060cf
 8005674:	08006107 	.word	0x08006107
 8005678:	0800612b 	.word	0x0800612b

0800567c <_cleanup_r>:
 800567c:	4901      	ldr	r1, [pc, #4]	; (8005684 <_cleanup_r+0x8>)
 800567e:	f000 b8af 	b.w	80057e0 <_fwalk_reent>
 8005682:	bf00      	nop
 8005684:	080055bd 	.word	0x080055bd

08005688 <__sfmoreglue>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	2268      	movs	r2, #104	; 0x68
 800568c:	1e4d      	subs	r5, r1, #1
 800568e:	4355      	muls	r5, r2
 8005690:	460e      	mov	r6, r1
 8005692:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005696:	f000 f997 	bl	80059c8 <_malloc_r>
 800569a:	4604      	mov	r4, r0
 800569c:	b140      	cbz	r0, 80056b0 <__sfmoreglue+0x28>
 800569e:	2100      	movs	r1, #0
 80056a0:	e9c0 1600 	strd	r1, r6, [r0]
 80056a4:	300c      	adds	r0, #12
 80056a6:	60a0      	str	r0, [r4, #8]
 80056a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056ac:	f7ff fe20 	bl	80052f0 <memset>
 80056b0:	4620      	mov	r0, r4
 80056b2:	bd70      	pop	{r4, r5, r6, pc}

080056b4 <__sfp_lock_acquire>:
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <__sfp_lock_acquire+0x8>)
 80056b6:	f000 b8b3 	b.w	8005820 <__retarget_lock_acquire_recursive>
 80056ba:	bf00      	nop
 80056bc:	2000021d 	.word	0x2000021d

080056c0 <__sfp_lock_release>:
 80056c0:	4801      	ldr	r0, [pc, #4]	; (80056c8 <__sfp_lock_release+0x8>)
 80056c2:	f000 b8ae 	b.w	8005822 <__retarget_lock_release_recursive>
 80056c6:	bf00      	nop
 80056c8:	2000021d 	.word	0x2000021d

080056cc <__sinit_lock_acquire>:
 80056cc:	4801      	ldr	r0, [pc, #4]	; (80056d4 <__sinit_lock_acquire+0x8>)
 80056ce:	f000 b8a7 	b.w	8005820 <__retarget_lock_acquire_recursive>
 80056d2:	bf00      	nop
 80056d4:	2000021e 	.word	0x2000021e

080056d8 <__sinit_lock_release>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__sinit_lock_release+0x8>)
 80056da:	f000 b8a2 	b.w	8005822 <__retarget_lock_release_recursive>
 80056de:	bf00      	nop
 80056e0:	2000021e 	.word	0x2000021e

080056e4 <__sinit>:
 80056e4:	b510      	push	{r4, lr}
 80056e6:	4604      	mov	r4, r0
 80056e8:	f7ff fff0 	bl	80056cc <__sinit_lock_acquire>
 80056ec:	69a3      	ldr	r3, [r4, #24]
 80056ee:	b11b      	cbz	r3, 80056f8 <__sinit+0x14>
 80056f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f4:	f7ff bff0 	b.w	80056d8 <__sinit_lock_release>
 80056f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056fc:	6523      	str	r3, [r4, #80]	; 0x50
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <__sinit+0x68>)
 8005700:	4a13      	ldr	r2, [pc, #76]	; (8005750 <__sinit+0x6c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	62a2      	str	r2, [r4, #40]	; 0x28
 8005706:	42a3      	cmp	r3, r4
 8005708:	bf04      	itt	eq
 800570a:	2301      	moveq	r3, #1
 800570c:	61a3      	streq	r3, [r4, #24]
 800570e:	4620      	mov	r0, r4
 8005710:	f000 f820 	bl	8005754 <__sfp>
 8005714:	6060      	str	r0, [r4, #4]
 8005716:	4620      	mov	r0, r4
 8005718:	f000 f81c 	bl	8005754 <__sfp>
 800571c:	60a0      	str	r0, [r4, #8]
 800571e:	4620      	mov	r0, r4
 8005720:	f000 f818 	bl	8005754 <__sfp>
 8005724:	2200      	movs	r2, #0
 8005726:	60e0      	str	r0, [r4, #12]
 8005728:	2104      	movs	r1, #4
 800572a:	6860      	ldr	r0, [r4, #4]
 800572c:	f7ff ff82 	bl	8005634 <std>
 8005730:	68a0      	ldr	r0, [r4, #8]
 8005732:	2201      	movs	r2, #1
 8005734:	2109      	movs	r1, #9
 8005736:	f7ff ff7d 	bl	8005634 <std>
 800573a:	68e0      	ldr	r0, [r4, #12]
 800573c:	2202      	movs	r2, #2
 800573e:	2112      	movs	r1, #18
 8005740:	f7ff ff78 	bl	8005634 <std>
 8005744:	2301      	movs	r3, #1
 8005746:	61a3      	str	r3, [r4, #24]
 8005748:	e7d2      	b.n	80056f0 <__sinit+0xc>
 800574a:	bf00      	nop
 800574c:	08006268 	.word	0x08006268
 8005750:	0800567d 	.word	0x0800567d

08005754 <__sfp>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	4607      	mov	r7, r0
 8005758:	f7ff ffac 	bl	80056b4 <__sfp_lock_acquire>
 800575c:	4b1e      	ldr	r3, [pc, #120]	; (80057d8 <__sfp+0x84>)
 800575e:	681e      	ldr	r6, [r3, #0]
 8005760:	69b3      	ldr	r3, [r6, #24]
 8005762:	b913      	cbnz	r3, 800576a <__sfp+0x16>
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff ffbd 	bl	80056e4 <__sinit>
 800576a:	3648      	adds	r6, #72	; 0x48
 800576c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005770:	3b01      	subs	r3, #1
 8005772:	d503      	bpl.n	800577c <__sfp+0x28>
 8005774:	6833      	ldr	r3, [r6, #0]
 8005776:	b30b      	cbz	r3, 80057bc <__sfp+0x68>
 8005778:	6836      	ldr	r6, [r6, #0]
 800577a:	e7f7      	b.n	800576c <__sfp+0x18>
 800577c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005780:	b9d5      	cbnz	r5, 80057b8 <__sfp+0x64>
 8005782:	4b16      	ldr	r3, [pc, #88]	; (80057dc <__sfp+0x88>)
 8005784:	60e3      	str	r3, [r4, #12]
 8005786:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800578a:	6665      	str	r5, [r4, #100]	; 0x64
 800578c:	f000 f847 	bl	800581e <__retarget_lock_init_recursive>
 8005790:	f7ff ff96 	bl	80056c0 <__sfp_lock_release>
 8005794:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005798:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800579c:	6025      	str	r5, [r4, #0]
 800579e:	61a5      	str	r5, [r4, #24]
 80057a0:	2208      	movs	r2, #8
 80057a2:	4629      	mov	r1, r5
 80057a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057a8:	f7ff fda2 	bl	80052f0 <memset>
 80057ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057b4:	4620      	mov	r0, r4
 80057b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b8:	3468      	adds	r4, #104	; 0x68
 80057ba:	e7d9      	b.n	8005770 <__sfp+0x1c>
 80057bc:	2104      	movs	r1, #4
 80057be:	4638      	mov	r0, r7
 80057c0:	f7ff ff62 	bl	8005688 <__sfmoreglue>
 80057c4:	4604      	mov	r4, r0
 80057c6:	6030      	str	r0, [r6, #0]
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d1d5      	bne.n	8005778 <__sfp+0x24>
 80057cc:	f7ff ff78 	bl	80056c0 <__sfp_lock_release>
 80057d0:	230c      	movs	r3, #12
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	e7ee      	b.n	80057b4 <__sfp+0x60>
 80057d6:	bf00      	nop
 80057d8:	08006268 	.word	0x08006268
 80057dc:	ffff0001 	.word	0xffff0001

080057e0 <_fwalk_reent>:
 80057e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057e4:	4606      	mov	r6, r0
 80057e6:	4688      	mov	r8, r1
 80057e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057ec:	2700      	movs	r7, #0
 80057ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057f2:	f1b9 0901 	subs.w	r9, r9, #1
 80057f6:	d505      	bpl.n	8005804 <_fwalk_reent+0x24>
 80057f8:	6824      	ldr	r4, [r4, #0]
 80057fa:	2c00      	cmp	r4, #0
 80057fc:	d1f7      	bne.n	80057ee <_fwalk_reent+0xe>
 80057fe:	4638      	mov	r0, r7
 8005800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005804:	89ab      	ldrh	r3, [r5, #12]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d907      	bls.n	800581a <_fwalk_reent+0x3a>
 800580a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800580e:	3301      	adds	r3, #1
 8005810:	d003      	beq.n	800581a <_fwalk_reent+0x3a>
 8005812:	4629      	mov	r1, r5
 8005814:	4630      	mov	r0, r6
 8005816:	47c0      	blx	r8
 8005818:	4307      	orrs	r7, r0
 800581a:	3568      	adds	r5, #104	; 0x68
 800581c:	e7e9      	b.n	80057f2 <_fwalk_reent+0x12>

0800581e <__retarget_lock_init_recursive>:
 800581e:	4770      	bx	lr

08005820 <__retarget_lock_acquire_recursive>:
 8005820:	4770      	bx	lr

08005822 <__retarget_lock_release_recursive>:
 8005822:	4770      	bx	lr

08005824 <__swhatbuf_r>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	460e      	mov	r6, r1
 8005828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582c:	2900      	cmp	r1, #0
 800582e:	b096      	sub	sp, #88	; 0x58
 8005830:	4614      	mov	r4, r2
 8005832:	461d      	mov	r5, r3
 8005834:	da08      	bge.n	8005848 <__swhatbuf_r+0x24>
 8005836:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	602a      	str	r2, [r5, #0]
 800583e:	061a      	lsls	r2, r3, #24
 8005840:	d410      	bmi.n	8005864 <__swhatbuf_r+0x40>
 8005842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005846:	e00e      	b.n	8005866 <__swhatbuf_r+0x42>
 8005848:	466a      	mov	r2, sp
 800584a:	f000 fc95 	bl	8006178 <_fstat_r>
 800584e:	2800      	cmp	r0, #0
 8005850:	dbf1      	blt.n	8005836 <__swhatbuf_r+0x12>
 8005852:	9a01      	ldr	r2, [sp, #4]
 8005854:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005858:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800585c:	425a      	negs	r2, r3
 800585e:	415a      	adcs	r2, r3
 8005860:	602a      	str	r2, [r5, #0]
 8005862:	e7ee      	b.n	8005842 <__swhatbuf_r+0x1e>
 8005864:	2340      	movs	r3, #64	; 0x40
 8005866:	2000      	movs	r0, #0
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	b016      	add	sp, #88	; 0x58
 800586c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005870 <__smakebuf_r>:
 8005870:	898b      	ldrh	r3, [r1, #12]
 8005872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005874:	079d      	lsls	r5, r3, #30
 8005876:	4606      	mov	r6, r0
 8005878:	460c      	mov	r4, r1
 800587a:	d507      	bpl.n	800588c <__smakebuf_r+0x1c>
 800587c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	2301      	movs	r3, #1
 8005886:	6163      	str	r3, [r4, #20]
 8005888:	b002      	add	sp, #8
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	ab01      	add	r3, sp, #4
 800588e:	466a      	mov	r2, sp
 8005890:	f7ff ffc8 	bl	8005824 <__swhatbuf_r>
 8005894:	9900      	ldr	r1, [sp, #0]
 8005896:	4605      	mov	r5, r0
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f895 	bl	80059c8 <_malloc_r>
 800589e:	b948      	cbnz	r0, 80058b4 <__smakebuf_r+0x44>
 80058a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a4:	059a      	lsls	r2, r3, #22
 80058a6:	d4ef      	bmi.n	8005888 <__smakebuf_r+0x18>
 80058a8:	f023 0303 	bic.w	r3, r3, #3
 80058ac:	f043 0302 	orr.w	r3, r3, #2
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7e3      	b.n	800587c <__smakebuf_r+0xc>
 80058b4:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <__smakebuf_r+0x7c>)
 80058b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	6020      	str	r0, [r4, #0]
 80058bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c0:	81a3      	strh	r3, [r4, #12]
 80058c2:	9b00      	ldr	r3, [sp, #0]
 80058c4:	6163      	str	r3, [r4, #20]
 80058c6:	9b01      	ldr	r3, [sp, #4]
 80058c8:	6120      	str	r0, [r4, #16]
 80058ca:	b15b      	cbz	r3, 80058e4 <__smakebuf_r+0x74>
 80058cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058d0:	4630      	mov	r0, r6
 80058d2:	f000 fc63 	bl	800619c <_isatty_r>
 80058d6:	b128      	cbz	r0, 80058e4 <__smakebuf_r+0x74>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	89a0      	ldrh	r0, [r4, #12]
 80058e6:	4305      	orrs	r5, r0
 80058e8:	81a5      	strh	r5, [r4, #12]
 80058ea:	e7cd      	b.n	8005888 <__smakebuf_r+0x18>
 80058ec:	0800567d 	.word	0x0800567d

080058f0 <_free_r>:
 80058f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058f2:	2900      	cmp	r1, #0
 80058f4:	d044      	beq.n	8005980 <_free_r+0x90>
 80058f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058fa:	9001      	str	r0, [sp, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005902:	bfb8      	it	lt
 8005904:	18e4      	addlt	r4, r4, r3
 8005906:	f000 fc6b 	bl	80061e0 <__malloc_lock>
 800590a:	4a1e      	ldr	r2, [pc, #120]	; (8005984 <_free_r+0x94>)
 800590c:	9801      	ldr	r0, [sp, #4]
 800590e:	6813      	ldr	r3, [r2, #0]
 8005910:	b933      	cbnz	r3, 8005920 <_free_r+0x30>
 8005912:	6063      	str	r3, [r4, #4]
 8005914:	6014      	str	r4, [r2, #0]
 8005916:	b003      	add	sp, #12
 8005918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800591c:	f000 bc66 	b.w	80061ec <__malloc_unlock>
 8005920:	42a3      	cmp	r3, r4
 8005922:	d908      	bls.n	8005936 <_free_r+0x46>
 8005924:	6825      	ldr	r5, [r4, #0]
 8005926:	1961      	adds	r1, r4, r5
 8005928:	428b      	cmp	r3, r1
 800592a:	bf01      	itttt	eq
 800592c:	6819      	ldreq	r1, [r3, #0]
 800592e:	685b      	ldreq	r3, [r3, #4]
 8005930:	1949      	addeq	r1, r1, r5
 8005932:	6021      	streq	r1, [r4, #0]
 8005934:	e7ed      	b.n	8005912 <_free_r+0x22>
 8005936:	461a      	mov	r2, r3
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	b10b      	cbz	r3, 8005940 <_free_r+0x50>
 800593c:	42a3      	cmp	r3, r4
 800593e:	d9fa      	bls.n	8005936 <_free_r+0x46>
 8005940:	6811      	ldr	r1, [r2, #0]
 8005942:	1855      	adds	r5, r2, r1
 8005944:	42a5      	cmp	r5, r4
 8005946:	d10b      	bne.n	8005960 <_free_r+0x70>
 8005948:	6824      	ldr	r4, [r4, #0]
 800594a:	4421      	add	r1, r4
 800594c:	1854      	adds	r4, r2, r1
 800594e:	42a3      	cmp	r3, r4
 8005950:	6011      	str	r1, [r2, #0]
 8005952:	d1e0      	bne.n	8005916 <_free_r+0x26>
 8005954:	681c      	ldr	r4, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	6053      	str	r3, [r2, #4]
 800595a:	4421      	add	r1, r4
 800595c:	6011      	str	r1, [r2, #0]
 800595e:	e7da      	b.n	8005916 <_free_r+0x26>
 8005960:	d902      	bls.n	8005968 <_free_r+0x78>
 8005962:	230c      	movs	r3, #12
 8005964:	6003      	str	r3, [r0, #0]
 8005966:	e7d6      	b.n	8005916 <_free_r+0x26>
 8005968:	6825      	ldr	r5, [r4, #0]
 800596a:	1961      	adds	r1, r4, r5
 800596c:	428b      	cmp	r3, r1
 800596e:	bf04      	itt	eq
 8005970:	6819      	ldreq	r1, [r3, #0]
 8005972:	685b      	ldreq	r3, [r3, #4]
 8005974:	6063      	str	r3, [r4, #4]
 8005976:	bf04      	itt	eq
 8005978:	1949      	addeq	r1, r1, r5
 800597a:	6021      	streq	r1, [r4, #0]
 800597c:	6054      	str	r4, [r2, #4]
 800597e:	e7ca      	b.n	8005916 <_free_r+0x26>
 8005980:	b003      	add	sp, #12
 8005982:	bd30      	pop	{r4, r5, pc}
 8005984:	20000220 	.word	0x20000220

08005988 <sbrk_aligned>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4e0e      	ldr	r6, [pc, #56]	; (80059c4 <sbrk_aligned+0x3c>)
 800598c:	460c      	mov	r4, r1
 800598e:	6831      	ldr	r1, [r6, #0]
 8005990:	4605      	mov	r5, r0
 8005992:	b911      	cbnz	r1, 800599a <sbrk_aligned+0x12>
 8005994:	f000 fb7a 	bl	800608c <_sbrk_r>
 8005998:	6030      	str	r0, [r6, #0]
 800599a:	4621      	mov	r1, r4
 800599c:	4628      	mov	r0, r5
 800599e:	f000 fb75 	bl	800608c <_sbrk_r>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	d00a      	beq.n	80059bc <sbrk_aligned+0x34>
 80059a6:	1cc4      	adds	r4, r0, #3
 80059a8:	f024 0403 	bic.w	r4, r4, #3
 80059ac:	42a0      	cmp	r0, r4
 80059ae:	d007      	beq.n	80059c0 <sbrk_aligned+0x38>
 80059b0:	1a21      	subs	r1, r4, r0
 80059b2:	4628      	mov	r0, r5
 80059b4:	f000 fb6a 	bl	800608c <_sbrk_r>
 80059b8:	3001      	adds	r0, #1
 80059ba:	d101      	bne.n	80059c0 <sbrk_aligned+0x38>
 80059bc:	f04f 34ff 	mov.w	r4, #4294967295
 80059c0:	4620      	mov	r0, r4
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	20000224 	.word	0x20000224

080059c8 <_malloc_r>:
 80059c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059cc:	1ccd      	adds	r5, r1, #3
 80059ce:	f025 0503 	bic.w	r5, r5, #3
 80059d2:	3508      	adds	r5, #8
 80059d4:	2d0c      	cmp	r5, #12
 80059d6:	bf38      	it	cc
 80059d8:	250c      	movcc	r5, #12
 80059da:	2d00      	cmp	r5, #0
 80059dc:	4607      	mov	r7, r0
 80059de:	db01      	blt.n	80059e4 <_malloc_r+0x1c>
 80059e0:	42a9      	cmp	r1, r5
 80059e2:	d905      	bls.n	80059f0 <_malloc_r+0x28>
 80059e4:	230c      	movs	r3, #12
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	2600      	movs	r6, #0
 80059ea:	4630      	mov	r0, r6
 80059ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f0:	4e2e      	ldr	r6, [pc, #184]	; (8005aac <_malloc_r+0xe4>)
 80059f2:	f000 fbf5 	bl	80061e0 <__malloc_lock>
 80059f6:	6833      	ldr	r3, [r6, #0]
 80059f8:	461c      	mov	r4, r3
 80059fa:	bb34      	cbnz	r4, 8005a4a <_malloc_r+0x82>
 80059fc:	4629      	mov	r1, r5
 80059fe:	4638      	mov	r0, r7
 8005a00:	f7ff ffc2 	bl	8005988 <sbrk_aligned>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	4604      	mov	r4, r0
 8005a08:	d14d      	bne.n	8005aa6 <_malloc_r+0xde>
 8005a0a:	6834      	ldr	r4, [r6, #0]
 8005a0c:	4626      	mov	r6, r4
 8005a0e:	2e00      	cmp	r6, #0
 8005a10:	d140      	bne.n	8005a94 <_malloc_r+0xcc>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	4631      	mov	r1, r6
 8005a16:	4638      	mov	r0, r7
 8005a18:	eb04 0803 	add.w	r8, r4, r3
 8005a1c:	f000 fb36 	bl	800608c <_sbrk_r>
 8005a20:	4580      	cmp	r8, r0
 8005a22:	d13a      	bne.n	8005a9a <_malloc_r+0xd2>
 8005a24:	6821      	ldr	r1, [r4, #0]
 8005a26:	3503      	adds	r5, #3
 8005a28:	1a6d      	subs	r5, r5, r1
 8005a2a:	f025 0503 	bic.w	r5, r5, #3
 8005a2e:	3508      	adds	r5, #8
 8005a30:	2d0c      	cmp	r5, #12
 8005a32:	bf38      	it	cc
 8005a34:	250c      	movcc	r5, #12
 8005a36:	4629      	mov	r1, r5
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff ffa5 	bl	8005988 <sbrk_aligned>
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d02b      	beq.n	8005a9a <_malloc_r+0xd2>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	442b      	add	r3, r5
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	e00e      	b.n	8005a68 <_malloc_r+0xa0>
 8005a4a:	6822      	ldr	r2, [r4, #0]
 8005a4c:	1b52      	subs	r2, r2, r5
 8005a4e:	d41e      	bmi.n	8005a8e <_malloc_r+0xc6>
 8005a50:	2a0b      	cmp	r2, #11
 8005a52:	d916      	bls.n	8005a82 <_malloc_r+0xba>
 8005a54:	1961      	adds	r1, r4, r5
 8005a56:	42a3      	cmp	r3, r4
 8005a58:	6025      	str	r5, [r4, #0]
 8005a5a:	bf18      	it	ne
 8005a5c:	6059      	strne	r1, [r3, #4]
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	bf08      	it	eq
 8005a62:	6031      	streq	r1, [r6, #0]
 8005a64:	5162      	str	r2, [r4, r5]
 8005a66:	604b      	str	r3, [r1, #4]
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f104 060b 	add.w	r6, r4, #11
 8005a6e:	f000 fbbd 	bl	80061ec <__malloc_unlock>
 8005a72:	f026 0607 	bic.w	r6, r6, #7
 8005a76:	1d23      	adds	r3, r4, #4
 8005a78:	1af2      	subs	r2, r6, r3
 8005a7a:	d0b6      	beq.n	80059ea <_malloc_r+0x22>
 8005a7c:	1b9b      	subs	r3, r3, r6
 8005a7e:	50a3      	str	r3, [r4, r2]
 8005a80:	e7b3      	b.n	80059ea <_malloc_r+0x22>
 8005a82:	6862      	ldr	r2, [r4, #4]
 8005a84:	42a3      	cmp	r3, r4
 8005a86:	bf0c      	ite	eq
 8005a88:	6032      	streq	r2, [r6, #0]
 8005a8a:	605a      	strne	r2, [r3, #4]
 8005a8c:	e7ec      	b.n	8005a68 <_malloc_r+0xa0>
 8005a8e:	4623      	mov	r3, r4
 8005a90:	6864      	ldr	r4, [r4, #4]
 8005a92:	e7b2      	b.n	80059fa <_malloc_r+0x32>
 8005a94:	4634      	mov	r4, r6
 8005a96:	6876      	ldr	r6, [r6, #4]
 8005a98:	e7b9      	b.n	8005a0e <_malloc_r+0x46>
 8005a9a:	230c      	movs	r3, #12
 8005a9c:	603b      	str	r3, [r7, #0]
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	f000 fba4 	bl	80061ec <__malloc_unlock>
 8005aa4:	e7a1      	b.n	80059ea <_malloc_r+0x22>
 8005aa6:	6025      	str	r5, [r4, #0]
 8005aa8:	e7de      	b.n	8005a68 <_malloc_r+0xa0>
 8005aaa:	bf00      	nop
 8005aac:	20000220 	.word	0x20000220

08005ab0 <__sfputc_r>:
 8005ab0:	6893      	ldr	r3, [r2, #8]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	b410      	push	{r4}
 8005ab8:	6093      	str	r3, [r2, #8]
 8005aba:	da08      	bge.n	8005ace <__sfputc_r+0x1e>
 8005abc:	6994      	ldr	r4, [r2, #24]
 8005abe:	42a3      	cmp	r3, r4
 8005ac0:	db01      	blt.n	8005ac6 <__sfputc_r+0x16>
 8005ac2:	290a      	cmp	r1, #10
 8005ac4:	d103      	bne.n	8005ace <__sfputc_r+0x1e>
 8005ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aca:	f7ff bc31 	b.w	8005330 <__swbuf_r>
 8005ace:	6813      	ldr	r3, [r2, #0]
 8005ad0:	1c58      	adds	r0, r3, #1
 8005ad2:	6010      	str	r0, [r2, #0]
 8005ad4:	7019      	strb	r1, [r3, #0]
 8005ad6:	4608      	mov	r0, r1
 8005ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <__sfputs_r>:
 8005ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	460f      	mov	r7, r1
 8005ae4:	4614      	mov	r4, r2
 8005ae6:	18d5      	adds	r5, r2, r3
 8005ae8:	42ac      	cmp	r4, r5
 8005aea:	d101      	bne.n	8005af0 <__sfputs_r+0x12>
 8005aec:	2000      	movs	r0, #0
 8005aee:	e007      	b.n	8005b00 <__sfputs_r+0x22>
 8005af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af4:	463a      	mov	r2, r7
 8005af6:	4630      	mov	r0, r6
 8005af8:	f7ff ffda 	bl	8005ab0 <__sfputc_r>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d1f3      	bne.n	8005ae8 <__sfputs_r+0xa>
 8005b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b04 <_vfiprintf_r>:
 8005b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	460d      	mov	r5, r1
 8005b0a:	b09d      	sub	sp, #116	; 0x74
 8005b0c:	4614      	mov	r4, r2
 8005b0e:	4698      	mov	r8, r3
 8005b10:	4606      	mov	r6, r0
 8005b12:	b118      	cbz	r0, 8005b1c <_vfiprintf_r+0x18>
 8005b14:	6983      	ldr	r3, [r0, #24]
 8005b16:	b90b      	cbnz	r3, 8005b1c <_vfiprintf_r+0x18>
 8005b18:	f7ff fde4 	bl	80056e4 <__sinit>
 8005b1c:	4b89      	ldr	r3, [pc, #548]	; (8005d44 <_vfiprintf_r+0x240>)
 8005b1e:	429d      	cmp	r5, r3
 8005b20:	d11b      	bne.n	8005b5a <_vfiprintf_r+0x56>
 8005b22:	6875      	ldr	r5, [r6, #4]
 8005b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b26:	07d9      	lsls	r1, r3, #31
 8005b28:	d405      	bmi.n	8005b36 <_vfiprintf_r+0x32>
 8005b2a:	89ab      	ldrh	r3, [r5, #12]
 8005b2c:	059a      	lsls	r2, r3, #22
 8005b2e:	d402      	bmi.n	8005b36 <_vfiprintf_r+0x32>
 8005b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b32:	f7ff fe75 	bl	8005820 <__retarget_lock_acquire_recursive>
 8005b36:	89ab      	ldrh	r3, [r5, #12]
 8005b38:	071b      	lsls	r3, r3, #28
 8005b3a:	d501      	bpl.n	8005b40 <_vfiprintf_r+0x3c>
 8005b3c:	692b      	ldr	r3, [r5, #16]
 8005b3e:	b9eb      	cbnz	r3, 8005b7c <_vfiprintf_r+0x78>
 8005b40:	4629      	mov	r1, r5
 8005b42:	4630      	mov	r0, r6
 8005b44:	f7ff fc46 	bl	80053d4 <__swsetup_r>
 8005b48:	b1c0      	cbz	r0, 8005b7c <_vfiprintf_r+0x78>
 8005b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b4c:	07dc      	lsls	r4, r3, #31
 8005b4e:	d50e      	bpl.n	8005b6e <_vfiprintf_r+0x6a>
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295
 8005b54:	b01d      	add	sp, #116	; 0x74
 8005b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5a:	4b7b      	ldr	r3, [pc, #492]	; (8005d48 <_vfiprintf_r+0x244>)
 8005b5c:	429d      	cmp	r5, r3
 8005b5e:	d101      	bne.n	8005b64 <_vfiprintf_r+0x60>
 8005b60:	68b5      	ldr	r5, [r6, #8]
 8005b62:	e7df      	b.n	8005b24 <_vfiprintf_r+0x20>
 8005b64:	4b79      	ldr	r3, [pc, #484]	; (8005d4c <_vfiprintf_r+0x248>)
 8005b66:	429d      	cmp	r5, r3
 8005b68:	bf08      	it	eq
 8005b6a:	68f5      	ldreq	r5, [r6, #12]
 8005b6c:	e7da      	b.n	8005b24 <_vfiprintf_r+0x20>
 8005b6e:	89ab      	ldrh	r3, [r5, #12]
 8005b70:	0598      	lsls	r0, r3, #22
 8005b72:	d4ed      	bmi.n	8005b50 <_vfiprintf_r+0x4c>
 8005b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b76:	f7ff fe54 	bl	8005822 <__retarget_lock_release_recursive>
 8005b7a:	e7e9      	b.n	8005b50 <_vfiprintf_r+0x4c>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b80:	2320      	movs	r3, #32
 8005b82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b8a:	2330      	movs	r3, #48	; 0x30
 8005b8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d50 <_vfiprintf_r+0x24c>
 8005b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b94:	f04f 0901 	mov.w	r9, #1
 8005b98:	4623      	mov	r3, r4
 8005b9a:	469a      	mov	sl, r3
 8005b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ba0:	b10a      	cbz	r2, 8005ba6 <_vfiprintf_r+0xa2>
 8005ba2:	2a25      	cmp	r2, #37	; 0x25
 8005ba4:	d1f9      	bne.n	8005b9a <_vfiprintf_r+0x96>
 8005ba6:	ebba 0b04 	subs.w	fp, sl, r4
 8005baa:	d00b      	beq.n	8005bc4 <_vfiprintf_r+0xc0>
 8005bac:	465b      	mov	r3, fp
 8005bae:	4622      	mov	r2, r4
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f7ff ff93 	bl	8005ade <__sfputs_r>
 8005bb8:	3001      	adds	r0, #1
 8005bba:	f000 80aa 	beq.w	8005d12 <_vfiprintf_r+0x20e>
 8005bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc0:	445a      	add	r2, fp
 8005bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80a2 	beq.w	8005d12 <_vfiprintf_r+0x20e>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd8:	f10a 0a01 	add.w	sl, sl, #1
 8005bdc:	9304      	str	r3, [sp, #16]
 8005bde:	9307      	str	r3, [sp, #28]
 8005be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005be4:	931a      	str	r3, [sp, #104]	; 0x68
 8005be6:	4654      	mov	r4, sl
 8005be8:	2205      	movs	r2, #5
 8005bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bee:	4858      	ldr	r0, [pc, #352]	; (8005d50 <_vfiprintf_r+0x24c>)
 8005bf0:	f7fa fafe 	bl	80001f0 <memchr>
 8005bf4:	9a04      	ldr	r2, [sp, #16]
 8005bf6:	b9d8      	cbnz	r0, 8005c30 <_vfiprintf_r+0x12c>
 8005bf8:	06d1      	lsls	r1, r2, #27
 8005bfa:	bf44      	itt	mi
 8005bfc:	2320      	movmi	r3, #32
 8005bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c02:	0713      	lsls	r3, r2, #28
 8005c04:	bf44      	itt	mi
 8005c06:	232b      	movmi	r3, #43	; 0x2b
 8005c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c10:	2b2a      	cmp	r3, #42	; 0x2a
 8005c12:	d015      	beq.n	8005c40 <_vfiprintf_r+0x13c>
 8005c14:	9a07      	ldr	r2, [sp, #28]
 8005c16:	4654      	mov	r4, sl
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f04f 0c0a 	mov.w	ip, #10
 8005c1e:	4621      	mov	r1, r4
 8005c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c24:	3b30      	subs	r3, #48	; 0x30
 8005c26:	2b09      	cmp	r3, #9
 8005c28:	d94e      	bls.n	8005cc8 <_vfiprintf_r+0x1c4>
 8005c2a:	b1b0      	cbz	r0, 8005c5a <_vfiprintf_r+0x156>
 8005c2c:	9207      	str	r2, [sp, #28]
 8005c2e:	e014      	b.n	8005c5a <_vfiprintf_r+0x156>
 8005c30:	eba0 0308 	sub.w	r3, r0, r8
 8005c34:	fa09 f303 	lsl.w	r3, r9, r3
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	9304      	str	r3, [sp, #16]
 8005c3c:	46a2      	mov	sl, r4
 8005c3e:	e7d2      	b.n	8005be6 <_vfiprintf_r+0xe2>
 8005c40:	9b03      	ldr	r3, [sp, #12]
 8005c42:	1d19      	adds	r1, r3, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	9103      	str	r1, [sp, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bfbb      	ittet	lt
 8005c4c:	425b      	neglt	r3, r3
 8005c4e:	f042 0202 	orrlt.w	r2, r2, #2
 8005c52:	9307      	strge	r3, [sp, #28]
 8005c54:	9307      	strlt	r3, [sp, #28]
 8005c56:	bfb8      	it	lt
 8005c58:	9204      	strlt	r2, [sp, #16]
 8005c5a:	7823      	ldrb	r3, [r4, #0]
 8005c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c5e:	d10c      	bne.n	8005c7a <_vfiprintf_r+0x176>
 8005c60:	7863      	ldrb	r3, [r4, #1]
 8005c62:	2b2a      	cmp	r3, #42	; 0x2a
 8005c64:	d135      	bne.n	8005cd2 <_vfiprintf_r+0x1ce>
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	1d1a      	adds	r2, r3, #4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	9203      	str	r2, [sp, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bfb8      	it	lt
 8005c72:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c76:	3402      	adds	r4, #2
 8005c78:	9305      	str	r3, [sp, #20]
 8005c7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d60 <_vfiprintf_r+0x25c>
 8005c7e:	7821      	ldrb	r1, [r4, #0]
 8005c80:	2203      	movs	r2, #3
 8005c82:	4650      	mov	r0, sl
 8005c84:	f7fa fab4 	bl	80001f0 <memchr>
 8005c88:	b140      	cbz	r0, 8005c9c <_vfiprintf_r+0x198>
 8005c8a:	2340      	movs	r3, #64	; 0x40
 8005c8c:	eba0 000a 	sub.w	r0, r0, sl
 8005c90:	fa03 f000 	lsl.w	r0, r3, r0
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	4303      	orrs	r3, r0
 8005c98:	3401      	adds	r4, #1
 8005c9a:	9304      	str	r3, [sp, #16]
 8005c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca0:	482c      	ldr	r0, [pc, #176]	; (8005d54 <_vfiprintf_r+0x250>)
 8005ca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ca6:	2206      	movs	r2, #6
 8005ca8:	f7fa faa2 	bl	80001f0 <memchr>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d03f      	beq.n	8005d30 <_vfiprintf_r+0x22c>
 8005cb0:	4b29      	ldr	r3, [pc, #164]	; (8005d58 <_vfiprintf_r+0x254>)
 8005cb2:	bb1b      	cbnz	r3, 8005cfc <_vfiprintf_r+0x1f8>
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	3307      	adds	r3, #7
 8005cb8:	f023 0307 	bic.w	r3, r3, #7
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	9303      	str	r3, [sp, #12]
 8005cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc2:	443b      	add	r3, r7
 8005cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc6:	e767      	b.n	8005b98 <_vfiprintf_r+0x94>
 8005cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ccc:	460c      	mov	r4, r1
 8005cce:	2001      	movs	r0, #1
 8005cd0:	e7a5      	b.n	8005c1e <_vfiprintf_r+0x11a>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	3401      	adds	r4, #1
 8005cd6:	9305      	str	r3, [sp, #20]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	f04f 0c0a 	mov.w	ip, #10
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ce4:	3a30      	subs	r2, #48	; 0x30
 8005ce6:	2a09      	cmp	r2, #9
 8005ce8:	d903      	bls.n	8005cf2 <_vfiprintf_r+0x1ee>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0c5      	beq.n	8005c7a <_vfiprintf_r+0x176>
 8005cee:	9105      	str	r1, [sp, #20]
 8005cf0:	e7c3      	b.n	8005c7a <_vfiprintf_r+0x176>
 8005cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e7f0      	b.n	8005cde <_vfiprintf_r+0x1da>
 8005cfc:	ab03      	add	r3, sp, #12
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	462a      	mov	r2, r5
 8005d02:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <_vfiprintf_r+0x258>)
 8005d04:	a904      	add	r1, sp, #16
 8005d06:	4630      	mov	r0, r6
 8005d08:	f3af 8000 	nop.w
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	1c78      	adds	r0, r7, #1
 8005d10:	d1d6      	bne.n	8005cc0 <_vfiprintf_r+0x1bc>
 8005d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d14:	07d9      	lsls	r1, r3, #31
 8005d16:	d405      	bmi.n	8005d24 <_vfiprintf_r+0x220>
 8005d18:	89ab      	ldrh	r3, [r5, #12]
 8005d1a:	059a      	lsls	r2, r3, #22
 8005d1c:	d402      	bmi.n	8005d24 <_vfiprintf_r+0x220>
 8005d1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d20:	f7ff fd7f 	bl	8005822 <__retarget_lock_release_recursive>
 8005d24:	89ab      	ldrh	r3, [r5, #12]
 8005d26:	065b      	lsls	r3, r3, #25
 8005d28:	f53f af12 	bmi.w	8005b50 <_vfiprintf_r+0x4c>
 8005d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d2e:	e711      	b.n	8005b54 <_vfiprintf_r+0x50>
 8005d30:	ab03      	add	r3, sp, #12
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	462a      	mov	r2, r5
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <_vfiprintf_r+0x258>)
 8005d38:	a904      	add	r1, sp, #16
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f000 f880 	bl	8005e40 <_printf_i>
 8005d40:	e7e4      	b.n	8005d0c <_vfiprintf_r+0x208>
 8005d42:	bf00      	nop
 8005d44:	0800628c 	.word	0x0800628c
 8005d48:	080062ac 	.word	0x080062ac
 8005d4c:	0800626c 	.word	0x0800626c
 8005d50:	080062cc 	.word	0x080062cc
 8005d54:	080062d6 	.word	0x080062d6
 8005d58:	00000000 	.word	0x00000000
 8005d5c:	08005adf 	.word	0x08005adf
 8005d60:	080062d2 	.word	0x080062d2

08005d64 <_printf_common>:
 8005d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	4616      	mov	r6, r2
 8005d6a:	4699      	mov	r9, r3
 8005d6c:	688a      	ldr	r2, [r1, #8]
 8005d6e:	690b      	ldr	r3, [r1, #16]
 8005d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d74:	4293      	cmp	r3, r2
 8005d76:	bfb8      	it	lt
 8005d78:	4613      	movlt	r3, r2
 8005d7a:	6033      	str	r3, [r6, #0]
 8005d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d80:	4607      	mov	r7, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	b10a      	cbz	r2, 8005d8a <_printf_common+0x26>
 8005d86:	3301      	adds	r3, #1
 8005d88:	6033      	str	r3, [r6, #0]
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	0699      	lsls	r1, r3, #26
 8005d8e:	bf42      	ittt	mi
 8005d90:	6833      	ldrmi	r3, [r6, #0]
 8005d92:	3302      	addmi	r3, #2
 8005d94:	6033      	strmi	r3, [r6, #0]
 8005d96:	6825      	ldr	r5, [r4, #0]
 8005d98:	f015 0506 	ands.w	r5, r5, #6
 8005d9c:	d106      	bne.n	8005dac <_printf_common+0x48>
 8005d9e:	f104 0a19 	add.w	sl, r4, #25
 8005da2:	68e3      	ldr	r3, [r4, #12]
 8005da4:	6832      	ldr	r2, [r6, #0]
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	42ab      	cmp	r3, r5
 8005daa:	dc26      	bgt.n	8005dfa <_printf_common+0x96>
 8005dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db0:	1e13      	subs	r3, r2, #0
 8005db2:	6822      	ldr	r2, [r4, #0]
 8005db4:	bf18      	it	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	0692      	lsls	r2, r2, #26
 8005dba:	d42b      	bmi.n	8005e14 <_printf_common+0xb0>
 8005dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	47c0      	blx	r8
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d01e      	beq.n	8005e08 <_printf_common+0xa4>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	68e5      	ldr	r5, [r4, #12]
 8005dce:	6832      	ldr	r2, [r6, #0]
 8005dd0:	f003 0306 	and.w	r3, r3, #6
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	bf08      	it	eq
 8005dd8:	1aad      	subeq	r5, r5, r2
 8005dda:	68a3      	ldr	r3, [r4, #8]
 8005ddc:	6922      	ldr	r2, [r4, #16]
 8005dde:	bf0c      	ite	eq
 8005de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de4:	2500      	movne	r5, #0
 8005de6:	4293      	cmp	r3, r2
 8005de8:	bfc4      	itt	gt
 8005dea:	1a9b      	subgt	r3, r3, r2
 8005dec:	18ed      	addgt	r5, r5, r3
 8005dee:	2600      	movs	r6, #0
 8005df0:	341a      	adds	r4, #26
 8005df2:	42b5      	cmp	r5, r6
 8005df4:	d11a      	bne.n	8005e2c <_printf_common+0xc8>
 8005df6:	2000      	movs	r0, #0
 8005df8:	e008      	b.n	8005e0c <_printf_common+0xa8>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4652      	mov	r2, sl
 8005dfe:	4649      	mov	r1, r9
 8005e00:	4638      	mov	r0, r7
 8005e02:	47c0      	blx	r8
 8005e04:	3001      	adds	r0, #1
 8005e06:	d103      	bne.n	8005e10 <_printf_common+0xac>
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e10:	3501      	adds	r5, #1
 8005e12:	e7c6      	b.n	8005da2 <_printf_common+0x3e>
 8005e14:	18e1      	adds	r1, r4, r3
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	2030      	movs	r0, #48	; 0x30
 8005e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e1e:	4422      	add	r2, r4
 8005e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e28:	3302      	adds	r3, #2
 8005e2a:	e7c7      	b.n	8005dbc <_printf_common+0x58>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	4622      	mov	r2, r4
 8005e30:	4649      	mov	r1, r9
 8005e32:	4638      	mov	r0, r7
 8005e34:	47c0      	blx	r8
 8005e36:	3001      	adds	r0, #1
 8005e38:	d0e6      	beq.n	8005e08 <_printf_common+0xa4>
 8005e3a:	3601      	adds	r6, #1
 8005e3c:	e7d9      	b.n	8005df2 <_printf_common+0x8e>
	...

08005e40 <_printf_i>:
 8005e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e44:	7e0f      	ldrb	r7, [r1, #24]
 8005e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e48:	2f78      	cmp	r7, #120	; 0x78
 8005e4a:	4691      	mov	r9, r2
 8005e4c:	4680      	mov	r8, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	469a      	mov	sl, r3
 8005e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e56:	d807      	bhi.n	8005e68 <_printf_i+0x28>
 8005e58:	2f62      	cmp	r7, #98	; 0x62
 8005e5a:	d80a      	bhi.n	8005e72 <_printf_i+0x32>
 8005e5c:	2f00      	cmp	r7, #0
 8005e5e:	f000 80d8 	beq.w	8006012 <_printf_i+0x1d2>
 8005e62:	2f58      	cmp	r7, #88	; 0x58
 8005e64:	f000 80a3 	beq.w	8005fae <_printf_i+0x16e>
 8005e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e70:	e03a      	b.n	8005ee8 <_printf_i+0xa8>
 8005e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e76:	2b15      	cmp	r3, #21
 8005e78:	d8f6      	bhi.n	8005e68 <_printf_i+0x28>
 8005e7a:	a101      	add	r1, pc, #4	; (adr r1, 8005e80 <_printf_i+0x40>)
 8005e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e80:	08005ed9 	.word	0x08005ed9
 8005e84:	08005eed 	.word	0x08005eed
 8005e88:	08005e69 	.word	0x08005e69
 8005e8c:	08005e69 	.word	0x08005e69
 8005e90:	08005e69 	.word	0x08005e69
 8005e94:	08005e69 	.word	0x08005e69
 8005e98:	08005eed 	.word	0x08005eed
 8005e9c:	08005e69 	.word	0x08005e69
 8005ea0:	08005e69 	.word	0x08005e69
 8005ea4:	08005e69 	.word	0x08005e69
 8005ea8:	08005e69 	.word	0x08005e69
 8005eac:	08005ff9 	.word	0x08005ff9
 8005eb0:	08005f1d 	.word	0x08005f1d
 8005eb4:	08005fdb 	.word	0x08005fdb
 8005eb8:	08005e69 	.word	0x08005e69
 8005ebc:	08005e69 	.word	0x08005e69
 8005ec0:	0800601b 	.word	0x0800601b
 8005ec4:	08005e69 	.word	0x08005e69
 8005ec8:	08005f1d 	.word	0x08005f1d
 8005ecc:	08005e69 	.word	0x08005e69
 8005ed0:	08005e69 	.word	0x08005e69
 8005ed4:	08005fe3 	.word	0x08005fe3
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	1d1a      	adds	r2, r3, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	602a      	str	r2, [r5, #0]
 8005ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0a3      	b.n	8006034 <_printf_i+0x1f4>
 8005eec:	6820      	ldr	r0, [r4, #0]
 8005eee:	6829      	ldr	r1, [r5, #0]
 8005ef0:	0606      	lsls	r6, r0, #24
 8005ef2:	f101 0304 	add.w	r3, r1, #4
 8005ef6:	d50a      	bpl.n	8005f0e <_printf_i+0xce>
 8005ef8:	680e      	ldr	r6, [r1, #0]
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	2e00      	cmp	r6, #0
 8005efe:	da03      	bge.n	8005f08 <_printf_i+0xc8>
 8005f00:	232d      	movs	r3, #45	; 0x2d
 8005f02:	4276      	negs	r6, r6
 8005f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f08:	485e      	ldr	r0, [pc, #376]	; (8006084 <_printf_i+0x244>)
 8005f0a:	230a      	movs	r3, #10
 8005f0c:	e019      	b.n	8005f42 <_printf_i+0x102>
 8005f0e:	680e      	ldr	r6, [r1, #0]
 8005f10:	602b      	str	r3, [r5, #0]
 8005f12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f16:	bf18      	it	ne
 8005f18:	b236      	sxthne	r6, r6
 8005f1a:	e7ef      	b.n	8005efc <_printf_i+0xbc>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	6820      	ldr	r0, [r4, #0]
 8005f20:	1d19      	adds	r1, r3, #4
 8005f22:	6029      	str	r1, [r5, #0]
 8005f24:	0601      	lsls	r1, r0, #24
 8005f26:	d501      	bpl.n	8005f2c <_printf_i+0xec>
 8005f28:	681e      	ldr	r6, [r3, #0]
 8005f2a:	e002      	b.n	8005f32 <_printf_i+0xf2>
 8005f2c:	0646      	lsls	r6, r0, #25
 8005f2e:	d5fb      	bpl.n	8005f28 <_printf_i+0xe8>
 8005f30:	881e      	ldrh	r6, [r3, #0]
 8005f32:	4854      	ldr	r0, [pc, #336]	; (8006084 <_printf_i+0x244>)
 8005f34:	2f6f      	cmp	r7, #111	; 0x6f
 8005f36:	bf0c      	ite	eq
 8005f38:	2308      	moveq	r3, #8
 8005f3a:	230a      	movne	r3, #10
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f42:	6865      	ldr	r5, [r4, #4]
 8005f44:	60a5      	str	r5, [r4, #8]
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	bfa2      	ittt	ge
 8005f4a:	6821      	ldrge	r1, [r4, #0]
 8005f4c:	f021 0104 	bicge.w	r1, r1, #4
 8005f50:	6021      	strge	r1, [r4, #0]
 8005f52:	b90e      	cbnz	r6, 8005f58 <_printf_i+0x118>
 8005f54:	2d00      	cmp	r5, #0
 8005f56:	d04d      	beq.n	8005ff4 <_printf_i+0x1b4>
 8005f58:	4615      	mov	r5, r2
 8005f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005f62:	5dc7      	ldrb	r7, [r0, r7]
 8005f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f68:	4637      	mov	r7, r6
 8005f6a:	42bb      	cmp	r3, r7
 8005f6c:	460e      	mov	r6, r1
 8005f6e:	d9f4      	bls.n	8005f5a <_printf_i+0x11a>
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d10b      	bne.n	8005f8c <_printf_i+0x14c>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	07de      	lsls	r6, r3, #31
 8005f78:	d508      	bpl.n	8005f8c <_printf_i+0x14c>
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	6861      	ldr	r1, [r4, #4]
 8005f7e:	4299      	cmp	r1, r3
 8005f80:	bfde      	ittt	le
 8005f82:	2330      	movle	r3, #48	; 0x30
 8005f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f8c:	1b52      	subs	r2, r2, r5
 8005f8e:	6122      	str	r2, [r4, #16]
 8005f90:	f8cd a000 	str.w	sl, [sp]
 8005f94:	464b      	mov	r3, r9
 8005f96:	aa03      	add	r2, sp, #12
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	f7ff fee2 	bl	8005d64 <_printf_common>
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d14c      	bne.n	800603e <_printf_i+0x1fe>
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	b004      	add	sp, #16
 8005faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fae:	4835      	ldr	r0, [pc, #212]	; (8006084 <_printf_i+0x244>)
 8005fb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fb4:	6829      	ldr	r1, [r5, #0]
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fbc:	6029      	str	r1, [r5, #0]
 8005fbe:	061d      	lsls	r5, r3, #24
 8005fc0:	d514      	bpl.n	8005fec <_printf_i+0x1ac>
 8005fc2:	07df      	lsls	r7, r3, #31
 8005fc4:	bf44      	itt	mi
 8005fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8005fca:	6023      	strmi	r3, [r4, #0]
 8005fcc:	b91e      	cbnz	r6, 8005fd6 <_printf_i+0x196>
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	f023 0320 	bic.w	r3, r3, #32
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	2310      	movs	r3, #16
 8005fd8:	e7b0      	b.n	8005f3c <_printf_i+0xfc>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	f043 0320 	orr.w	r3, r3, #32
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	2378      	movs	r3, #120	; 0x78
 8005fe4:	4828      	ldr	r0, [pc, #160]	; (8006088 <_printf_i+0x248>)
 8005fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fea:	e7e3      	b.n	8005fb4 <_printf_i+0x174>
 8005fec:	0659      	lsls	r1, r3, #25
 8005fee:	bf48      	it	mi
 8005ff0:	b2b6      	uxthmi	r6, r6
 8005ff2:	e7e6      	b.n	8005fc2 <_printf_i+0x182>
 8005ff4:	4615      	mov	r5, r2
 8005ff6:	e7bb      	b.n	8005f70 <_printf_i+0x130>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	6826      	ldr	r6, [r4, #0]
 8005ffc:	6961      	ldr	r1, [r4, #20]
 8005ffe:	1d18      	adds	r0, r3, #4
 8006000:	6028      	str	r0, [r5, #0]
 8006002:	0635      	lsls	r5, r6, #24
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	d501      	bpl.n	800600c <_printf_i+0x1cc>
 8006008:	6019      	str	r1, [r3, #0]
 800600a:	e002      	b.n	8006012 <_printf_i+0x1d2>
 800600c:	0670      	lsls	r0, r6, #25
 800600e:	d5fb      	bpl.n	8006008 <_printf_i+0x1c8>
 8006010:	8019      	strh	r1, [r3, #0]
 8006012:	2300      	movs	r3, #0
 8006014:	6123      	str	r3, [r4, #16]
 8006016:	4615      	mov	r5, r2
 8006018:	e7ba      	b.n	8005f90 <_printf_i+0x150>
 800601a:	682b      	ldr	r3, [r5, #0]
 800601c:	1d1a      	adds	r2, r3, #4
 800601e:	602a      	str	r2, [r5, #0]
 8006020:	681d      	ldr	r5, [r3, #0]
 8006022:	6862      	ldr	r2, [r4, #4]
 8006024:	2100      	movs	r1, #0
 8006026:	4628      	mov	r0, r5
 8006028:	f7fa f8e2 	bl	80001f0 <memchr>
 800602c:	b108      	cbz	r0, 8006032 <_printf_i+0x1f2>
 800602e:	1b40      	subs	r0, r0, r5
 8006030:	6060      	str	r0, [r4, #4]
 8006032:	6863      	ldr	r3, [r4, #4]
 8006034:	6123      	str	r3, [r4, #16]
 8006036:	2300      	movs	r3, #0
 8006038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800603c:	e7a8      	b.n	8005f90 <_printf_i+0x150>
 800603e:	6923      	ldr	r3, [r4, #16]
 8006040:	462a      	mov	r2, r5
 8006042:	4649      	mov	r1, r9
 8006044:	4640      	mov	r0, r8
 8006046:	47d0      	blx	sl
 8006048:	3001      	adds	r0, #1
 800604a:	d0ab      	beq.n	8005fa4 <_printf_i+0x164>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	079b      	lsls	r3, r3, #30
 8006050:	d413      	bmi.n	800607a <_printf_i+0x23a>
 8006052:	68e0      	ldr	r0, [r4, #12]
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	4298      	cmp	r0, r3
 8006058:	bfb8      	it	lt
 800605a:	4618      	movlt	r0, r3
 800605c:	e7a4      	b.n	8005fa8 <_printf_i+0x168>
 800605e:	2301      	movs	r3, #1
 8006060:	4632      	mov	r2, r6
 8006062:	4649      	mov	r1, r9
 8006064:	4640      	mov	r0, r8
 8006066:	47d0      	blx	sl
 8006068:	3001      	adds	r0, #1
 800606a:	d09b      	beq.n	8005fa4 <_printf_i+0x164>
 800606c:	3501      	adds	r5, #1
 800606e:	68e3      	ldr	r3, [r4, #12]
 8006070:	9903      	ldr	r1, [sp, #12]
 8006072:	1a5b      	subs	r3, r3, r1
 8006074:	42ab      	cmp	r3, r5
 8006076:	dcf2      	bgt.n	800605e <_printf_i+0x21e>
 8006078:	e7eb      	b.n	8006052 <_printf_i+0x212>
 800607a:	2500      	movs	r5, #0
 800607c:	f104 0619 	add.w	r6, r4, #25
 8006080:	e7f5      	b.n	800606e <_printf_i+0x22e>
 8006082:	bf00      	nop
 8006084:	080062dd 	.word	0x080062dd
 8006088:	080062ee 	.word	0x080062ee

0800608c <_sbrk_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4d06      	ldr	r5, [pc, #24]	; (80060a8 <_sbrk_r+0x1c>)
 8006090:	2300      	movs	r3, #0
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	602b      	str	r3, [r5, #0]
 8006098:	f7fb fa98 	bl	80015cc <_sbrk>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_sbrk_r+0x1a>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_sbrk_r+0x1a>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	20000228 	.word	0x20000228

080060ac <__sread>:
 80060ac:	b510      	push	{r4, lr}
 80060ae:	460c      	mov	r4, r1
 80060b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b4:	f000 f8a0 	bl	80061f8 <_read_r>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	bfab      	itete	ge
 80060bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060be:	89a3      	ldrhlt	r3, [r4, #12]
 80060c0:	181b      	addge	r3, r3, r0
 80060c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060c6:	bfac      	ite	ge
 80060c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ca:	81a3      	strhlt	r3, [r4, #12]
 80060cc:	bd10      	pop	{r4, pc}

080060ce <__swrite>:
 80060ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d2:	461f      	mov	r7, r3
 80060d4:	898b      	ldrh	r3, [r1, #12]
 80060d6:	05db      	lsls	r3, r3, #23
 80060d8:	4605      	mov	r5, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	4616      	mov	r6, r2
 80060de:	d505      	bpl.n	80060ec <__swrite+0x1e>
 80060e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e4:	2302      	movs	r3, #2
 80060e6:	2200      	movs	r2, #0
 80060e8:	f000 f868 	bl	80061bc <_lseek_r>
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	4632      	mov	r2, r6
 80060fa:	463b      	mov	r3, r7
 80060fc:	4628      	mov	r0, r5
 80060fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006102:	f000 b817 	b.w	8006134 <_write_r>

08006106 <__sseek>:
 8006106:	b510      	push	{r4, lr}
 8006108:	460c      	mov	r4, r1
 800610a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610e:	f000 f855 	bl	80061bc <_lseek_r>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	bf15      	itete	ne
 8006118:	6560      	strne	r0, [r4, #84]	; 0x54
 800611a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800611e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006122:	81a3      	strheq	r3, [r4, #12]
 8006124:	bf18      	it	ne
 8006126:	81a3      	strhne	r3, [r4, #12]
 8006128:	bd10      	pop	{r4, pc}

0800612a <__sclose>:
 800612a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612e:	f000 b813 	b.w	8006158 <_close_r>
	...

08006134 <_write_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4d07      	ldr	r5, [pc, #28]	; (8006154 <_write_r+0x20>)
 8006138:	4604      	mov	r4, r0
 800613a:	4608      	mov	r0, r1
 800613c:	4611      	mov	r1, r2
 800613e:	2200      	movs	r2, #0
 8006140:	602a      	str	r2, [r5, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	f7fb f9f1 	bl	800152a <_write>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_write_r+0x1e>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_write_r+0x1e>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	20000228 	.word	0x20000228

08006158 <_close_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4d06      	ldr	r5, [pc, #24]	; (8006174 <_close_r+0x1c>)
 800615c:	2300      	movs	r3, #0
 800615e:	4604      	mov	r4, r0
 8006160:	4608      	mov	r0, r1
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	f7fb f9fd 	bl	8001562 <_close>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_close_r+0x1a>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_close_r+0x1a>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000228 	.word	0x20000228

08006178 <_fstat_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4d07      	ldr	r5, [pc, #28]	; (8006198 <_fstat_r+0x20>)
 800617c:	2300      	movs	r3, #0
 800617e:	4604      	mov	r4, r0
 8006180:	4608      	mov	r0, r1
 8006182:	4611      	mov	r1, r2
 8006184:	602b      	str	r3, [r5, #0]
 8006186:	f7fb f9f8 	bl	800157a <_fstat>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	d102      	bne.n	8006194 <_fstat_r+0x1c>
 800618e:	682b      	ldr	r3, [r5, #0]
 8006190:	b103      	cbz	r3, 8006194 <_fstat_r+0x1c>
 8006192:	6023      	str	r3, [r4, #0]
 8006194:	bd38      	pop	{r3, r4, r5, pc}
 8006196:	bf00      	nop
 8006198:	20000228 	.word	0x20000228

0800619c <_isatty_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d06      	ldr	r5, [pc, #24]	; (80061b8 <_isatty_r+0x1c>)
 80061a0:	2300      	movs	r3, #0
 80061a2:	4604      	mov	r4, r0
 80061a4:	4608      	mov	r0, r1
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	f7fb f9f7 	bl	800159a <_isatty>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_isatty_r+0x1a>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_isatty_r+0x1a>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	20000228 	.word	0x20000228

080061bc <_lseek_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	; (80061dc <_lseek_r+0x20>)
 80061c0:	4604      	mov	r4, r0
 80061c2:	4608      	mov	r0, r1
 80061c4:	4611      	mov	r1, r2
 80061c6:	2200      	movs	r2, #0
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f7fb f9f0 	bl	80015b0 <_lseek>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_lseek_r+0x1e>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_lseek_r+0x1e>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	20000228 	.word	0x20000228

080061e0 <__malloc_lock>:
 80061e0:	4801      	ldr	r0, [pc, #4]	; (80061e8 <__malloc_lock+0x8>)
 80061e2:	f7ff bb1d 	b.w	8005820 <__retarget_lock_acquire_recursive>
 80061e6:	bf00      	nop
 80061e8:	2000021c 	.word	0x2000021c

080061ec <__malloc_unlock>:
 80061ec:	4801      	ldr	r0, [pc, #4]	; (80061f4 <__malloc_unlock+0x8>)
 80061ee:	f7ff bb18 	b.w	8005822 <__retarget_lock_release_recursive>
 80061f2:	bf00      	nop
 80061f4:	2000021c 	.word	0x2000021c

080061f8 <_read_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4d07      	ldr	r5, [pc, #28]	; (8006218 <_read_r+0x20>)
 80061fc:	4604      	mov	r4, r0
 80061fe:	4608      	mov	r0, r1
 8006200:	4611      	mov	r1, r2
 8006202:	2200      	movs	r2, #0
 8006204:	602a      	str	r2, [r5, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	f7fb f972 	bl	80014f0 <_read>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_read_r+0x1e>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	b103      	cbz	r3, 8006216 <_read_r+0x1e>
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	20000228 	.word	0x20000228

0800621c <_init>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr

08006228 <_fini>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	bf00      	nop
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr
