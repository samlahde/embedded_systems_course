
Ardu_auto_v000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006490  08006490  00016490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800662c  0800662c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800662c  0800662c  0001662c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006634  08006634  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006634  08006634  00016634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800663c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001bc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0ae  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b1  00000000  00000000  0002d14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0002f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a30  00000000  00000000  0002fd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a54  00000000  00000000  00030738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ddbd  00000000  00000000  0005618c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e21d4  00000000  00000000  00063f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014611d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003474  00000000  00000000  00146170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006478 	.word	0x08006478

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006478 	.word	0x08006478

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <handle_bt_msg>:
#include <L3G4200D.h>
#include <string.h>
#include "bt_control.h"
#include "motor_control.h"

void handle_bt_msg(uint8_t msg, Cmd_holder cmd) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	6039      	str	r1, [r7, #0]
 800059e:	71fb      	strb	r3, [r7, #7]
	uint8_t new = CMD_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
	uint8_t moving = cmd->moving;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	73bb      	strb	r3, [r7, #14]
	switch(msg) {
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	3b46      	subs	r3, #70	; 0x46
 80005ae:	2b13      	cmp	r3, #19
 80005b0:	d859      	bhi.n	8000666 <handle_bt_msg+0xd2>
 80005b2:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <handle_bt_msg+0x24>)
 80005b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b8:	08000655 	.word	0x08000655
 80005bc:	0800065b 	.word	0x0800065b
 80005c0:	08000667 	.word	0x08000667
 80005c4:	08000667 	.word	0x08000667
 80005c8:	08000667 	.word	0x08000667
 80005cc:	08000667 	.word	0x08000667
 80005d0:	08000609 	.word	0x08000609
 80005d4:	08000667 	.word	0x08000667
 80005d8:	08000667 	.word	0x08000667
 80005dc:	08000667 	.word	0x08000667
 80005e0:	08000667 	.word	0x08000667
 80005e4:	08000667 	.word	0x08000667
 80005e8:	0800062f 	.word	0x0800062f
 80005ec:	08000667 	.word	0x08000667
 80005f0:	08000667 	.word	0x08000667
 80005f4:	08000667 	.word	0x08000667
 80005f8:	08000667 	.word	0x08000667
 80005fc:	08000667 	.word	0x08000667
 8000600:	0800066d 	.word	0x0800066d
 8000604:	08000661 	.word	0x08000661
		case BT_TURN_LEFT:
			switch(moving){
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	2b02      	cmp	r3, #2
 800060c:	d008      	beq.n	8000620 <handle_bt_msg+0x8c>
 800060e:	2b02      	cmp	r3, #2
 8000610:	dc2e      	bgt.n	8000670 <handle_bt_msg+0xdc>
 8000612:	2b00      	cmp	r3, #0
 8000614:	d007      	beq.n	8000626 <handle_bt_msg+0x92>
 8000616:	2b01      	cmp	r3, #1
 8000618:	d12a      	bne.n	8000670 <handle_bt_msg+0xdc>
				case MOVING_FORWARD:
					new = CMD_TURN_LEFT_FWD;
 800061a:	2305      	movs	r3, #5
 800061c:	73fb      	strb	r3, [r7, #15]
					break;
 800061e:	e005      	b.n	800062c <handle_bt_msg+0x98>
				case MOVING_REVERSE:
					new = CMD_TURN_LEFT_REV;
 8000620:	2306      	movs	r3, #6
 8000622:	73fb      	strb	r3, [r7, #15]
					break;
 8000624:	e002      	b.n	800062c <handle_bt_msg+0x98>
				case STOPPED:
					new = CMD_TURN_LEFT_STOPPED;
 8000626:	2307      	movs	r3, #7
 8000628:	73fb      	strb	r3, [r7, #15]
					break;
 800062a:	bf00      	nop
			}
			break;
 800062c:	e020      	b.n	8000670 <handle_bt_msg+0xdc>
		case BT_TURN_RIGHT:
			switch(moving){
 800062e:	7bbb      	ldrb	r3, [r7, #14]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d008      	beq.n	8000646 <handle_bt_msg+0xb2>
 8000634:	2b02      	cmp	r3, #2
 8000636:	dc1d      	bgt.n	8000674 <handle_bt_msg+0xe0>
 8000638:	2b00      	cmp	r3, #0
 800063a:	d007      	beq.n	800064c <handle_bt_msg+0xb8>
 800063c:	2b01      	cmp	r3, #1
 800063e:	d119      	bne.n	8000674 <handle_bt_msg+0xe0>
				case MOVING_FORWARD:
					new = CMD_TURN_RIGHT_FWD;
 8000640:	2308      	movs	r3, #8
 8000642:	73fb      	strb	r3, [r7, #15]
					break;
 8000644:	e005      	b.n	8000652 <handle_bt_msg+0xbe>
				case MOVING_REVERSE:
					new = CMD_TURN_RIGHT_REV;
 8000646:	2309      	movs	r3, #9
 8000648:	73fb      	strb	r3, [r7, #15]
					break;
 800064a:	e002      	b.n	8000652 <handle_bt_msg+0xbe>
				case STOPPED:
					new = CMD_TURN_RIGHT_STOPPED;
 800064c:	230a      	movs	r3, #10
 800064e:	73fb      	strb	r3, [r7, #15]
					break;
 8000650:	bf00      	nop
			}
			break;
 8000652:	e00f      	b.n	8000674 <handle_bt_msg+0xe0>
		case BT_FORWARD:
			new = CMD_FORWARD;
 8000654:	2303      	movs	r3, #3
 8000656:	73fb      	strb	r3, [r7, #15]
			break;
 8000658:	e00d      	b.n	8000676 <handle_bt_msg+0xe2>
		case BT_REVERSE:
			new = CMD_REVERSE;
 800065a:	2304      	movs	r3, #4
 800065c:	73fb      	strb	r3, [r7, #15]
			break;
 800065e:	e00a      	b.n	8000676 <handle_bt_msg+0xe2>
		case BT_X:
			break;
		case BT_Y:
			new = CMD_FAST_STOP;
 8000660:	2302      	movs	r3, #2
 8000662:	73fb      	strb	r3, [r7, #15]
			break;
 8000664:	e007      	b.n	8000676 <handle_bt_msg+0xe2>
		default:
			new = CMD_NONE;
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
			break;
 800066a:	e004      	b.n	8000676 <handle_bt_msg+0xe2>
			break;
 800066c:	bf00      	nop
 800066e:	e002      	b.n	8000676 <handle_bt_msg+0xe2>
			break;
 8000670:	bf00      	nop
 8000672:	e000      	b.n	8000676 <handle_bt_msg+0xe2>
			break;
 8000674:	bf00      	nop
	}
	cmd->new_cmd = new;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	7bfa      	ldrb	r2, [r7, #15]
 800067a:	705a      	strb	r2, [r3, #1]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000690:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000694:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d013      	beq.n	80006c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00b      	beq.n	80006c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006b0:	e000      	b.n	80006b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f9      	beq.n	80006b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006c8:	687b      	ldr	r3, [r7, #4]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <__io_putchar>:
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

//For printing debug data into monitoring
int __io_putchar(int ch)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffd1 	bl	8000688 <ITM_SendChar>
	return(ch);
 80006e6:	687b      	ldr	r3, [r7, #4]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f001 f87b 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f841 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 f9e1 	bl	8000ac4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000702:	f000 f96b 	bl	80009dc <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000706:	f000 f9bd 	bl	8000a84 <MX_DMA_Init>
  MX_USART6_UART_Init();
 800070a:	f000 f991 	bl	8000a30 <MX_USART6_UART_Init>
  MX_ADC3_Init();
 800070e:	f000 f8a3 	bl	8000858 <MX_ADC3_Init>
  MX_SPI1_Init();
 8000712:	f000 f92b 	bl	800096c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //SPI TX off
  HAL_GPIO_WritePin(GPIOF, SPI_CS_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071c:	4815      	ldr	r0, [pc, #84]	; (8000774 <main+0x84>)
 800071e:	f002 fbf7 	bl	8002f10 <HAL_GPIO_WritePin>
	   * IR_data[0] = IR1 ... IR_data[4] = IR5
	   * IR_data[n] = 4095 -> distance > 10 cm
	   * IR_data[n] = 100-300 -> distance < 10 cm
	   * */

	  HAL_ADC_Start_DMA(&hadc3, IR_data, 5);
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2205      	movs	r2, #5
 8000728:	4619      	mov	r1, r3
 800072a:	4813      	ldr	r0, [pc, #76]	; (8000778 <main+0x88>)
 800072c:	f001 f93a 	bl	80019a4 <HAL_ADC_Start_DMA>

	  bt_msg = get_bt_msg();
 8000730:	f000 faf8 	bl	8000d24 <get_bt_msg>
 8000734:	4603      	mov	r3, r0
 8000736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  handle_bt_msg(bt_msg, cmd_holder);
 800073a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800073e:	6a39      	ldr	r1, [r7, #32]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff27 	bl	8000594 <handle_bt_msg>
	  //self_driving(cmd_holder, IR_data);
	  handle_driving(cmd_holder);
 8000746:	6a38      	ldr	r0, [r7, #32]
 8000748:	f000 fc28 	bl	8000f9c <handle_driving>
	  print_driving_state(cmd_holder);
 800074c:	6a38      	ldr	r0, [r7, #32]
 800074e:	f000 fcd5 	bl	80010fc <print_driving_state>
	   * HAL SPI 1 Bus
	   * Addresses in L3G4200D.h library
	   * */


	  gyro_data = Get_gyro_values();
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fafd 	bl	8000d54 <Get_gyro_values>
	  printf("%d %d %d \r\n", gyro_data.x, gyro_data.y, gyro_data.z);
 800075a:	88bb      	ldrh	r3, [r7, #4]
 800075c:	4619      	mov	r1, r3
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	461a      	mov	r2, r3
 8000762:	893b      	ldrh	r3, [r7, #8]
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <main+0x8c>)
 8000766:	f004 fe83 	bl	8005470 <iprintf>

	  // Delay for readability
	  HAL_Delay(1000);
 800076a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076e:	f001 f8b1 	bl	80018d4 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc3, IR_data, 5);
 8000772:	e7d6      	b.n	8000722 <main+0x32>
 8000774:	40021400 	.word	0x40021400
 8000778:	2000008c 	.word	0x2000008c
 800077c:	08006490 	.word	0x08006490

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f004 fe66 	bl	8005460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <SystemClock_Config+0xd0>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a28      	ldr	r2, [pc, #160]	; (8000850 <SystemClock_Config+0xd0>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <SystemClock_Config+0xd0>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007cc:	4a21      	ldr	r2, [pc, #132]	; (8000854 <SystemClock_Config+0xd4>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <SystemClock_Config+0xd4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2310      	movs	r3, #16
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f4:	2308      	movs	r3, #8
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007f8:	2332      	movs	r3, #50	; 0x32
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000800:	2307      	movs	r3, #7
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f002 fb9b 	bl	8002f44 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000814:	f000 fb08 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000824:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2101      	movs	r1, #1
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fdfc 	bl	8003434 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000842:	f000 faf1 	bl	8000e28 <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	; 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800086a:	4b3d      	ldr	r3, [pc, #244]	; (8000960 <MX_ADC3_Init+0x108>)
 800086c:	4a3d      	ldr	r2, [pc, #244]	; (8000964 <MX_ADC3_Init+0x10c>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000870:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <MX_ADC3_Init+0x108>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000876:	4b3a      	ldr	r3, [pc, #232]	; (8000960 <MX_ADC3_Init+0x108>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800087c:	4b38      	ldr	r3, [pc, #224]	; (8000960 <MX_ADC3_Init+0x108>)
 800087e:	2201      	movs	r2, #1
 8000880:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000882:	4b37      	ldr	r3, [pc, #220]	; (8000960 <MX_ADC3_Init+0x108>)
 8000884:	2200      	movs	r2, #0
 8000886:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b35      	ldr	r3, [pc, #212]	; (8000960 <MX_ADC3_Init+0x108>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000890:	4b33      	ldr	r3, [pc, #204]	; (8000960 <MX_ADC3_Init+0x108>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000896:	4b32      	ldr	r3, [pc, #200]	; (8000960 <MX_ADC3_Init+0x108>)
 8000898:	4a33      	ldr	r2, [pc, #204]	; (8000968 <MX_ADC3_Init+0x110>)
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b30      	ldr	r3, [pc, #192]	; (8000960 <MX_ADC3_Init+0x108>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 5;
 80008a2:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <MX_ADC3_Init+0x108>)
 80008a4:	2205      	movs	r2, #5
 80008a6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008a8:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <MX_ADC3_Init+0x108>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b0:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <MX_ADC3_Init+0x108>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008b6:	482a      	ldr	r0, [pc, #168]	; (8000960 <MX_ADC3_Init+0x108>)
 80008b8:	f001 f830 	bl	800191c <HAL_ADC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f000 fab1 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008c6:	2308      	movs	r3, #8
 80008c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4822      	ldr	r0, [pc, #136]	; (8000960 <MX_ADC3_Init+0x108>)
 80008d8:	f001 f992 	bl	8001c00 <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80008e2:	f000 faa1 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008e6:	230f      	movs	r3, #15
 80008e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	481b      	ldr	r0, [pc, #108]	; (8000960 <MX_ADC3_Init+0x108>)
 80008f4:	f001 f984 	bl	8001c00 <HAL_ADC_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 80008fe:	f000 fa93 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000902:	2309      	movs	r3, #9
 8000904:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000906:	2303      	movs	r3, #3
 8000908:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	4619      	mov	r1, r3
 800090e:	4814      	ldr	r0, [pc, #80]	; (8000960 <MX_ADC3_Init+0x108>)
 8000910:	f001 f976 	bl	8001c00 <HAL_ADC_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 800091a:	f000 fa85 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800091e:	230d      	movs	r3, #13
 8000920:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000922:	2304      	movs	r3, #4
 8000924:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_ADC3_Init+0x108>)
 800092c:	f001 f968 	bl	8001c00 <HAL_ADC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8000936:	f000 fa77 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800093a:	230a      	movs	r3, #10
 800093c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800093e:	2305      	movs	r3, #5
 8000940:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <MX_ADC3_Init+0x108>)
 8000948:	f001 f95a 	bl	8001c00 <HAL_ADC_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8000952:	f000 fa69 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000008c 	.word	0x2000008c
 8000964:	40012200 	.word	0x40012200
 8000968:	0f000001 	.word	0x0f000001

0800096c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_SPI1_Init+0x68>)
 8000972:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <MX_SPI1_Init+0x6c>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_SPI1_Init+0x68>)
 8000978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800097c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_SPI1_Init+0x68>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_SPI1_Init+0x68>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_SPI1_Init+0x68>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_SPI1_Init+0x68>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_SPI1_Init+0x68>)
 8000998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <MX_SPI1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_SPI1_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <MX_SPI1_Init+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_SPI1_Init+0x68>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <MX_SPI1_Init+0x68>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_SPI1_Init+0x68>)
 80009be:	f002 ff59 	bl	8003874 <HAL_SPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009c8:	f000 fa2e 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  gyroInit();
 80009cc:	f000 fa0c 	bl	8000de8 <gyroInit>
  /* USER CODE END SPI1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000134 	.word	0x20000134
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART2_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a14:	f003 fcd6 	bl	80043c4 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 fa03 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000018c 	.word	0x2000018c
 8000a2c:	40004400 	.word	0x40004400

08000a30 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_USART6_UART_Init+0x4c>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_USART6_UART_Init+0x50>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_USART6_UART_Init+0x4c>)
 8000a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_USART6_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_USART6_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_USART6_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_USART6_UART_Init+0x4c>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_USART6_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_USART6_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_USART6_UART_Init+0x4c>)
 8000a68:	f003 fcac 	bl	80043c4 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a72:	f000 f9d9 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200001d0 	.word	0x200001d0
 8000a80:	40011400 	.word	0x40011400

08000a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_DMA_Init+0x3c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <MX_DMA_Init+0x3c>)
 8000a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_DMA_Init+0x3c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2038      	movs	r0, #56	; 0x38
 8000aac:	f001 fc33 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ab0:	2038      	movs	r0, #56	; 0x38
 8000ab2:	f001 fc4c 	bl	800234e <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	4b5d      	ldr	r3, [pc, #372]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a5c      	ldr	r2, [pc, #368]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000ae4:	f043 0320 	orr.w	r3, r3, #32
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b5a      	ldr	r3, [pc, #360]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0320 	and.w	r3, r3, #32
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	4b56      	ldr	r3, [pc, #344]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a55      	ldr	r2, [pc, #340]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b4f      	ldr	r3, [pc, #316]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a4e      	ldr	r2, [pc, #312]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b4c      	ldr	r3, [pc, #304]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b48      	ldr	r3, [pc, #288]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a47      	ldr	r2, [pc, #284]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b38:	f043 0310 	orr.w	r3, r3, #16
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0310 	and.w	r3, r3, #16
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a39      	ldr	r2, [pc, #228]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_GPIO_Init+0x190>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, IN1_Pin|ENA_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000ba4:	482c      	ldr	r0, [pc, #176]	; (8000c58 <MX_GPIO_Init+0x194>)
 8000ba6:	f002 f9b3 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb0:	4829      	ldr	r0, [pc, #164]	; (8000c58 <MX_GPIO_Init+0x194>)
 8000bb2:	f002 f9ad 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI_INT_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8000bbc:	4827      	ldr	r0, [pc, #156]	; (8000c5c <MX_GPIO_Init+0x198>)
 8000bbe:	f002 f9a7 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin|IN2_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000bc8:	4825      	ldr	r0, [pc, #148]	; (8000c60 <MX_GPIO_Init+0x19c>)
 8000bca:	f002 f9a1 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin ENB_Pin ENA_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|ENB_Pin|ENA_Pin;
 8000bce:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <MX_GPIO_Init+0x194>)
 8000be8:	f001 ffce 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_INT_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = SPI_INT_Pin|IN3_Pin|IN4_Pin;
 8000bec:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4815      	ldr	r0, [pc, #84]	; (8000c5c <MX_GPIO_Init+0x198>)
 8000c06:	f001 ffbf 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin IN2_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|IN2_Pin;
 8000c0a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c14:	2302      	movs	r3, #2
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	480f      	ldr	r0, [pc, #60]	; (8000c60 <MX_GPIO_Init+0x19c>)
 8000c24:	f001 ffb0 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	2312      	movs	r3, #18
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4807      	ldr	r0, [pc, #28]	; (8000c64 <MX_GPIO_Init+0x1a0>)
 8000c46:	f001 ff9f 	bl	8002b88 <HAL_GPIO_Init>

}
 8000c4a:	bf00      	nop
 8000c4c:	3730      	adds	r7, #48	; 0x30
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40021400 	.word	0x40021400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	40020400 	.word	0x40020400

08000c68 <SPIWrite>:

/* USER CODE BEGIN 4 */
void SPIWrite(uint8_t address, uint8_t data)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71bb      	strb	r3, [r7, #6]
  address |= 0x40;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	71fb      	strb	r3, [r7, #7]
  //SPI TX on
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <SPIWrite+0x58>)
 8000c8a:	f002 f941 	bl	8002f10 <HAL_GPIO_WritePin>
  //SPI address transmit
  HAL_SPI_Transmit(&hspi1, &address, sizeof(address), HAL_MAX_DELAY);
 8000c8e:	1df9      	adds	r1, r7, #7
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	2201      	movs	r2, #1
 8000c96:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <SPIWrite+0x5c>)
 8000c98:	f002 fe75 	bl	8003986 <HAL_SPI_Transmit>
  //SPI data transmit
  HAL_SPI_Transmit(&hspi1, &data, sizeof(data), HAL_MAX_DELAY);
 8000c9c:	1db9      	adds	r1, r7, #6
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <SPIWrite+0x5c>)
 8000ca6:	f002 fe6e 	bl	8003986 <HAL_SPI_Transmit>
  //SPI TX off
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <SPIWrite+0x58>)
 8000cb2:	f002 f92d 	bl	8002f10 <HAL_GPIO_WritePin>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40020c00 	.word	0x40020c00
 8000cc4:	20000134 	.word	0x20000134

08000cc8 <SPIRead>:

uint8_t SPIRead(uint8_t address)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  address |= 0xA0;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	71fb      	strb	r3, [r7, #7]
  //SPI TX on
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <SPIRead+0x54>)
 8000ce4:	f002 f914 	bl	8002f10 <HAL_GPIO_WritePin>
  //SPI address transmit
  HAL_SPI_Transmit(&hspi1, &address, sizeof(address), HAL_MAX_DELAY);
 8000ce8:	1df9      	adds	r1, r7, #7
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	2201      	movs	r2, #1
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <SPIRead+0x58>)
 8000cf2:	f002 fe48 	bl	8003986 <HAL_SPI_Transmit>
  //SPI data receive
  HAL_SPI_Receive(&hspi1, &data, sizeof(data), HAL_MAX_DELAY);
 8000cf6:	f107 010f 	add.w	r1, r7, #15
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <SPIRead+0x58>)
 8000d02:	f002 ff7c 	bl	8003bfe <HAL_SPI_Receive>
  //SPI TX off
  HAL_GPIO_WritePin(GPIOD, SPI_CS_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <SPIRead+0x54>)
 8000d0e:	f002 f8ff 	bl	8002f10 <HAL_GPIO_WritePin>
  return data;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40020c00 	.word	0x40020c00
 8000d20:	20000134 	.word	0x20000134

08000d24 <get_bt_msg>:


uint8_t get_bt_msg() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  uint8_t msg;
  HAL_UART_Receive(&huart6, &msg, sizeof(msg), 500);
 8000d2a:	1df9      	adds	r1, r7, #7
 8000d2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d30:	2201      	movs	r2, #1
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <get_bt_msg+0x28>)
 8000d34:	f003 fb93 	bl	800445e <HAL_UART_Receive>
  printf("%d\r\n", msg);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <get_bt_msg+0x2c>)
 8000d3e:	f004 fb97 	bl	8005470 <iprintf>
  return msg;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200001d0 	.word	0x200001d0
 8000d50:	0800649c 	.word	0x0800649c

08000d54 <Get_gyro_values>:

L3G4200D_output Get_gyro_values()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
//	z_l = SPIRead(L3G4200D_REG_OUT_Z_L);
//	z_h = SPIRead(L3G4200D_REG_OUT_Z_H);
//	gyro_data.x = (x_l & 0xFF) | ((x_h & 0xFF) << 8);
//	gyro_data.y = (y_l & 0xFF) | ((y_h & 0xFF) << 8);
//	gyro_data.z = (z_l & 0xFF) | ((z_h & 0xFF) << 8);
	x_l = SPIRead(ADXL345_REG_DATAX0);
 8000d5c:	2032      	movs	r0, #50	; 0x32
 8000d5e:	f7ff ffb3 	bl	8000cc8 <SPIRead>
 8000d62:	4603      	mov	r3, r0
 8000d64:	75fb      	strb	r3, [r7, #23]
	x_h = SPIRead(ADXL345_REG_DATAX1);
 8000d66:	2033      	movs	r0, #51	; 0x33
 8000d68:	f7ff ffae 	bl	8000cc8 <SPIRead>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	75bb      	strb	r3, [r7, #22]
	y_l = SPIRead(ADXL345_REG_DATAY0);
 8000d70:	2034      	movs	r0, #52	; 0x34
 8000d72:	f7ff ffa9 	bl	8000cc8 <SPIRead>
 8000d76:	4603      	mov	r3, r0
 8000d78:	757b      	strb	r3, [r7, #21]
	y_h = SPIRead(ADXL345_REG_DATAY1);
 8000d7a:	2035      	movs	r0, #53	; 0x35
 8000d7c:	f7ff ffa4 	bl	8000cc8 <SPIRead>
 8000d80:	4603      	mov	r3, r0
 8000d82:	753b      	strb	r3, [r7, #20]
	z_l = SPIRead(ADXL345_REG_DATAZ0);
 8000d84:	2036      	movs	r0, #54	; 0x36
 8000d86:	f7ff ff9f 	bl	8000cc8 <SPIRead>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	74fb      	strb	r3, [r7, #19]
	z_h = SPIRead(ADXL345_REG_DATAZ1);
 8000d8e:	2037      	movs	r0, #55	; 0x37
 8000d90:	f7ff ff9a 	bl	8000cc8 <SPIRead>
 8000d94:	4603      	mov	r3, r0
 8000d96:	74bb      	strb	r3, [r7, #18]
	gyro_data.x = x_l | (x_h << 8);
 8000d98:	7dfb      	ldrb	r3, [r7, #23]
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	7dbb      	ldrb	r3, [r7, #22]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	81bb      	strh	r3, [r7, #12]
	gyro_data.y = y_l | (y_h << 8);
 8000daa:	7d7b      	ldrb	r3, [r7, #21]
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	7d3b      	ldrb	r3, [r7, #20]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	81fb      	strh	r3, [r7, #14]
	gyro_data.z = z_l | (z_h << 8);
 8000dbc:	7cfb      	ldrb	r3, [r7, #19]
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	7cbb      	ldrb	r3, [r7, #18]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	823b      	strh	r3, [r7, #16]

	return gyro_data;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	6010      	str	r0, [r2, #0]
 8000dda:	889b      	ldrh	r3, [r3, #4]
 8000ddc:	8093      	strh	r3, [r2, #4]
}
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <gyroInit>:

void gyroInit()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  scale = 2 & 0x03;
  SPIWrite(L3G4200D_REG_CTRL_REG4, scale << 4);
  // CTRL_REG5 controls high-pass filtering of outputs, use it
  // if you'd like:
  SPIWrite(L3G4200D_REG_CTRL_REG5, 0);*/
  SPIWrite(ADXL345_REG_DATA_FORMAT , 0x0B);
 8000dee:	210b      	movs	r1, #11
 8000df0:	2031      	movs	r0, #49	; 0x31
 8000df2:	f7ff ff39 	bl	8000c68 <SPIWrite>
  SPIWrite(ADXL345_REG_POWER_CTL , 0);
 8000df6:	2100      	movs	r1, #0
 8000df8:	202d      	movs	r0, #45	; 0x2d
 8000dfa:	f7ff ff35 	bl	8000c68 <SPIWrite>
  SPIWrite(ADXL345_REG_POWER_CTL , 8);
 8000dfe:	2108      	movs	r1, #8
 8000e00:	202d      	movs	r0, #45	; 0x2d
 8000e02:	f7ff ff31 	bl	8000c68 <SPIWrite>
  uint8_t me;
  me = SPIRead(ADXL345_REG_DEVID);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ff5e 	bl	8000cc8 <SPIRead>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  printf(" Device ID: %d\r\n", me);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4619      	mov	r1, r3
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <gyroInit+0x3c>)
 8000e16:	f004 fb2b 	bl	8005470 <iprintf>

}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	080064a4 	.word	0x080064a4

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>
	...

08000e34 <motor_set>:
	   * A high, B high -> fast motor stop
	   *
	   * enable low -> motor stop
	   * */

void motor_set(uint8_t motor, uint8_t command){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	4613      	mov	r3, r2
 8000e42:	71bb      	strb	r3, [r7, #6]
	switch(motor){
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <motor_set+0x1c>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d04e      	beq.n	8000eec <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_SET);
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_SET);
					break;
		}
	}
}
 8000e4e:	e09b      	b.n	8000f88 <motor_set+0x154>
			switch(command){
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d84a      	bhi.n	8000eec <motor_set+0xb8>
 8000e56:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <motor_set+0x28>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000eb9 	.word	0x08000eb9
 8000e60:	08000ec7 	.word	0x08000ec7
 8000e64:	08000e6d 	.word	0x08000e6d
 8000e68:	08000e93 	.word	0x08000e93
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	4847      	ldr	r0, [pc, #284]	; (8000f90 <motor_set+0x15c>)
 8000e74:	f002 f84c 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, IN1_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7e:	4844      	ldr	r0, [pc, #272]	; (8000f90 <motor_set+0x15c>)
 8000e80:	f002 f846 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, IN2_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8a:	4842      	ldr	r0, [pc, #264]	; (8000f94 <motor_set+0x160>)
 8000e8c:	f002 f840 	bl	8002f10 <HAL_GPIO_WritePin>
					break;
 8000e90:	e02c      	b.n	8000eec <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e98:	483d      	ldr	r0, [pc, #244]	; (8000f90 <motor_set+0x15c>)
 8000e9a:	f002 f839 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, IN1_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea4:	483a      	ldr	r0, [pc, #232]	; (8000f90 <motor_set+0x15c>)
 8000ea6:	f002 f833 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, IN2_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb0:	4838      	ldr	r0, [pc, #224]	; (8000f94 <motor_set+0x160>)
 8000eb2:	f002 f82d 	bl	8002f10 <HAL_GPIO_WritePin>
					break;
 8000eb6:	e019      	b.n	8000eec <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebe:	4834      	ldr	r0, [pc, #208]	; (8000f90 <motor_set+0x15c>)
 8000ec0:	f002 f826 	bl	8002f10 <HAL_GPIO_WritePin>
					break;
 8000ec4:	e012      	b.n	8000eec <motor_set+0xb8>
					HAL_GPIO_WritePin(GPIOF, ENA_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ecc:	4830      	ldr	r0, [pc, #192]	; (8000f90 <motor_set+0x15c>)
 8000ece:	f002 f81f 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, IN1_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed8:	482d      	ldr	r0, [pc, #180]	; (8000f90 <motor_set+0x15c>)
 8000eda:	f002 f819 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, IN2_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee4:	482b      	ldr	r0, [pc, #172]	; (8000f94 <motor_set+0x160>)
 8000ee6:	f002 f813 	bl	8002f10 <HAL_GPIO_WritePin>
					break;
 8000eea:	bf00      	nop
			switch(command){
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d84a      	bhi.n	8000f88 <motor_set+0x154>
 8000ef2:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <motor_set+0xc4>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f55 	.word	0x08000f55
 8000efc:	08000f63 	.word	0x08000f63
 8000f00:	08000f09 	.word	0x08000f09
 8000f04:	08000f2f 	.word	0x08000f2f
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0e:	4820      	ldr	r0, [pc, #128]	; (8000f90 <motor_set+0x15c>)
 8000f10:	f001 fffe 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f1a:	481f      	ldr	r0, [pc, #124]	; (8000f98 <motor_set+0x164>)
 8000f1c:	f001 fff8 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f26:	481c      	ldr	r0, [pc, #112]	; (8000f98 <motor_set+0x164>)
 8000f28:	f001 fff2 	bl	8002f10 <HAL_GPIO_WritePin>
					break;
 8000f2c:	e02c      	b.n	8000f88 <motor_set+0x154>
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f34:	4816      	ldr	r0, [pc, #88]	; (8000f90 <motor_set+0x15c>)
 8000f36:	f001 ffeb 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f40:	4815      	ldr	r0, [pc, #84]	; (8000f98 <motor_set+0x164>)
 8000f42:	f001 ffe5 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	4812      	ldr	r0, [pc, #72]	; (8000f98 <motor_set+0x164>)
 8000f4e:	f001 ffdf 	bl	8002f10 <HAL_GPIO_WritePin>
					break;
 8000f52:	e019      	b.n	8000f88 <motor_set+0x154>
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5a:	480d      	ldr	r0, [pc, #52]	; (8000f90 <motor_set+0x15c>)
 8000f5c:	f001 ffd8 	bl	8002f10 <HAL_GPIO_WritePin>
					break;
 8000f60:	e012      	b.n	8000f88 <motor_set+0x154>
					HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <motor_set+0x15c>)
 8000f6a:	f001 ffd1 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN3_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <motor_set+0x164>)
 8000f76:	f001 ffcb 	bl	8002f10 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, IN4_Pin, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <motor_set+0x164>)
 8000f82:	f001 ffc5 	bl	8002f10 <HAL_GPIO_WritePin>
					break;
 8000f86:	bf00      	nop
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000

08000f9c <handle_driving>:

void handle_driving(Cmd_holder cmd){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	uint8_t old = cmd->old_cmd;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	73fb      	strb	r3, [r7, #15]
	uint8_t new = cmd->new_cmd;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	73bb      	strb	r3, [r7, #14]
	if (new != old && new != CMD_NONE){
 8000fb0:	7bba      	ldrb	r2, [r7, #14]
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f000 809d 	beq.w	80010f4 <handle_driving+0x158>
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 8099 	beq.w	80010f4 <handle_driving+0x158>
		switch(new){
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	2b09      	cmp	r3, #9
 8000fc8:	f200 8090 	bhi.w	80010ec <handle_driving+0x150>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <handle_driving+0x38>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	0800102d 	.word	0x0800102d
 8000fd8:	08001045 	.word	0x08001045
 8000fdc:	08000ffd 	.word	0x08000ffd
 8000fe0:	08001015 	.word	0x08001015
 8000fe4:	0800105d 	.word	0x0800105d
 8000fe8:	08001075 	.word	0x08001075
 8000fec:	0800108d 	.word	0x0800108d
 8000ff0:	080010a5 	.word	0x080010a5
 8000ff4:	080010bd 	.word	0x080010bd
 8000ff8:	080010d5 	.word	0x080010d5
		    case CMD_FORWARD:
		    	motor_set(LEFT_MT, MT_FORWARD);
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff ff18 	bl	8000e34 <motor_set>
		    	motor_set(RIGHT_MT, MT_FORWARD);
 8001004:	2102      	movs	r1, #2
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff ff14 	bl	8000e34 <motor_set>
		    	cmd->moving = MOVING_FORWARD;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	709a      	strb	r2, [r3, #2]
		    	break;
 8001012:	e06c      	b.n	80010ee <handle_driving+0x152>

		    case CMD_REVERSE:
				motor_set(LEFT_MT, MT_REVERSE);
 8001014:	2103      	movs	r1, #3
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff ff0c 	bl	8000e34 <motor_set>
				motor_set(RIGHT_MT, MT_REVERSE);
 800101c:	2103      	movs	r1, #3
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff ff08 	bl	8000e34 <motor_set>
				cmd->moving = MOVING_REVERSE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2202      	movs	r2, #2
 8001028:	709a      	strb	r2, [r3, #2]
				break;
 800102a:	e060      	b.n	80010ee <handle_driving+0x152>

		    case CMD_STOP:
		    	motor_set(LEFT_MT, MT_STOP);
 800102c:	2100      	movs	r1, #0
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff ff00 	bl	8000e34 <motor_set>
				motor_set(RIGHT_MT, MT_STOP);
 8001034:	2100      	movs	r1, #0
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff fefc 	bl	8000e34 <motor_set>
				cmd->moving = STOPPED;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	709a      	strb	r2, [r3, #2]
				break;
 8001042:	e054      	b.n	80010ee <handle_driving+0x152>

		    case CMD_FAST_STOP:
		    	motor_set(LEFT_MT, MT_FAST_STOP);
 8001044:	2101      	movs	r1, #1
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fef4 	bl	8000e34 <motor_set>
		    	motor_set(RIGHT_MT, MT_FAST_STOP);
 800104c:	2101      	movs	r1, #1
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff fef0 	bl	8000e34 <motor_set>
		    	cmd->moving = STOPPED;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	709a      	strb	r2, [r3, #2]
		    	break;
 800105a:	e048      	b.n	80010ee <handle_driving+0x152>

			case CMD_TURN_LEFT_FWD:
				motor_set(LEFT_MT, MT_STOP);
 800105c:	2100      	movs	r1, #0
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fee8 	bl	8000e34 <motor_set>
				motor_set(RIGHT_MT, MT_FORWARD);
 8001064:	2102      	movs	r1, #2
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff fee4 	bl	8000e34 <motor_set>
				cmd->moving = MOVING_FORWARD;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	709a      	strb	r2, [r3, #2]
				break;
 8001072:	e03c      	b.n	80010ee <handle_driving+0x152>

			case CMD_TURN_LEFT_REV:
				motor_set(LEFT_MT, MT_STOP);
 8001074:	2100      	movs	r1, #0
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff fedc 	bl	8000e34 <motor_set>
				motor_set(RIGHT_MT, MT_REVERSE);
 800107c:	2103      	movs	r1, #3
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff fed8 	bl	8000e34 <motor_set>
				cmd->moving = MOVING_REVERSE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2202      	movs	r2, #2
 8001088:	709a      	strb	r2, [r3, #2]
				break;
 800108a:	e030      	b.n	80010ee <handle_driving+0x152>

			case CMD_TURN_LEFT_STOPPED:
				motor_set(LEFT_MT, MT_REVERSE);
 800108c:	2103      	movs	r1, #3
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fed0 	bl	8000e34 <motor_set>
				motor_set(RIGHT_MT, MT_FORWARD);
 8001094:	2102      	movs	r1, #2
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff fecc 	bl	8000e34 <motor_set>
				cmd->moving = STOPPED;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	709a      	strb	r2, [r3, #2]
				break;
 80010a2:	e024      	b.n	80010ee <handle_driving+0x152>

			case CMD_TURN_RIGHT_FWD:
				motor_set(LEFT_MT, MT_FORWARD);
 80010a4:	2102      	movs	r1, #2
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fec4 	bl	8000e34 <motor_set>
				motor_set(RIGHT_MT, MT_STOP);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff fec0 	bl	8000e34 <motor_set>
				cmd->moving = MOVING_FORWARD;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	709a      	strb	r2, [r3, #2]
				break;
 80010ba:	e018      	b.n	80010ee <handle_driving+0x152>

			case CMD_TURN_RIGHT_REV:
				motor_set(LEFT_MT, MT_REVERSE);
 80010bc:	2103      	movs	r1, #3
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff feb8 	bl	8000e34 <motor_set>
				motor_set(RIGHT_MT, MT_STOP);
 80010c4:	2100      	movs	r1, #0
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff feb4 	bl	8000e34 <motor_set>
				cmd->moving = MOVING_REVERSE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2202      	movs	r2, #2
 80010d0:	709a      	strb	r2, [r3, #2]
				break;
 80010d2:	e00c      	b.n	80010ee <handle_driving+0x152>

			case CMD_TURN_RIGHT_STOPPED:
				motor_set(LEFT_MT, MT_FORWARD);
 80010d4:	2102      	movs	r1, #2
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff feac 	bl	8000e34 <motor_set>
				motor_set(RIGHT_MT, MT_REVERSE);
 80010dc:	2103      	movs	r1, #3
 80010de:	2001      	movs	r0, #1
 80010e0:	f7ff fea8 	bl	8000e34 <motor_set>
				cmd->moving = STOPPED;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	709a      	strb	r2, [r3, #2]
				break;
 80010ea:	e000      	b.n	80010ee <handle_driving+0x152>

			default:
				break;
 80010ec:	bf00      	nop
		}
		cmd->old_cmd = new;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7bba      	ldrb	r2, [r7, #14]
 80010f2:	701a      	strb	r2, [r3, #0]
	}
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <print_driving_state>:

void print_driving_state(Cmd_holder cmd){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	uint8_t left_state, right_state;
	left_state = get_motor_state(LEFT_MT);
 8001104:	2000      	movs	r0, #0
 8001106:	f000 f871 	bl	80011ec <get_motor_state>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
	right_state = get_motor_state(RIGHT_MT);
 800110e:	2001      	movs	r0, #1
 8001110:	f000 f86c 	bl	80011ec <get_motor_state>
 8001114:	4603      	mov	r3, r0
 8001116:	73bb      	strb	r3, [r7, #14]
	if(left_state == MT_FORWARD && right_state == MT_REVERSE){
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d106      	bne.n	800112c <print_driving_state+0x30>
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d103      	bne.n	800112c <print_driving_state+0x30>
		printf("Turning right in place\r\n");
 8001124:	4828      	ldr	r0, [pc, #160]	; (80011c8 <print_driving_state+0xcc>)
 8001126:	f004 fa29 	bl	800557c <puts>
 800112a:	e049      	b.n	80011c0 <print_driving_state+0xc4>
	}
	else if(left_state == MT_REVERSE && right_state == MT_FORWARD){
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2b03      	cmp	r3, #3
 8001130:	d106      	bne.n	8001140 <print_driving_state+0x44>
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d103      	bne.n	8001140 <print_driving_state+0x44>
			printf("Turning left in place\r\n");
 8001138:	4824      	ldr	r0, [pc, #144]	; (80011cc <print_driving_state+0xd0>)
 800113a:	f004 fa1f 	bl	800557c <puts>
 800113e:	e03f      	b.n	80011c0 <print_driving_state+0xc4>
		}
	else if (left_state == MT_FORWARD && right_state != MT_FORWARD){
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d106      	bne.n	8001154 <print_driving_state+0x58>
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d003      	beq.n	8001154 <print_driving_state+0x58>
		printf("Turning forward right\r\n");
 800114c:	4820      	ldr	r0, [pc, #128]	; (80011d0 <print_driving_state+0xd4>)
 800114e:	f004 fa15 	bl	800557c <puts>
 8001152:	e035      	b.n	80011c0 <print_driving_state+0xc4>
	}
	else if(left_state != MT_FORWARD && right_state == MT_FORWARD){
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d006      	beq.n	8001168 <print_driving_state+0x6c>
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d103      	bne.n	8001168 <print_driving_state+0x6c>
		printf("Turning forward left\r\n");
 8001160:	481c      	ldr	r0, [pc, #112]	; (80011d4 <print_driving_state+0xd8>)
 8001162:	f004 fa0b 	bl	800557c <puts>
 8001166:	e02b      	b.n	80011c0 <print_driving_state+0xc4>
	}
	else if(left_state == MT_REVERSE && right_state != MT_REVERSE){
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d106      	bne.n	800117c <print_driving_state+0x80>
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	2b03      	cmp	r3, #3
 8001172:	d003      	beq.n	800117c <print_driving_state+0x80>
			printf("Turning reverse right\r\n");
 8001174:	4818      	ldr	r0, [pc, #96]	; (80011d8 <print_driving_state+0xdc>)
 8001176:	f004 fa01 	bl	800557c <puts>
 800117a:	e021      	b.n	80011c0 <print_driving_state+0xc4>
		}
	else if(left_state != MT_REVERSE && right_state == MT_REVERSE){
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d006      	beq.n	8001190 <print_driving_state+0x94>
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d103      	bne.n	8001190 <print_driving_state+0x94>
			printf("Turning reverse left\r\n");
 8001188:	4814      	ldr	r0, [pc, #80]	; (80011dc <print_driving_state+0xe0>)
 800118a:	f004 f9f7 	bl	800557c <puts>
 800118e:	e017      	b.n	80011c0 <print_driving_state+0xc4>
		}
	else if(left_state == MT_FORWARD && right_state == MT_FORWARD){
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d106      	bne.n	80011a4 <print_driving_state+0xa8>
 8001196:	7bbb      	ldrb	r3, [r7, #14]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d103      	bne.n	80011a4 <print_driving_state+0xa8>
			printf("Moving forward\r\n");
 800119c:	4810      	ldr	r0, [pc, #64]	; (80011e0 <print_driving_state+0xe4>)
 800119e:	f004 f9ed 	bl	800557c <puts>
 80011a2:	e00d      	b.n	80011c0 <print_driving_state+0xc4>
		}
	else if(left_state == MT_REVERSE && right_state == MT_REVERSE){
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d106      	bne.n	80011b8 <print_driving_state+0xbc>
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d103      	bne.n	80011b8 <print_driving_state+0xbc>
			printf("Moving reverse\r\n");
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <print_driving_state+0xe8>)
 80011b2:	f004 f9e3 	bl	800557c <puts>
 80011b6:	e003      	b.n	80011c0 <print_driving_state+0xc4>
		}
	else
		printf("Stopped\r\n");
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <print_driving_state+0xec>)
 80011ba:	f004 f9df 	bl	800557c <puts>

}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	080064b8 	.word	0x080064b8
 80011cc:	080064d0 	.word	0x080064d0
 80011d0:	080064e8 	.word	0x080064e8
 80011d4:	08006500 	.word	0x08006500
 80011d8:	08006518 	.word	0x08006518
 80011dc:	08006530 	.word	0x08006530
 80011e0:	08006548 	.word	0x08006548
 80011e4:	08006558 	.word	0x08006558
 80011e8:	08006568 	.word	0x08006568

080011ec <get_motor_state>:

uint8_t get_motor_state(uint8_t motor){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	uint8_t motor_state = MT_STOP;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState enable, in1, in2;
	if(motor == LEFT_MT){
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d115      	bne.n	800122c <get_motor_state+0x40>
		enable = HAL_GPIO_ReadPin(GPIOF, ENA_Pin);
 8001200:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001204:	4822      	ldr	r0, [pc, #136]	; (8001290 <get_motor_state+0xa4>)
 8001206:	f001 fe6b 	bl	8002ee0 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	73bb      	strb	r3, [r7, #14]
		in1 = HAL_GPIO_ReadPin(GPIOF, IN1_Pin);
 800120e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001212:	481f      	ldr	r0, [pc, #124]	; (8001290 <get_motor_state+0xa4>)
 8001214:	f001 fe64 	bl	8002ee0 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	737b      	strb	r3, [r7, #13]
		in2 = HAL_GPIO_ReadPin(GPIOD, IN2_Pin);
 800121c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001220:	481c      	ldr	r0, [pc, #112]	; (8001294 <get_motor_state+0xa8>)
 8001222:	f001 fe5d 	bl	8002ee0 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	733b      	strb	r3, [r7, #12]
 800122a:	e017      	b.n	800125c <get_motor_state+0x70>
	}
	else if(motor == RIGHT_MT){
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d114      	bne.n	800125c <get_motor_state+0x70>
		enable = HAL_GPIO_ReadPin(ENB_GPIO_Port, ENB_Pin);
 8001232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001236:	4816      	ldr	r0, [pc, #88]	; (8001290 <get_motor_state+0xa4>)
 8001238:	f001 fe52 	bl	8002ee0 <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	73bb      	strb	r3, [r7, #14]
		in1 = HAL_GPIO_ReadPin(GPIOE, IN3_Pin);
 8001240:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001244:	4814      	ldr	r0, [pc, #80]	; (8001298 <get_motor_state+0xac>)
 8001246:	f001 fe4b 	bl	8002ee0 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	737b      	strb	r3, [r7, #13]
		in2 = HAL_GPIO_ReadPin(GPIOE, IN4_Pin);
 800124e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <get_motor_state+0xac>)
 8001254:	f001 fe44 	bl	8002ee0 <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	733b      	strb	r3, [r7, #12]
	}
	if(enable){
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d010      	beq.n	8001284 <get_motor_state+0x98>
		if(in1 && !in2){
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <get_motor_state+0x88>
 8001268:	7b3b      	ldrb	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <get_motor_state+0x88>
			motor_state = MT_FORWARD;
 800126e:	2302      	movs	r3, #2
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e007      	b.n	8001284 <get_motor_state+0x98>
		}
		else if(!in1 && in2){
 8001274:	7b7b      	ldrb	r3, [r7, #13]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d104      	bne.n	8001284 <get_motor_state+0x98>
 800127a:	7b3b      	ldrb	r3, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <get_motor_state+0x98>
			motor_state = MT_REVERSE;
 8001280:	2303      	movs	r3, #3
 8001282:	73fb      	strb	r3, [r7, #15]
		}
	}
	return motor_state;
 8001284:	7bfb      	ldrb	r3, [r7, #15]

}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021400 	.word	0x40021400
 8001294:	40020c00 	.word	0x40020c00
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_MspInit+0x4c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a3d      	ldr	r2, [pc, #244]	; (8001400 <HAL_ADC_MspInit+0x114>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d173      	bne.n	80013f6 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <HAL_ADC_MspInit+0x118>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a3b      	ldr	r2, [pc, #236]	; (8001404 <HAL_ADC_MspInit+0x118>)
 8001318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b39      	ldr	r3, [pc, #228]	; (8001404 <HAL_ADC_MspInit+0x118>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b35      	ldr	r3, [pc, #212]	; (8001404 <HAL_ADC_MspInit+0x118>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a34      	ldr	r2, [pc, #208]	; (8001404 <HAL_ADC_MspInit+0x118>)
 8001334:	f043 0320 	orr.w	r3, r3, #32
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b32      	ldr	r3, [pc, #200]	; (8001404 <HAL_ADC_MspInit+0x118>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <HAL_ADC_MspInit+0x118>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <HAL_ADC_MspInit+0x118>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_ADC_MspInit+0x118>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
    PF5     ------> ADC3_IN15
    PF10     ------> ADC3_IN8
    PC0     ------> ADC3_IN10
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = IR3_Pin|IR2_Pin|IR1_Pin;
 8001362:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	2303      	movs	r3, #3
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4824      	ldr	r0, [pc, #144]	; (8001408 <HAL_ADC_MspInit+0x11c>)
 8001378:	f001 fc06 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR5_Pin|IR4_Pin;
 800137c:	2309      	movs	r3, #9
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001380:	2303      	movs	r3, #3
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <HAL_ADC_MspInit+0x120>)
 8001390:	f001 fbfa 	bl	8002b88 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <HAL_ADC_MspInit+0x124>)
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_ADC_MspInit+0x128>)
 8001398:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_ADC_MspInit+0x124>)
 800139c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013a0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013bc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013c4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013cc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80013da:	480d      	ldr	r0, [pc, #52]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013dc:	f000 ffd2 	bl	8002384 <HAL_DMA_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_ADC_MspInit+0xfe>
    {
      Error_Handler();
 80013e6:	f7ff fd1f 	bl	8000e28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013ee:	639a      	str	r2, [r3, #56]	; 0x38
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_ADC_MspInit+0x124>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40012200 	.word	0x40012200
 8001404:	40023800 	.word	0x40023800
 8001408:	40021400 	.word	0x40021400
 800140c:	40020800 	.word	0x40020800
 8001410:	200000d4 	.word	0x200000d4
 8001414:	40026410 	.word	0x40026410

08001418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a19      	ldr	r2, [pc, #100]	; (800149c <HAL_SPI_MspInit+0x84>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12b      	bne.n	8001492 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDA_Pin;
 8001472:	23e0      	movs	r3, #224	; 0xe0
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001482:	2305      	movs	r3, #5
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <HAL_SPI_MspInit+0x8c>)
 800148e:	f001 fb7b 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40013000 	.word	0x40013000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000

080014a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a36      	ldr	r2, [pc, #216]	; (80015a0 <HAL_UART_MspInit+0xf8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12c      	bne.n	8001524 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a34      	ldr	r2, [pc, #208]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a2d      	ldr	r2, [pc, #180]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001502:	230c      	movs	r3, #12
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001512:	2307      	movs	r3, #7
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4822      	ldr	r0, [pc, #136]	; (80015a8 <HAL_UART_MspInit+0x100>)
 800151e:	f001 fb33 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001522:	e039      	b.n	8001598 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a20      	ldr	r2, [pc, #128]	; (80015ac <HAL_UART_MspInit+0x104>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d134      	bne.n	8001598 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 8001538:	f043 0320 	orr.w	r3, r3, #32
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 8001554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_UART_MspInit+0xfc>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BT_RX_Pin|BT_TX_Pin;
 8001566:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001578:	2308      	movs	r3, #8
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <HAL_UART_MspInit+0x108>)
 8001584:	f001 fb00 	bl	8002b88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2047      	movs	r0, #71	; 0x47
 800158e:	f000 fec2 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001592:	2047      	movs	r0, #71	; 0x47
 8001594:	f000 fedb 	bl	800234e <HAL_NVIC_EnableIRQ>
}
 8001598:	bf00      	nop
 800159a:	3730      	adds	r7, #48	; 0x30
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40004400 	.word	0x40004400
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40011400 	.word	0x40011400
 80015b0:	40021800 	.word	0x40021800

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 f948 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA2_Stream0_IRQHandler+0x10>)
 800160e:	f001 f851 	bl	80026b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200000d4 	.word	0x200000d4

0800161c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <USART6_IRQHandler+0x10>)
 8001622:	f002 ffbf 	bl	80045a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200001d0 	.word	0x200001d0

08001630 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e00a      	b.n	8001658 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001642:	f3af 8000 	nop.w
 8001646:	4601      	mov	r1, r0
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	60ba      	str	r2, [r7, #8]
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbf0      	blt.n	8001642 <_read+0x12>
	}

return len;
 8001660:	687b      	ldr	r3, [r7, #4]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e009      	b.n	8001690 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	60ba      	str	r2, [r7, #8]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff f826 	bl	80006d6 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	dbf1      	blt.n	800167c <_write+0x12>
	}
	return len;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_close>:

int _close(int file)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ca:	605a      	str	r2, [r3, #4]
	return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_isatty>:

int _isatty(int file)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	return 1;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f003 fe66 	bl	800540c <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20030000 	.word	0x20030000
 800176c:	00000400 	.word	0x00000400
 8001770:	20000214 	.word	0x20000214
 8001774:	20000230 	.word	0x20000230

08001778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017a2:	490e      	ldr	r1, [pc, #56]	; (80017dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b8:	4c0b      	ldr	r4, [pc, #44]	; (80017e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017c6:	f7ff ffd7 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f003 fe25 	bl	8005418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7fe ff8f 	bl	80006f0 <main>
  bx  lr    
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017e0:	0800663c 	.word	0x0800663c
  ldr r2, =_sbss
 80017e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017e8:	2000022c 	.word	0x2000022c

080017ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_Init+0x40>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_Init+0x40>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x40>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 fd71 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fd3a 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fd89 	bl	800236a <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 fd51 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000000 	.word	0x20000000
 800188c:	20000008 	.word	0x20000008
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x20>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x24>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_IncTick+0x24>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008
 80018b8:	20000218 	.word	0x20000218

080018bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000218 	.word	0x20000218

080018d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff ffee 	bl	80018bc <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d005      	beq.n	80018fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_Delay+0x44>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018fa:	bf00      	nop
 80018fc:	f7ff ffde 	bl	80018bc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d8f7      	bhi.n	80018fc <HAL_Delay+0x28>
  {
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008

0800191c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e033      	b.n	800199a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fcd6 	bl	80012ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001962:	f023 0302 	bic.w	r3, r3, #2
 8001966:	f043 0202 	orr.w	r2, r3, #2
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fa78 	bl	8001e64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f023 0303 	bic.w	r3, r3, #3
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
 800198a:	e001      	b.n	8001990 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_Start_DMA+0x1e>
 80019be:	2302      	movs	r3, #2
 80019c0:	e0e9      	b.n	8001b96 <HAL_ADC_Start_DMA+0x1f2>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d018      	beq.n	8001a0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019e8:	4b6d      	ldr	r3, [pc, #436]	; (8001ba0 <HAL_ADC_Start_DMA+0x1fc>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a6d      	ldr	r2, [pc, #436]	; (8001ba4 <HAL_ADC_Start_DMA+0x200>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9a      	lsrs	r2, r3, #18
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019fc:	e002      	b.n	8001a04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f9      	bne.n	80019fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a18:	d107      	bne.n	8001a2a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a28:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	f040 80a1 	bne.w	8001b7c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a78:	d106      	bne.n	8001a88 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f023 0206 	bic.w	r2, r3, #6
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	645a      	str	r2, [r3, #68]	; 0x44
 8001a86:	e002      	b.n	8001a8e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a96:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_ADC_Start_DMA+0x204>)
 8001a98:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9e:	4a43      	ldr	r2, [pc, #268]	; (8001bac <HAL_ADC_Start_DMA+0x208>)
 8001aa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	4a42      	ldr	r2, [pc, #264]	; (8001bb0 <HAL_ADC_Start_DMA+0x20c>)
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	4a41      	ldr	r2, [pc, #260]	; (8001bb4 <HAL_ADC_Start_DMA+0x210>)
 8001ab0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001aca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ada:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	334c      	adds	r3, #76	; 0x4c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f000 fcf8 	bl	80024e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d12a      	bne.n	8001b52 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <HAL_ADC_Start_DMA+0x214>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d015      	beq.n	8001b32 <HAL_ADC_Start_DMA+0x18e>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <HAL_ADC_Start_DMA+0x218>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_Start_DMA+0x178>
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_ADC_Start_DMA+0x204>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00a      	beq.n	8001b32 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a27      	ldr	r2, [pc, #156]	; (8001bc0 <HAL_ADC_Start_DMA+0x21c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d136      	bne.n	8001b94 <HAL_ADC_Start_DMA+0x1f0>
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_ADC_Start_DMA+0x204>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d130      	bne.n	8001b94 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d129      	bne.n	8001b94 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	e020      	b.n	8001b94 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <HAL_ADC_Start_DMA+0x214>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d11b      	bne.n	8001b94 <HAL_ADC_Start_DMA+0x1f0>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d114      	bne.n	8001b94 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	e00b      	b.n	8001b94 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f043 0210 	orr.w	r2, r3, #16
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	431bde83 	.word	0x431bde83
 8001ba8:	40012300 	.word	0x40012300
 8001bac:	0800205d 	.word	0x0800205d
 8001bb0:	08002117 	.word	0x08002117
 8001bb4:	08002133 	.word	0x08002133
 8001bb8:	40012000 	.word	0x40012000
 8001bbc:	40012100 	.word	0x40012100
 8001bc0:	40012200 	.word	0x40012200

08001bc4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x1c>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e113      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x244>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b09      	cmp	r3, #9
 8001c2a:	d925      	bls.n	8001c78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68d9      	ldr	r1, [r3, #12]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b1e      	subs	r3, #30
 8001c42:	2207      	movs	r2, #7
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43da      	mvns	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	400a      	ands	r2, r1
 8001c50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68d9      	ldr	r1, [r3, #12]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	4603      	mov	r3, r0
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4403      	add	r3, r0
 8001c6a:	3b1e      	subs	r3, #30
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	e022      	b.n	8001cbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6919      	ldr	r1, [r3, #16]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	400a      	ands	r2, r1
 8001c9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6919      	ldr	r1, [r3, #16]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	4603      	mov	r3, r0
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4403      	add	r3, r0
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d824      	bhi.n	8001d10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b05      	subs	r3, #5
 8001cd8:	221f      	movs	r2, #31
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b05      	subs	r3, #5
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d0e:	e04c      	b.n	8001daa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	d824      	bhi.n	8001d62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	3b23      	subs	r3, #35	; 0x23
 8001d2a:	221f      	movs	r2, #31
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43da      	mvns	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	400a      	ands	r2, r1
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	3b23      	subs	r3, #35	; 0x23
 8001d54:	fa00 f203 	lsl.w	r2, r0, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d60:	e023      	b.n	8001daa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3b41      	subs	r3, #65	; 0x41
 8001d74:	221f      	movs	r2, #31
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	400a      	ands	r2, r1
 8001d82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b41      	subs	r3, #65	; 0x41
 8001d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_ADC_ConfigChannel+0x250>)
 8001dac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <HAL_ADC_ConfigChannel+0x254>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d10f      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1d8>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b12      	cmp	r3, #18
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <HAL_ADC_ConfigChannel+0x254>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d12b      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x23a>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_ADC_ConfigChannel+0x258>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d003      	beq.n	8001df4 <HAL_ADC_ConfigChannel+0x1f4>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b11      	cmp	r3, #17
 8001df2:	d122      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_ADC_ConfigChannel+0x258>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d111      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_ADC_ConfigChannel+0x25c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_ADC_ConfigChannel+0x260>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	0c9a      	lsrs	r2, r3, #18
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e2c:	e002      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f9      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	40012300 	.word	0x40012300
 8001e54:	40012000 	.word	0x40012000
 8001e58:	10000012 	.word	0x10000012
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	431bde83 	.word	0x431bde83

08001e64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6c:	4b79      	ldr	r3, [pc, #484]	; (8002054 <ADC_Init+0x1f0>)
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	021a      	lsls	r2, r3, #8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6899      	ldr	r1, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	4a58      	ldr	r2, [pc, #352]	; (8002058 <ADC_Init+0x1f4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d022      	beq.n	8001f42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6899      	ldr	r1, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6899      	ldr	r1, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	e00f      	b.n	8001f62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0202 	bic.w	r2, r2, #2
 8001f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e1b      	ldrb	r3, [r3, #24]
 8001f7c:	005a      	lsls	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	035a      	lsls	r2, r3, #13
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	e007      	b.n	8001fd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	051a      	lsls	r2, r3, #20
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800200c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800201a:	025a      	lsls	r2, r3, #9
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	029a      	lsls	r2, r3, #10
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40012300 	.word	0x40012300
 8002058:	0f000001 	.word	0x0f000001

0800205c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002072:	2b00      	cmp	r3, #0
 8002074:	d13c      	bne.n	80020f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d12b      	bne.n	80020e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	d127      	bne.n	80020e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d119      	bne.n	80020e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0220 	bic.w	r2, r2, #32
 80020c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7ff fd6b 	bl	8001bc4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020ee:	e00e      	b.n	800210e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7ff fd75 	bl	8001bec <HAL_ADC_ErrorCallback>
}
 8002102:	e004      	b.n	800210e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff fd57 	bl	8001bd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f043 0204 	orr.w	r2, r3, #4
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff fd4a 	bl	8001bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <__NVIC_SetPriorityGrouping>:
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60d3      	str	r3, [r2, #12]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_GetPriorityGrouping>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f003 0307 	and.w	r3, r3, #7
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_EnableIRQ>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	db0b      	blt.n	80021ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4907      	ldr	r1, [pc, #28]	; (80021fc <__NVIC_EnableIRQ+0x38>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	2001      	movs	r0, #1
 80021e6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_SetPriority>:
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	; (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	; (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <SysTick_Config>:
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff8e 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff29 	bl	8002160 <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff3e 	bl	80021a8 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff8e 	bl	8002254 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5d 	bl	8002200 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff31 	bl	80021c4 <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffa2 	bl	80022bc <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff fa94 	bl	80018bc <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e099      	b.n	80024d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c0:	e00f      	b.n	80023e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c2:	f7ff fa7b 	bl	80018bc <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d908      	bls.n	80023e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2203      	movs	r2, #3
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e078      	b.n	80024d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1e8      	bne.n	80023c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_DMA_Init+0x158>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800240e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2b04      	cmp	r3, #4
 800243a:	d107      	bne.n	800244c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	4313      	orrs	r3, r2
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f023 0307 	bic.w	r3, r3, #7
 8002462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	2b04      	cmp	r3, #4
 8002474:	d117      	bne.n	80024a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fb01 	bl	8002a90 <DMA_CheckFifoParam>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024a2:	2301      	movs	r3, #1
 80024a4:	e016      	b.n	80024d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fab8 	bl	8002a24 <DMA_CalcBaseAndBitshift>
 80024b4:	4603      	mov	r3, r0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	223f      	movs	r2, #63	; 0x3f
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	f010803f 	.word	0xf010803f

080024e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_DMA_Start_IT+0x26>
 8002502:	2302      	movs	r3, #2
 8002504:	e040      	b.n	8002588 <HAL_DMA_Start_IT+0xa8>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d12f      	bne.n	800257a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2202      	movs	r2, #2
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fa4a 	bl	80029c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	223f      	movs	r2, #63	; 0x3f
 800253a:	409a      	lsls	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0216 	orr.w	r2, r2, #22
 800254e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0208 	orr.w	r2, r2, #8
 8002566:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e005      	b.n	8002586 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002582:	2302      	movs	r3, #2
 8002584:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800259e:	f7ff f98d 	bl	80018bc <HAL_GetTick>
 80025a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d008      	beq.n	80025c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e052      	b.n	8002668 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0216 	bic.w	r2, r2, #22
 80025d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <HAL_DMA_Abort+0x62>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0208 	bic.w	r2, r2, #8
 8002600:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002612:	e013      	b.n	800263c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002614:	f7ff f952 	bl	80018bc <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b05      	cmp	r3, #5
 8002620:	d90c      	bls.n	800263c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2203      	movs	r2, #3
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e015      	b.n	8002668 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1e4      	bne.n	8002614 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	223f      	movs	r2, #63	; 0x3f
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d004      	beq.n	800268e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e00c      	b.n	80026a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2205      	movs	r2, #5
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026c0:	4b8e      	ldr	r3, [pc, #568]	; (80028fc <HAL_DMA_IRQHandler+0x248>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a8e      	ldr	r2, [pc, #568]	; (8002900 <HAL_DMA_IRQHandler+0x24c>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	0a9b      	lsrs	r3, r3, #10
 80026cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	2208      	movs	r2, #8
 80026e0:	409a      	lsls	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01a      	beq.n	8002720 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0204 	bic.w	r2, r2, #4
 8002706:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2208      	movs	r2, #8
 800270e:	409a      	lsls	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	2201      	movs	r2, #1
 8002726:	409a      	lsls	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d012      	beq.n	8002756 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	2201      	movs	r2, #1
 8002744:	409a      	lsls	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f043 0202 	orr.w	r2, r3, #2
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	2204      	movs	r2, #4
 800275c:	409a      	lsls	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00b      	beq.n	800278c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	2204      	movs	r2, #4
 800277a:	409a      	lsls	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	f043 0204 	orr.w	r2, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	2210      	movs	r2, #16
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d043      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d03c      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	2210      	movs	r2, #16
 80027b0:	409a      	lsls	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d018      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d108      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d024      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
 80027e2:	e01f      	b.n	8002824 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01b      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
 80027f4:	e016      	b.n	8002824 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0208 	bic.w	r2, r2, #8
 8002812:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	2220      	movs	r2, #32
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 808f 	beq.w	8002954 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8087 	beq.w	8002954 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	2220      	movs	r2, #32
 800284c:	409a      	lsls	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b05      	cmp	r3, #5
 800285c:	d136      	bne.n	80028cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0216 	bic.w	r2, r2, #22
 800286c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800287c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_DMA_IRQHandler+0x1da>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0208 	bic.w	r2, r2, #8
 800289c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	223f      	movs	r2, #63	; 0x3f
 80028a4:	409a      	lsls	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d07e      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
        }
        return;
 80028ca:	e079      	b.n	80029c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01d      	beq.n	8002916 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10d      	bne.n	8002904 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d031      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
 80028f8:	e02c      	b.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000
 8002900:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d023      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
 8002914:	e01e      	b.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10f      	bne.n	8002944 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0210 	bic.w	r2, r2, #16
 8002932:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	2b00      	cmp	r3, #0
 800295a:	d032      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d022      	beq.n	80029ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2205      	movs	r2, #5
 800296c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	3301      	adds	r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	429a      	cmp	r2, r3
 800298a:	d307      	bcc.n	800299c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f2      	bne.n	8002980 <HAL_DMA_IRQHandler+0x2cc>
 800299a:	e000      	b.n	800299e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800299c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
 80029be:	e000      	b.n	80029c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029c0:	bf00      	nop
    }
  }
}
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d108      	bne.n	8002a08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a06:	e007      	b.n	8002a18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3b10      	subs	r3, #16
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <DMA_CalcBaseAndBitshift+0x64>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a3e:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <DMA_CalcBaseAndBitshift+0x68>)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d909      	bls.n	8002a66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	1d1a      	adds	r2, r3, #4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	659a      	str	r2, [r3, #88]	; 0x58
 8002a64:	e007      	b.n	8002a76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	aaaaaaab 	.word	0xaaaaaaab
 8002a8c:	0800658c 	.word	0x0800658c

08002a90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11f      	bne.n	8002aea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d856      	bhi.n	8002b5e <DMA_CheckFifoParam+0xce>
 8002ab0:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <DMA_CheckFifoParam+0x28>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002ac9 	.word	0x08002ac9
 8002abc:	08002adb 	.word	0x08002adb
 8002ac0:	08002ac9 	.word	0x08002ac9
 8002ac4:	08002b5f 	.word	0x08002b5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d046      	beq.n	8002b62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad8:	e043      	b.n	8002b62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ae2:	d140      	bne.n	8002b66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae8:	e03d      	b.n	8002b66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af2:	d121      	bne.n	8002b38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d837      	bhi.n	8002b6a <DMA_CheckFifoParam+0xda>
 8002afa:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <DMA_CheckFifoParam+0x70>)
 8002afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002b17 	.word	0x08002b17
 8002b08:	08002b11 	.word	0x08002b11
 8002b0c:	08002b29 	.word	0x08002b29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	e030      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d025      	beq.n	8002b6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b26:	e022      	b.n	8002b6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b30:	d11f      	bne.n	8002b72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b36:	e01c      	b.n	8002b72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d903      	bls.n	8002b46 <DMA_CheckFifoParam+0xb6>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d003      	beq.n	8002b4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b44:	e018      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4a:	e015      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00e      	beq.n	8002b76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e00b      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e00a      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e008      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
 8002b68:	e006      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e004      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e002      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b76:	bf00      	nop
    }
  } 
  
  return status; 
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop

08002b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	e177      	b.n	8002e94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	f040 8166 	bne.w	8002e8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d005      	beq.n	8002bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d130      	bne.n	8002c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	2203      	movs	r2, #3
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c10:	2201      	movs	r2, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 0201 	and.w	r2, r3, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d017      	beq.n	8002c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2203      	movs	r2, #3
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d123      	bne.n	8002ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	08da      	lsrs	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3208      	adds	r2, #8
 8002c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	220f      	movs	r2, #15
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	08da      	lsrs	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3208      	adds	r2, #8
 8002cc6:	69b9      	ldr	r1, [r7, #24]
 8002cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0203 	and.w	r2, r3, #3
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80c0 	beq.w	8002e8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b66      	ldr	r3, [pc, #408]	; (8002eac <HAL_GPIO_Init+0x324>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a65      	ldr	r2, [pc, #404]	; (8002eac <HAL_GPIO_Init+0x324>)
 8002d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b63      	ldr	r3, [pc, #396]	; (8002eac <HAL_GPIO_Init+0x324>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d2a:	4a61      	ldr	r2, [pc, #388]	; (8002eb0 <HAL_GPIO_Init+0x328>)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3302      	adds	r3, #2
 8002d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	220f      	movs	r2, #15
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_GPIO_Init+0x32c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d037      	beq.n	8002dc6 <HAL_GPIO_Init+0x23e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a57      	ldr	r2, [pc, #348]	; (8002eb8 <HAL_GPIO_Init+0x330>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d031      	beq.n	8002dc2 <HAL_GPIO_Init+0x23a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a56      	ldr	r2, [pc, #344]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d02b      	beq.n	8002dbe <HAL_GPIO_Init+0x236>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a55      	ldr	r2, [pc, #340]	; (8002ec0 <HAL_GPIO_Init+0x338>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d025      	beq.n	8002dba <HAL_GPIO_Init+0x232>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a54      	ldr	r2, [pc, #336]	; (8002ec4 <HAL_GPIO_Init+0x33c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <HAL_GPIO_Init+0x22e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a53      	ldr	r2, [pc, #332]	; (8002ec8 <HAL_GPIO_Init+0x340>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x22a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a52      	ldr	r2, [pc, #328]	; (8002ecc <HAL_GPIO_Init+0x344>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x226>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a51      	ldr	r2, [pc, #324]	; (8002ed0 <HAL_GPIO_Init+0x348>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x222>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a50      	ldr	r2, [pc, #320]	; (8002ed4 <HAL_GPIO_Init+0x34c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x21e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4f      	ldr	r2, [pc, #316]	; (8002ed8 <HAL_GPIO_Init+0x350>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x21a>
 8002d9e:	2309      	movs	r3, #9
 8002da0:	e012      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002da2:	230a      	movs	r3, #10
 8002da4:	e010      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002da6:	2308      	movs	r3, #8
 8002da8:	e00e      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002daa:	2307      	movs	r3, #7
 8002dac:	e00c      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002dae:	2306      	movs	r3, #6
 8002db0:	e00a      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002db2:	2305      	movs	r3, #5
 8002db4:	e008      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	4093      	lsls	r3, r2
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd8:	4935      	ldr	r1, [pc, #212]	; (8002eb0 <HAL_GPIO_Init+0x328>)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_GPIO_Init+0x354>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0a:	4a34      	ldr	r2, [pc, #208]	; (8002edc <HAL_GPIO_Init+0x354>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e10:	4b32      	ldr	r3, [pc, #200]	; (8002edc <HAL_GPIO_Init+0x354>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e34:	4a29      	ldr	r2, [pc, #164]	; (8002edc <HAL_GPIO_Init+0x354>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3a:	4b28      	ldr	r3, [pc, #160]	; (8002edc <HAL_GPIO_Init+0x354>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <HAL_GPIO_Init+0x354>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_GPIO_Init+0x354>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e88:	4a14      	ldr	r2, [pc, #80]	; (8002edc <HAL_GPIO_Init+0x354>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	f67f ae84 	bls.w	8002ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40021400 	.word	0x40021400
 8002ecc:	40021800 	.word	0x40021800
 8002ed0:	40021c00 	.word	0x40021c00
 8002ed4:	40022000 	.word	0x40022000
 8002ed8:	40022400 	.word	0x40022400
 8002edc:	40013c00 	.word	0x40013c00

08002ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	887b      	ldrh	r3, [r7, #2]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	e001      	b.n	8002f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f2c:	e003      	b.n	8002f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e267      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d075      	beq.n	800304e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f62:	4b88      	ldr	r3, [pc, #544]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d00c      	beq.n	8002f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6e:	4b85      	ldr	r3, [pc, #532]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d112      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7a:	4b82      	ldr	r3, [pc, #520]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f86:	d10b      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	4b7e      	ldr	r3, [pc, #504]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d05b      	beq.n	800304c <HAL_RCC_OscConfig+0x108>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d157      	bne.n	800304c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e242      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa8:	d106      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x74>
 8002faa:	4b76      	ldr	r3, [pc, #472]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a75      	ldr	r2, [pc, #468]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e01d      	b.n	8002ff4 <HAL_RCC_OscConfig+0xb0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x98>
 8002fc2:	4b70      	ldr	r3, [pc, #448]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6f      	ldr	r2, [pc, #444]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b6d      	ldr	r3, [pc, #436]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6c      	ldr	r2, [pc, #432]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0xb0>
 8002fdc:	4b69      	ldr	r3, [pc, #420]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a68      	ldr	r2, [pc, #416]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b66      	ldr	r3, [pc, #408]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a65      	ldr	r2, [pc, #404]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fc5e 	bl	80018bc <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003004:	f7fe fc5a 	bl	80018bc <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e207      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b5b      	ldr	r3, [pc, #364]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0xc0>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe fc4a 	bl	80018bc <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800302c:	f7fe fc46 	bl	80018bc <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1f3      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	4b51      	ldr	r3, [pc, #324]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0xe8>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d063      	beq.n	8003122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800305a:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003066:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800306e:	2b08      	cmp	r3, #8
 8003070:	d11c      	bne.n	80030ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b44      	ldr	r3, [pc, #272]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d116      	bne.n	80030ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	4b41      	ldr	r3, [pc, #260]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x152>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e1c7      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4937      	ldr	r1, [pc, #220]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	e03a      	b.n	8003122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b4:	4b34      	ldr	r3, [pc, #208]	; (8003188 <HAL_RCC_OscConfig+0x244>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe fbff 	bl	80018bc <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fe fbfb 	bl	80018bc <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1a8      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4925      	ldr	r1, [pc, #148]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]
 80030f4:	e015      	b.n	8003122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f6:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_RCC_OscConfig+0x244>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fbde 	bl	80018bc <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003104:	f7fe fbda 	bl	80018bc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e187      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d036      	beq.n	800319c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_RCC_OscConfig+0x248>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fbbe 	bl	80018bc <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003144:	f7fe fbba 	bl	80018bc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e167      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x200>
 8003162:	e01b      	b.n	800319c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_OscConfig+0x248>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fe fba7 	bl	80018bc <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003170:	e00e      	b.n	8003190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003172:	f7fe fba3 	bl	80018bc <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d907      	bls.n	8003190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e150      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
 8003184:	40023800 	.word	0x40023800
 8003188:	42470000 	.word	0x42470000
 800318c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003190:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ea      	bne.n	8003172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8097 	beq.w	80032d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ae:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10f      	bne.n	80031da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	4b7d      	ldr	r3, [pc, #500]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	4a7c      	ldr	r2, [pc, #496]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ca:	4b7a      	ldr	r3, [pc, #488]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b77      	ldr	r3, [pc, #476]	; (80033b8 <HAL_RCC_OscConfig+0x474>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d118      	bne.n	8003218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e6:	4b74      	ldr	r3, [pc, #464]	; (80033b8 <HAL_RCC_OscConfig+0x474>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a73      	ldr	r2, [pc, #460]	; (80033b8 <HAL_RCC_OscConfig+0x474>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f2:	f7fe fb63 	bl	80018bc <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fa:	f7fe fb5f 	bl	80018bc <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e10c      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	4b6a      	ldr	r3, [pc, #424]	; (80033b8 <HAL_RCC_OscConfig+0x474>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x2ea>
 8003220:	4b64      	ldr	r3, [pc, #400]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	4a63      	ldr	r2, [pc, #396]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
 800322c:	e01c      	b.n	8003268 <HAL_RCC_OscConfig+0x324>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b05      	cmp	r3, #5
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x30c>
 8003236:	4b5f      	ldr	r3, [pc, #380]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a5e      	ldr	r2, [pc, #376]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 800323c:	f043 0304 	orr.w	r3, r3, #4
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
 8003242:	4b5c      	ldr	r3, [pc, #368]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a5b      	ldr	r2, [pc, #364]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0x324>
 8003250:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a57      	ldr	r2, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
 800325c:	4b55      	ldr	r3, [pc, #340]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	4a54      	ldr	r2, [pc, #336]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003262:	f023 0304 	bic.w	r3, r3, #4
 8003266:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d015      	beq.n	800329c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003270:	f7fe fb24 	bl	80018bc <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003276:	e00a      	b.n	800328e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fe fb20 	bl	80018bc <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	; 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0cb      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328e:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0ee      	beq.n	8003278 <HAL_RCC_OscConfig+0x334>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fe fb0e 	bl	80018bc <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe fb0a 	bl	80018bc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0b5      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ba:	4b3e      	ldr	r3, [pc, #248]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1ee      	bne.n	80032a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032cc:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4a38      	ldr	r2, [pc, #224]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80a1 	beq.w	8003424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032e2:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d05c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d141      	bne.n	800337a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_RCC_OscConfig+0x478>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fe fade 	bl	80018bc <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe fada 	bl	80018bc <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e087      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	019b      	lsls	r3, r3, #6
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	3b01      	subs	r3, #1
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	491b      	ldr	r1, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x478>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fe fab3 	bl	80018bc <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe faaf 	bl	80018bc <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e05c      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x416>
 8003378:	e054      	b.n	8003424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_RCC_OscConfig+0x478>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe fa9c 	bl	80018bc <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fa98 	bl	80018bc <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e045      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x444>
 80033a6:	e03d      	b.n	8003424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e038      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <HAL_RCC_OscConfig+0x4ec>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d028      	beq.n	8003420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d121      	bne.n	8003420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d11a      	bne.n	8003420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033f0:	4013      	ands	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d111      	bne.n	8003420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d107      	bne.n	8003420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800

08003434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0cc      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b68      	ldr	r3, [pc, #416]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d90c      	bls.n	8003470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b65      	ldr	r3, [pc, #404]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b63      	ldr	r3, [pc, #396]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0b8      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003488:	4b59      	ldr	r3, [pc, #356]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a58      	ldr	r2, [pc, #352]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a0:	4b53      	ldr	r3, [pc, #332]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4a52      	ldr	r2, [pc, #328]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ac:	4b50      	ldr	r3, [pc, #320]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	494d      	ldr	r1, [pc, #308]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d044      	beq.n	8003554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d119      	bne.n	8003512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e07f      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d003      	beq.n	80034f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d107      	bne.n	8003502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f2:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e06f      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003502:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e067      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 0203 	bic.w	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4934      	ldr	r1, [pc, #208]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	4313      	orrs	r3, r2
 8003522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003524:	f7fe f9ca 	bl	80018bc <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	e00a      	b.n	8003542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352c:	f7fe f9c6 	bl	80018bc <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e04f      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003542:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 020c 	and.w	r2, r3, #12
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	429a      	cmp	r2, r3
 8003552:	d1eb      	bne.n	800352c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d20c      	bcs.n	800357c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e032      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003588:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4916      	ldr	r1, [pc, #88]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	490e      	ldr	r1, [pc, #56]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ba:	f000 f821 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	490a      	ldr	r1, [pc, #40]	; (80035f4 <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	5ccb      	ldrb	r3, [r1, r3]
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <HAL_RCC_ClockConfig+0x1c8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe f92a 	bl	8001834 <HAL_InitTick>

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023c00 	.word	0x40023c00
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08006574 	.word	0x08006574
 80035f8:	20000000 	.word	0x20000000
 80035fc:	20000004 	.word	0x20000004

08003600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003604:	b094      	sub	sp, #80	; 0x50
 8003606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	647b      	str	r3, [r7, #68]	; 0x44
 800360c:	2300      	movs	r3, #0
 800360e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003610:	2300      	movs	r3, #0
 8003612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003618:	4b79      	ldr	r3, [pc, #484]	; (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b08      	cmp	r3, #8
 8003622:	d00d      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x40>
 8003624:	2b08      	cmp	r3, #8
 8003626:	f200 80e1 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x34>
 800362e:	2b04      	cmp	r3, #4
 8003630:	d003      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0x3a>
 8003632:	e0db      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003634:	4b73      	ldr	r3, [pc, #460]	; (8003804 <HAL_RCC_GetSysClockFreq+0x204>)
 8003636:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003638:	e0db      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800363a:	4b73      	ldr	r3, [pc, #460]	; (8003808 <HAL_RCC_GetSysClockFreq+0x208>)
 800363c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800363e:	e0d8      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003640:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003648:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800364a:	4b6d      	ldr	r3, [pc, #436]	; (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d063      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003656:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	2200      	movs	r2, #0
 800365e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003668:	633b      	str	r3, [r7, #48]	; 0x30
 800366a:	2300      	movs	r3, #0
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
 800366e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003672:	4622      	mov	r2, r4
 8003674:	462b      	mov	r3, r5
 8003676:	f04f 0000 	mov.w	r0, #0
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	0159      	lsls	r1, r3, #5
 8003680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003684:	0150      	lsls	r0, r2, #5
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4621      	mov	r1, r4
 800368c:	1a51      	subs	r1, r2, r1
 800368e:	6139      	str	r1, [r7, #16]
 8003690:	4629      	mov	r1, r5
 8003692:	eb63 0301 	sbc.w	r3, r3, r1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a4:	4659      	mov	r1, fp
 80036a6:	018b      	lsls	r3, r1, #6
 80036a8:	4651      	mov	r1, sl
 80036aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ae:	4651      	mov	r1, sl
 80036b0:	018a      	lsls	r2, r1, #6
 80036b2:	4651      	mov	r1, sl
 80036b4:	ebb2 0801 	subs.w	r8, r2, r1
 80036b8:	4659      	mov	r1, fp
 80036ba:	eb63 0901 	sbc.w	r9, r3, r1
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036d2:	4690      	mov	r8, r2
 80036d4:	4699      	mov	r9, r3
 80036d6:	4623      	mov	r3, r4
 80036d8:	eb18 0303 	adds.w	r3, r8, r3
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	462b      	mov	r3, r5
 80036e0:	eb49 0303 	adc.w	r3, r9, r3
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036f2:	4629      	mov	r1, r5
 80036f4:	024b      	lsls	r3, r1, #9
 80036f6:	4621      	mov	r1, r4
 80036f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036fc:	4621      	mov	r1, r4
 80036fe:	024a      	lsls	r2, r1, #9
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003706:	2200      	movs	r2, #0
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
 800370a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800370c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003710:	f7fc fdbe 	bl	8000290 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4613      	mov	r3, r2
 800371a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800371c:	e058      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b38      	ldr	r3, [pc, #224]	; (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	2200      	movs	r2, #0
 8003726:	4618      	mov	r0, r3
 8003728:	4611      	mov	r1, r2
 800372a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	2300      	movs	r3, #0
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
 8003734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003738:	4642      	mov	r2, r8
 800373a:	464b      	mov	r3, r9
 800373c:	f04f 0000 	mov.w	r0, #0
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	0159      	lsls	r1, r3, #5
 8003746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800374a:	0150      	lsls	r0, r2, #5
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4641      	mov	r1, r8
 8003752:	ebb2 0a01 	subs.w	sl, r2, r1
 8003756:	4649      	mov	r1, r9
 8003758:	eb63 0b01 	sbc.w	fp, r3, r1
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800376c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003770:	ebb2 040a 	subs.w	r4, r2, sl
 8003774:	eb63 050b 	sbc.w	r5, r3, fp
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	00eb      	lsls	r3, r5, #3
 8003782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003786:	00e2      	lsls	r2, r4, #3
 8003788:	4614      	mov	r4, r2
 800378a:	461d      	mov	r5, r3
 800378c:	4643      	mov	r3, r8
 800378e:	18e3      	adds	r3, r4, r3
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	464b      	mov	r3, r9
 8003794:	eb45 0303 	adc.w	r3, r5, r3
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a6:	4629      	mov	r1, r5
 80037a8:	028b      	lsls	r3, r1, #10
 80037aa:	4621      	mov	r1, r4
 80037ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b0:	4621      	mov	r1, r4
 80037b2:	028a      	lsls	r2, r1, #10
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ba:	2200      	movs	r2, #0
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	61fa      	str	r2, [r7, #28]
 80037c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c4:	f7fc fd64 	bl	8000290 <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4613      	mov	r3, r2
 80037ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ea:	e002      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3750      	adds	r7, #80	; 0x50
 80037f8:	46bd      	mov	sp, r7
 80037fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	00f42400 	.word	0x00f42400
 8003808:	007a1200 	.word	0x007a1200

0800380c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_RCC_GetHCLKFreq+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff0 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	0a9b      	lsrs	r3, r3, #10
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	08006584 	.word	0x08006584

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003850:	f7ff ffdc 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0b5b      	lsrs	r3, r3, #13
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40023800 	.word	0x40023800
 8003870:	08006584 	.word	0x08006584

08003874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e07b      	b.n	800397e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2b00      	cmp	r3, #0
 800388c:	d108      	bne.n	80038a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003896:	d009      	beq.n	80038ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]
 800389e:	e005      	b.n	80038ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fda6 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003930:	ea42 0103 	orr.w	r1, r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	f003 0104 	and.w	r1, r3, #4
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0210 	and.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b088      	sub	sp, #32
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_SPI_Transmit+0x22>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e126      	b.n	8003bf6 <HAL_SPI_Transmit+0x270>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b0:	f7fd ff84 	bl	80018bc <HAL_GetTick>
 80039b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039ca:	e10b      	b.n	8003be4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_SPI_Transmit+0x52>
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039dc:	e102      	b.n	8003be4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2203      	movs	r2, #3
 80039e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	88fa      	ldrh	r2, [r7, #6]
 80039f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	88fa      	ldrh	r2, [r7, #6]
 80039fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a24:	d10f      	bne.n	8003a46 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d007      	beq.n	8003a64 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6c:	d14b      	bne.n	8003b06 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Transmit+0xf6>
 8003a76:	8afb      	ldrh	r3, [r7, #22]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d13e      	bne.n	8003afa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	881a      	ldrh	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	1c9a      	adds	r2, r3, #2
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003aa0:	e02b      	b.n	8003afa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d112      	bne.n	8003ad6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	1c9a      	adds	r2, r3, #2
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ad4:	e011      	b.n	8003afa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad6:	f7fd fef1 	bl	80018bc <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d803      	bhi.n	8003aee <HAL_SPI_Transmit+0x168>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d102      	bne.n	8003af4 <HAL_SPI_Transmit+0x16e>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003af8:	e074      	b.n	8003be4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1ce      	bne.n	8003aa2 <HAL_SPI_Transmit+0x11c>
 8003b04:	e04c      	b.n	8003ba0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_SPI_Transmit+0x18e>
 8003b0e:	8afb      	ldrh	r3, [r7, #22]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d140      	bne.n	8003b96 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	7812      	ldrb	r2, [r2, #0]
 8003b20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b3a:	e02c      	b.n	8003b96 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d113      	bne.n	8003b72 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	330c      	adds	r3, #12
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b70:	e011      	b.n	8003b96 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b72:	f7fd fea3 	bl	80018bc <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d803      	bhi.n	8003b8a <HAL_SPI_Transmit+0x204>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d102      	bne.n	8003b90 <HAL_SPI_Transmit+0x20a>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b94:	e026      	b.n	8003be4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1cd      	bne.n	8003b3c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	6839      	ldr	r1, [r7, #0]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fbcb 	bl	8004340 <SPI_EndRxTxTransaction>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e000      	b.n	8003be4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003be2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b088      	sub	sp, #32
 8003c02:	af02      	add	r7, sp, #8
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1a:	d112      	bne.n	8003c42 <HAL_SPI_Receive+0x44>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10e      	bne.n	8003c42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2204      	movs	r2, #4
 8003c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	4613      	mov	r3, r2
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f8f1 	bl	8003e20 <HAL_SPI_TransmitReceive>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	e0ea      	b.n	8003e18 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_SPI_Receive+0x52>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e0e3      	b.n	8003e18 <HAL_SPI_Receive+0x21a>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c58:	f7fd fe30 	bl	80018bc <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d002      	beq.n	8003c70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c6e:	e0ca      	b.n	8003e06 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_SPI_Receive+0x7e>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d102      	bne.n	8003c82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c80:	e0c1      	b.n	8003e06 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2204      	movs	r2, #4
 8003c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc8:	d10f      	bne.n	8003cea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d007      	beq.n	8003d08 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d162      	bne.n	8003dd6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d10:	e02e      	b.n	8003d70 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d115      	bne.n	8003d4c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f103 020c 	add.w	r2, r3, #12
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d4a:	e011      	b.n	8003d70 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d4c:	f7fd fdb6 	bl	80018bc <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d803      	bhi.n	8003d64 <HAL_SPI_Receive+0x166>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d102      	bne.n	8003d6a <HAL_SPI_Receive+0x16c>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d6e:	e04a      	b.n	8003e06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1cb      	bne.n	8003d12 <HAL_SPI_Receive+0x114>
 8003d7a:	e031      	b.n	8003de0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d113      	bne.n	8003db2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	b292      	uxth	r2, r2
 8003d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003db0:	e011      	b.n	8003dd6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db2:	f7fd fd83 	bl	80018bc <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d803      	bhi.n	8003dca <HAL_SPI_Receive+0x1cc>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d102      	bne.n	8003dd0 <HAL_SPI_Receive+0x1d2>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003dd4:	e017      	b.n	8003e06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1cd      	bne.n	8003d7c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	6839      	ldr	r1, [r7, #0]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fa45 	bl	8004274 <SPI_EndRxTransaction>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
 8003e02:	e000      	b.n	8003e06 <HAL_SPI_Receive+0x208>
  }

error :
 8003e04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x26>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e18a      	b.n	800415c <HAL_SPI_TransmitReceive+0x33c>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e4e:	f7fd fd35 	bl	80018bc <HAL_GetTick>
 8003e52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d00f      	beq.n	8003e90 <HAL_SPI_TransmitReceive+0x70>
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e76:	d107      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x68>
 8003e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d003      	beq.n	8003e90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e8e:	e15b      	b.n	8004148 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_SPI_TransmitReceive+0x82>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_SPI_TransmitReceive+0x82>
 8003e9c:	887b      	ldrh	r3, [r7, #2]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ea8:	e14e      	b.n	8004148 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d003      	beq.n	8003ebe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2205      	movs	r2, #5
 8003eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	887a      	ldrh	r2, [r7, #2]
 8003ece:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	887a      	ldrh	r2, [r7, #2]
 8003ee6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d007      	beq.n	8003f12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1a:	d178      	bne.n	800400e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_SPI_TransmitReceive+0x10a>
 8003f24:	8b7b      	ldrh	r3, [r7, #26]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d166      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	881a      	ldrh	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	1c9a      	adds	r2, r3, #2
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f4e:	e053      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d11b      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x176>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d016      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x176>
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d113      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	881a      	ldrh	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	1c9a      	adds	r2, r3, #2
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d119      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x1b8>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d014      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	b292      	uxth	r2, r2
 8003fba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	1c9a      	adds	r2, r3, #2
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fd8:	f7fd fc70 	bl	80018bc <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d807      	bhi.n	8003ff8 <HAL_SPI_TransmitReceive+0x1d8>
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d003      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ff6:	e0a7      	b.n	8004148 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1a6      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x130>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1a1      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x130>
 800400c:	e07c      	b.n	8004108 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_SPI_TransmitReceive+0x1fc>
 8004016:	8b7b      	ldrh	r3, [r7, #26]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d16b      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	7812      	ldrb	r2, [r2, #0]
 8004028:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004042:	e057      	b.n	80040f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b02      	cmp	r3, #2
 8004050:	d11c      	bne.n	800408c <HAL_SPI_TransmitReceive+0x26c>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d017      	beq.n	800408c <HAL_SPI_TransmitReceive+0x26c>
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	2b01      	cmp	r3, #1
 8004060:	d114      	bne.n	800408c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d119      	bne.n	80040ce <HAL_SPI_TransmitReceive+0x2ae>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d014      	beq.n	80040ce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040ca:	2301      	movs	r3, #1
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040ce:	f7fd fbf5 	bl	80018bc <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040da:	429a      	cmp	r2, r3
 80040dc:	d803      	bhi.n	80040e6 <HAL_SPI_TransmitReceive+0x2c6>
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d102      	bne.n	80040ec <HAL_SPI_TransmitReceive+0x2cc>
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040f2:	e029      	b.n	8004148 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1a2      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x224>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d19d      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f917 	bl	8004340 <SPI_EndRxTxTransaction>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d006      	beq.n	8004126 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004124:	e010      	b.n	8004148 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	e000      	b.n	8004148 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004146:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004158:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800415c:	4618      	mov	r0, r3
 800415e:	3730      	adds	r7, #48	; 0x30
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004174:	f7fd fba2 	bl	80018bc <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	4413      	add	r3, r2
 8004182:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004184:	f7fd fb9a 	bl	80018bc <HAL_GetTick>
 8004188:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800418a:	4b39      	ldr	r3, [pc, #228]	; (8004270 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	015b      	lsls	r3, r3, #5
 8004190:	0d1b      	lsrs	r3, r3, #20
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800419a:	e054      	b.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d050      	beq.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041a4:	f7fd fb8a 	bl	80018bc <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d902      	bls.n	80041ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d13d      	bne.n	8004236 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d2:	d111      	bne.n	80041f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041dc:	d004      	beq.n	80041e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d107      	bne.n	80041f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004200:	d10f      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004220:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e017      	b.n	8004266 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3b01      	subs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	429a      	cmp	r2, r3
 8004262:	d19b      	bne.n	800419c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000000 	.word	0x20000000

08004274 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004288:	d111      	bne.n	80042ae <SPI_EndRxTransaction+0x3a>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004292:	d004      	beq.n	800429e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429c:	d107      	bne.n	80042ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b6:	d12a      	bne.n	800430e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d012      	beq.n	80042e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2200      	movs	r2, #0
 80042ca:	2180      	movs	r1, #128	; 0x80
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff ff49 	bl	8004164 <SPI_WaitFlagStateUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d02d      	beq.n	8004334 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e026      	b.n	8004336 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2200      	movs	r2, #0
 80042f0:	2101      	movs	r1, #1
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff ff36 	bl	8004164 <SPI_WaitFlagStateUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01a      	beq.n	8004334 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e013      	b.n	8004336 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2200      	movs	r2, #0
 8004316:	2101      	movs	r1, #1
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff ff23 	bl	8004164 <SPI_WaitFlagStateUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e000      	b.n	8004336 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <SPI_EndRxTxTransaction+0x7c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <SPI_EndRxTxTransaction+0x80>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0d5b      	lsrs	r3, r3, #21
 8004358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800436a:	d112      	bne.n	8004392 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2200      	movs	r2, #0
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff fef4 	bl	8004164 <SPI_WaitFlagStateUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e00f      	b.n	80043b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3b01      	subs	r3, #1
 800439c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d0f2      	beq.n	8004392 <SPI_EndRxTxTransaction+0x52>
 80043ac:	e000      	b.n	80043b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80043ae:	bf00      	nop
  }

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000000 	.word	0x20000000
 80043c0:	165e9f81 	.word	0x165e9f81

080043c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e03f      	b.n	8004456 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd f85c 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fd8b 	bl	8004f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800441c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800442c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800443c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b08a      	sub	sp, #40	; 0x28
 8004462:	af02      	add	r7, sp, #8
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	4613      	mov	r3, r2
 800446c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b20      	cmp	r3, #32
 800447c:	f040 808c 	bne.w	8004598 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_UART_Receive+0x2e>
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e084      	b.n	800459a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_UART_Receive+0x40>
 800449a:	2302      	movs	r3, #2
 800449c:	e07d      	b.n	800459a <HAL_UART_Receive+0x13c>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2222      	movs	r2, #34	; 0x22
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ba:	f7fd f9ff 	bl	80018bc <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	88fa      	ldrh	r2, [r7, #6]
 80044ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d4:	d108      	bne.n	80044e8 <HAL_UART_Receive+0x8a>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e003      	b.n	80044f0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80044f8:	e043      	b.n	8004582 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2200      	movs	r2, #0
 8004502:	2120      	movs	r1, #32
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fb05 	bl	8004b14 <UART_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e042      	b.n	800459a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10c      	bne.n	8004534 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004526:	b29a      	uxth	r2, r3
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	3302      	adds	r3, #2
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	e01f      	b.n	8004574 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453c:	d007      	beq.n	800454e <HAL_UART_Receive+0xf0>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <HAL_UART_Receive+0xfe>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	e008      	b.n	800456e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004568:	b2da      	uxtb	r2, r3
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3301      	adds	r3, #1
 8004572:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1b6      	bne.n	80044fa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b0ba      	sub	sp, #232	; 0xe8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10f      	bne.n	800460a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_UART_IRQHandler+0x66>
 80045f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fbd3 	bl	8004dae <UART_Receive_IT>
      return;
 8004608:	e256      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800460a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80de 	beq.w	80047d0 <HAL_UART_IRQHandler+0x22c>
 8004614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80d1 	beq.w	80047d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_UART_IRQHandler+0xae>
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f043 0201 	orr.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <HAL_UART_IRQHandler+0xd2>
 800465e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f043 0202 	orr.w	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_UART_IRQHandler+0xf6>
 8004682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d011      	beq.n	80046ca <HAL_UART_IRQHandler+0x126>
 80046a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f043 0208 	orr.w	r2, r3, #8
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 81ed 	beq.w	8004aae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_UART_IRQHandler+0x14e>
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fb5e 	bl	8004dae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <HAL_UART_IRQHandler+0x17a>
 8004716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d04f      	beq.n	80047be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fa66 	bl	8004bf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b40      	cmp	r3, #64	; 0x40
 8004730:	d141      	bne.n	80047b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3314      	adds	r3, #20
 8004738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800474c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3314      	adds	r3, #20
 800475a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800475e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800476a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1d9      	bne.n	8004732 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	2b00      	cmp	r3, #0
 8004784:	d013      	beq.n	80047ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	4a7d      	ldr	r2, [pc, #500]	; (8004980 <HAL_UART_IRQHandler+0x3dc>)
 800478c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd ff6c 	bl	8002670 <HAL_DMA_Abort_IT>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047a8:	4610      	mov	r0, r2
 80047aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	e00e      	b.n	80047cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f99a 	bl	8004ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	e00a      	b.n	80047cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f996 	bl	8004ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	e006      	b.n	80047cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f992 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047ca:	e170      	b.n	8004aae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	bf00      	nop
    return;
 80047ce:	e16e      	b.n	8004aae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	f040 814a 	bne.w	8004a6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8143 	beq.w	8004a6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 813c 	beq.w	8004a6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	f040 80b4 	bne.w	8004984 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8140 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800483a:	429a      	cmp	r2, r3
 800483c:	f080 8139 	bcs.w	8004ab2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004846:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004852:	f000 8088 	beq.w	8004966 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800486c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800488e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800489a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1d9      	bne.n	8004856 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3314      	adds	r3, #20
 80048a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e1      	bne.n	80048a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3314      	adds	r3, #20
 80048e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3314      	adds	r3, #20
 80048fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e3      	bne.n	80048de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004936:	f023 0310 	bic.w	r3, r3, #16
 800493a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004948:	65ba      	str	r2, [r7, #88]	; 0x58
 800494a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800494e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e3      	bne.n	8004924 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	4618      	mov	r0, r3
 8004962:	f7fd fe15 	bl	8002590 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800496e:	b29b      	uxth	r3, r3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	b29b      	uxth	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8c0 	bl	8004afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800497c:	e099      	b.n	8004ab2 <HAL_UART_IRQHandler+0x50e>
 800497e:	bf00      	nop
 8004980:	08004cb7 	.word	0x08004cb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800498c:	b29b      	uxth	r3, r3
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 808b 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80049a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8086 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	330c      	adds	r3, #12
 80049ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049ce:	647a      	str	r2, [r7, #68]	; 0x44
 80049d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e3      	bne.n	80049aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3314      	adds	r3, #20
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	623b      	str	r3, [r7, #32]
   return(result);
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3314      	adds	r3, #20
 8004a02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a06:	633a      	str	r2, [r7, #48]	; 0x30
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e3      	bne.n	80049e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0310 	bic.w	r3, r3, #16
 8004a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	330c      	adds	r3, #12
 8004a48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a4c:	61fa      	str	r2, [r7, #28]
 8004a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	69b9      	ldr	r1, [r7, #24]
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	617b      	str	r3, [r7, #20]
   return(result);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e3      	bne.n	8004a28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a64:	4619      	mov	r1, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f848 	bl	8004afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a6c:	e023      	b.n	8004ab6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_UART_IRQHandler+0x4ea>
 8004a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f929 	bl	8004cde <UART_Transmit_IT>
    return;
 8004a8c:	e014      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00e      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x514>
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f969 	bl	8004d7e <UART_EndTransmit_IT>
    return;
 8004aac:	e004      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
    return;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8004ab6:	bf00      	nop
  }
}
 8004ab8:	37e8      	adds	r7, #232	; 0xe8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop

08004ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b090      	sub	sp, #64	; 0x40
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b24:	e050      	b.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d04c      	beq.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b34:	f7fc fec2 	bl	80018bc <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d241      	bcs.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b64:	637a      	str	r2, [r7, #52]	; 0x34
 8004b66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	613b      	str	r3, [r7, #16]
   return(result);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3314      	adds	r3, #20
 8004b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b98:	623a      	str	r2, [r7, #32]
 8004b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	69f9      	ldr	r1, [r7, #28]
 8004b9e:	6a3a      	ldr	r2, [r7, #32]
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e00f      	b.n	8004be8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d09f      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3740      	adds	r7, #64	; 0x40
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b095      	sub	sp, #84	; 0x54
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c18:	643a      	str	r2, [r7, #64]	; 0x40
 8004c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e5      	bne.n	8004bf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3314      	adds	r3, #20
 8004c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3314      	adds	r3, #20
 8004c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e5      	bne.n	8004c2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d119      	bne.n	8004c9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f023 0310 	bic.w	r3, r3, #16
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c88:	61ba      	str	r2, [r7, #24]
 8004c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	6979      	ldr	r1, [r7, #20]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	613b      	str	r3, [r7, #16]
   return(result);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e5      	bne.n	8004c68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004caa:	bf00      	nop
 8004cac:	3754      	adds	r7, #84	; 0x54
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff ff09 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b21      	cmp	r3, #33	; 0x21
 8004cf0:	d13e      	bne.n	8004d70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfa:	d114      	bne.n	8004d26 <UART_Transmit_IT+0x48>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d110      	bne.n	8004d26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	621a      	str	r2, [r3, #32]
 8004d24:	e008      	b.n	8004d38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	1c59      	adds	r1, r3, #1
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6211      	str	r1, [r2, #32]
 8004d30:	781a      	ldrb	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4619      	mov	r1, r3
 8004d46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10f      	bne.n	8004d6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e000      	b.n	8004d72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
  }
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fe8e 	bl	8004ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b08c      	sub	sp, #48	; 0x30
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b22      	cmp	r3, #34	; 0x22
 8004dc0:	f040 80ab 	bne.w	8004f1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dcc:	d117      	bne.n	8004dfe <UART_Receive_IT+0x50>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d113      	bne.n	8004dfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	1c9a      	adds	r2, r3, #2
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8004dfc:	e026      	b.n	8004e4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e10:	d007      	beq.n	8004e22 <UART_Receive_IT+0x74>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <UART_Receive_IT+0x82>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e008      	b.n	8004e42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d15a      	bne.n	8004f16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0220 	bic.w	r2, r2, #32
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d135      	bne.n	8004f0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f023 0310 	bic.w	r3, r3, #16
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec6:	623a      	str	r2, [r7, #32]
 8004ec8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	69f9      	ldr	r1, [r7, #28]
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b10      	cmp	r3, #16
 8004ee6:	d10a      	bne.n	8004efe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff fdf9 	bl	8004afc <HAL_UARTEx_RxEventCallback>
 8004f0a:	e002      	b.n	8004f12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fde1 	bl	8004ad4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e002      	b.n	8004f1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e000      	b.n	8004f1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
  }
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3730      	adds	r7, #48	; 0x30
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f28:	b0c0      	sub	sp, #256	; 0x100
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f40:	68d9      	ldr	r1, [r3, #12]
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	ea40 0301 	orr.w	r3, r0, r1
 8004f4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f7c:	f021 010c 	bic.w	r1, r1, #12
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9e:	6999      	ldr	r1, [r3, #24]
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	ea40 0301 	orr.w	r3, r0, r1
 8004faa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b8f      	ldr	r3, [pc, #572]	; (80051f0 <UART_SetConfig+0x2cc>)
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d005      	beq.n	8004fc4 <UART_SetConfig+0xa0>
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4b8d      	ldr	r3, [pc, #564]	; (80051f4 <UART_SetConfig+0x2d0>)
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d104      	bne.n	8004fce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fc4:	f7fe fc42 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8004fc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fcc:	e003      	b.n	8004fd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fce:	f7fe fc29 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8004fd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe0:	f040 810c 	bne.w	80051fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ff2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	462b      	mov	r3, r5
 8004ffa:	1891      	adds	r1, r2, r2
 8004ffc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ffe:	415b      	adcs	r3, r3
 8005000:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005002:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005006:	4621      	mov	r1, r4
 8005008:	eb12 0801 	adds.w	r8, r2, r1
 800500c:	4629      	mov	r1, r5
 800500e:	eb43 0901 	adc.w	r9, r3, r1
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800501e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005026:	4690      	mov	r8, r2
 8005028:	4699      	mov	r9, r3
 800502a:	4623      	mov	r3, r4
 800502c:	eb18 0303 	adds.w	r3, r8, r3
 8005030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005034:	462b      	mov	r3, r5
 8005036:	eb49 0303 	adc.w	r3, r9, r3
 800503a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800504a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800504e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005052:	460b      	mov	r3, r1
 8005054:	18db      	adds	r3, r3, r3
 8005056:	653b      	str	r3, [r7, #80]	; 0x50
 8005058:	4613      	mov	r3, r2
 800505a:	eb42 0303 	adc.w	r3, r2, r3
 800505e:	657b      	str	r3, [r7, #84]	; 0x54
 8005060:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005064:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005068:	f7fb f912 	bl	8000290 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4b61      	ldr	r3, [pc, #388]	; (80051f8 <UART_SetConfig+0x2d4>)
 8005072:	fba3 2302 	umull	r2, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	011c      	lsls	r4, r3, #4
 800507a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507e:	2200      	movs	r2, #0
 8005080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005084:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005088:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	1891      	adds	r1, r2, r2
 8005092:	64b9      	str	r1, [r7, #72]	; 0x48
 8005094:	415b      	adcs	r3, r3
 8005096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005098:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800509c:	4641      	mov	r1, r8
 800509e:	eb12 0a01 	adds.w	sl, r2, r1
 80050a2:	4649      	mov	r1, r9
 80050a4:	eb43 0b01 	adc.w	fp, r3, r1
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050bc:	4692      	mov	sl, r2
 80050be:	469b      	mov	fp, r3
 80050c0:	4643      	mov	r3, r8
 80050c2:	eb1a 0303 	adds.w	r3, sl, r3
 80050c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ca:	464b      	mov	r3, r9
 80050cc:	eb4b 0303 	adc.w	r3, fp, r3
 80050d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050e8:	460b      	mov	r3, r1
 80050ea:	18db      	adds	r3, r3, r3
 80050ec:	643b      	str	r3, [r7, #64]	; 0x40
 80050ee:	4613      	mov	r3, r2
 80050f0:	eb42 0303 	adc.w	r3, r2, r3
 80050f4:	647b      	str	r3, [r7, #68]	; 0x44
 80050f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050fe:	f7fb f8c7 	bl	8000290 <__aeabi_uldivmod>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4611      	mov	r1, r2
 8005108:	4b3b      	ldr	r3, [pc, #236]	; (80051f8 <UART_SetConfig+0x2d4>)
 800510a:	fba3 2301 	umull	r2, r3, r3, r1
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	2264      	movs	r2, #100	; 0x64
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	1acb      	subs	r3, r1, r3
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800511e:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <UART_SetConfig+0x2d4>)
 8005120:	fba3 2302 	umull	r2, r3, r3, r2
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800512c:	441c      	add	r4, r3
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005132:	2200      	movs	r2, #0
 8005134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005138:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800513c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	1891      	adds	r1, r2, r2
 8005146:	63b9      	str	r1, [r7, #56]	; 0x38
 8005148:	415b      	adcs	r3, r3
 800514a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800514c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005150:	4641      	mov	r1, r8
 8005152:	1851      	adds	r1, r2, r1
 8005154:	6339      	str	r1, [r7, #48]	; 0x30
 8005156:	4649      	mov	r1, r9
 8005158:	414b      	adcs	r3, r1
 800515a:	637b      	str	r3, [r7, #52]	; 0x34
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005168:	4659      	mov	r1, fp
 800516a:	00cb      	lsls	r3, r1, #3
 800516c:	4651      	mov	r1, sl
 800516e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005172:	4651      	mov	r1, sl
 8005174:	00ca      	lsls	r2, r1, #3
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	4603      	mov	r3, r0
 800517c:	4642      	mov	r2, r8
 800517e:	189b      	adds	r3, r3, r2
 8005180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005184:	464b      	mov	r3, r9
 8005186:	460a      	mov	r2, r1
 8005188:	eb42 0303 	adc.w	r3, r2, r3
 800518c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800519c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051a4:	460b      	mov	r3, r1
 80051a6:	18db      	adds	r3, r3, r3
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051aa:	4613      	mov	r3, r2
 80051ac:	eb42 0303 	adc.w	r3, r2, r3
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051ba:	f7fb f869 	bl	8000290 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <UART_SetConfig+0x2d4>)
 80051c4:	fba3 1302 	umull	r1, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2164      	movs	r1, #100	; 0x64
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	3332      	adds	r3, #50	; 0x32
 80051d6:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <UART_SetConfig+0x2d4>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	f003 0207 	and.w	r2, r3, #7
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4422      	add	r2, r4
 80051ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051ec:	e105      	b.n	80053fa <UART_SetConfig+0x4d6>
 80051ee:	bf00      	nop
 80051f0:	40011000 	.word	0x40011000
 80051f4:	40011400 	.word	0x40011400
 80051f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005200:	2200      	movs	r2, #0
 8005202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005206:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800520a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800520e:	4642      	mov	r2, r8
 8005210:	464b      	mov	r3, r9
 8005212:	1891      	adds	r1, r2, r2
 8005214:	6239      	str	r1, [r7, #32]
 8005216:	415b      	adcs	r3, r3
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
 800521a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800521e:	4641      	mov	r1, r8
 8005220:	1854      	adds	r4, r2, r1
 8005222:	4649      	mov	r1, r9
 8005224:	eb43 0501 	adc.w	r5, r3, r1
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	00eb      	lsls	r3, r5, #3
 8005232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005236:	00e2      	lsls	r2, r4, #3
 8005238:	4614      	mov	r4, r2
 800523a:	461d      	mov	r5, r3
 800523c:	4643      	mov	r3, r8
 800523e:	18e3      	adds	r3, r4, r3
 8005240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005244:	464b      	mov	r3, r9
 8005246:	eb45 0303 	adc.w	r3, r5, r3
 800524a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800525a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800526a:	4629      	mov	r1, r5
 800526c:	008b      	lsls	r3, r1, #2
 800526e:	4621      	mov	r1, r4
 8005270:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005274:	4621      	mov	r1, r4
 8005276:	008a      	lsls	r2, r1, #2
 8005278:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800527c:	f7fb f808 	bl	8000290 <__aeabi_uldivmod>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4b60      	ldr	r3, [pc, #384]	; (8005408 <UART_SetConfig+0x4e4>)
 8005286:	fba3 2302 	umull	r2, r3, r3, r2
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	011c      	lsls	r4, r3, #4
 800528e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005298:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800529c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052a0:	4642      	mov	r2, r8
 80052a2:	464b      	mov	r3, r9
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	61b9      	str	r1, [r7, #24]
 80052a8:	415b      	adcs	r3, r3
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b0:	4641      	mov	r1, r8
 80052b2:	1851      	adds	r1, r2, r1
 80052b4:	6139      	str	r1, [r7, #16]
 80052b6:	4649      	mov	r1, r9
 80052b8:	414b      	adcs	r3, r1
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052c8:	4659      	mov	r1, fp
 80052ca:	00cb      	lsls	r3, r1, #3
 80052cc:	4651      	mov	r1, sl
 80052ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d2:	4651      	mov	r1, sl
 80052d4:	00ca      	lsls	r2, r1, #3
 80052d6:	4610      	mov	r0, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	4603      	mov	r3, r0
 80052dc:	4642      	mov	r2, r8
 80052de:	189b      	adds	r3, r3, r2
 80052e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052e4:	464b      	mov	r3, r9
 80052e6:	460a      	mov	r2, r1
 80052e8:	eb42 0303 	adc.w	r3, r2, r3
 80052ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80052fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005308:	4649      	mov	r1, r9
 800530a:	008b      	lsls	r3, r1, #2
 800530c:	4641      	mov	r1, r8
 800530e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005312:	4641      	mov	r1, r8
 8005314:	008a      	lsls	r2, r1, #2
 8005316:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800531a:	f7fa ffb9 	bl	8000290 <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4b39      	ldr	r3, [pc, #228]	; (8005408 <UART_SetConfig+0x4e4>)
 8005324:	fba3 1302 	umull	r1, r3, r3, r2
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	2164      	movs	r1, #100	; 0x64
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	3332      	adds	r3, #50	; 0x32
 8005336:	4a34      	ldr	r2, [pc, #208]	; (8005408 <UART_SetConfig+0x4e4>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005342:	441c      	add	r4, r3
 8005344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005348:	2200      	movs	r2, #0
 800534a:	673b      	str	r3, [r7, #112]	; 0x70
 800534c:	677a      	str	r2, [r7, #116]	; 0x74
 800534e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005352:	4642      	mov	r2, r8
 8005354:	464b      	mov	r3, r9
 8005356:	1891      	adds	r1, r2, r2
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	415b      	adcs	r3, r3
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005362:	4641      	mov	r1, r8
 8005364:	1851      	adds	r1, r2, r1
 8005366:	6039      	str	r1, [r7, #0]
 8005368:	4649      	mov	r1, r9
 800536a:	414b      	adcs	r3, r1
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800537a:	4659      	mov	r1, fp
 800537c:	00cb      	lsls	r3, r1, #3
 800537e:	4651      	mov	r1, sl
 8005380:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005384:	4651      	mov	r1, sl
 8005386:	00ca      	lsls	r2, r1, #3
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	4603      	mov	r3, r0
 800538e:	4642      	mov	r2, r8
 8005390:	189b      	adds	r3, r3, r2
 8005392:	66bb      	str	r3, [r7, #104]	; 0x68
 8005394:	464b      	mov	r3, r9
 8005396:	460a      	mov	r2, r1
 8005398:	eb42 0303 	adc.w	r3, r2, r3
 800539c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	663b      	str	r3, [r7, #96]	; 0x60
 80053a8:	667a      	str	r2, [r7, #100]	; 0x64
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053b6:	4649      	mov	r1, r9
 80053b8:	008b      	lsls	r3, r1, #2
 80053ba:	4641      	mov	r1, r8
 80053bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053c0:	4641      	mov	r1, r8
 80053c2:	008a      	lsls	r2, r1, #2
 80053c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053c8:	f7fa ff62 	bl	8000290 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <UART_SetConfig+0x4e4>)
 80053d2:	fba3 1302 	umull	r1, r3, r3, r2
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	2164      	movs	r1, #100	; 0x64
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	3332      	adds	r3, #50	; 0x32
 80053e4:	4a08      	ldr	r2, [pc, #32]	; (8005408 <UART_SetConfig+0x4e4>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	f003 020f 	and.w	r2, r3, #15
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4422      	add	r2, r4
 80053f8:	609a      	str	r2, [r3, #8]
}
 80053fa:	bf00      	nop
 80053fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005400:	46bd      	mov	sp, r7
 8005402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005406:	bf00      	nop
 8005408:	51eb851f 	.word	0x51eb851f

0800540c <__errno>:
 800540c:	4b01      	ldr	r3, [pc, #4]	; (8005414 <__errno+0x8>)
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	2000000c 	.word	0x2000000c

08005418 <__libc_init_array>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4d0d      	ldr	r5, [pc, #52]	; (8005450 <__libc_init_array+0x38>)
 800541c:	4c0d      	ldr	r4, [pc, #52]	; (8005454 <__libc_init_array+0x3c>)
 800541e:	1b64      	subs	r4, r4, r5
 8005420:	10a4      	asrs	r4, r4, #2
 8005422:	2600      	movs	r6, #0
 8005424:	42a6      	cmp	r6, r4
 8005426:	d109      	bne.n	800543c <__libc_init_array+0x24>
 8005428:	4d0b      	ldr	r5, [pc, #44]	; (8005458 <__libc_init_array+0x40>)
 800542a:	4c0c      	ldr	r4, [pc, #48]	; (800545c <__libc_init_array+0x44>)
 800542c:	f001 f824 	bl	8006478 <_init>
 8005430:	1b64      	subs	r4, r4, r5
 8005432:	10a4      	asrs	r4, r4, #2
 8005434:	2600      	movs	r6, #0
 8005436:	42a6      	cmp	r6, r4
 8005438:	d105      	bne.n	8005446 <__libc_init_array+0x2e>
 800543a:	bd70      	pop	{r4, r5, r6, pc}
 800543c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005440:	4798      	blx	r3
 8005442:	3601      	adds	r6, #1
 8005444:	e7ee      	b.n	8005424 <__libc_init_array+0xc>
 8005446:	f855 3b04 	ldr.w	r3, [r5], #4
 800544a:	4798      	blx	r3
 800544c:	3601      	adds	r6, #1
 800544e:	e7f2      	b.n	8005436 <__libc_init_array+0x1e>
 8005450:	08006634 	.word	0x08006634
 8005454:	08006634 	.word	0x08006634
 8005458:	08006634 	.word	0x08006634
 800545c:	08006638 	.word	0x08006638

08005460 <memset>:
 8005460:	4402      	add	r2, r0
 8005462:	4603      	mov	r3, r0
 8005464:	4293      	cmp	r3, r2
 8005466:	d100      	bne.n	800546a <memset+0xa>
 8005468:	4770      	bx	lr
 800546a:	f803 1b01 	strb.w	r1, [r3], #1
 800546e:	e7f9      	b.n	8005464 <memset+0x4>

08005470 <iprintf>:
 8005470:	b40f      	push	{r0, r1, r2, r3}
 8005472:	4b0a      	ldr	r3, [pc, #40]	; (800549c <iprintf+0x2c>)
 8005474:	b513      	push	{r0, r1, r4, lr}
 8005476:	681c      	ldr	r4, [r3, #0]
 8005478:	b124      	cbz	r4, 8005484 <iprintf+0x14>
 800547a:	69a3      	ldr	r3, [r4, #24]
 800547c:	b913      	cbnz	r3, 8005484 <iprintf+0x14>
 800547e:	4620      	mov	r0, r4
 8005480:	f000 fa5e 	bl	8005940 <__sinit>
 8005484:	ab05      	add	r3, sp, #20
 8005486:	9a04      	ldr	r2, [sp, #16]
 8005488:	68a1      	ldr	r1, [r4, #8]
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	4620      	mov	r0, r4
 800548e:	f000 fc67 	bl	8005d60 <_vfiprintf_r>
 8005492:	b002      	add	sp, #8
 8005494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005498:	b004      	add	sp, #16
 800549a:	4770      	bx	lr
 800549c:	2000000c 	.word	0x2000000c

080054a0 <_puts_r>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	460e      	mov	r6, r1
 80054a4:	4605      	mov	r5, r0
 80054a6:	b118      	cbz	r0, 80054b0 <_puts_r+0x10>
 80054a8:	6983      	ldr	r3, [r0, #24]
 80054aa:	b90b      	cbnz	r3, 80054b0 <_puts_r+0x10>
 80054ac:	f000 fa48 	bl	8005940 <__sinit>
 80054b0:	69ab      	ldr	r3, [r5, #24]
 80054b2:	68ac      	ldr	r4, [r5, #8]
 80054b4:	b913      	cbnz	r3, 80054bc <_puts_r+0x1c>
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 fa42 	bl	8005940 <__sinit>
 80054bc:	4b2c      	ldr	r3, [pc, #176]	; (8005570 <_puts_r+0xd0>)
 80054be:	429c      	cmp	r4, r3
 80054c0:	d120      	bne.n	8005504 <_puts_r+0x64>
 80054c2:	686c      	ldr	r4, [r5, #4]
 80054c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054c6:	07db      	lsls	r3, r3, #31
 80054c8:	d405      	bmi.n	80054d6 <_puts_r+0x36>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	0598      	lsls	r0, r3, #22
 80054ce:	d402      	bmi.n	80054d6 <_puts_r+0x36>
 80054d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054d2:	f000 fad3 	bl	8005a7c <__retarget_lock_acquire_recursive>
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	0719      	lsls	r1, r3, #28
 80054da:	d51d      	bpl.n	8005518 <_puts_r+0x78>
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	b1db      	cbz	r3, 8005518 <_puts_r+0x78>
 80054e0:	3e01      	subs	r6, #1
 80054e2:	68a3      	ldr	r3, [r4, #8]
 80054e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054e8:	3b01      	subs	r3, #1
 80054ea:	60a3      	str	r3, [r4, #8]
 80054ec:	bb39      	cbnz	r1, 800553e <_puts_r+0x9e>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da38      	bge.n	8005564 <_puts_r+0xc4>
 80054f2:	4622      	mov	r2, r4
 80054f4:	210a      	movs	r1, #10
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 f848 	bl	800558c <__swbuf_r>
 80054fc:	3001      	adds	r0, #1
 80054fe:	d011      	beq.n	8005524 <_puts_r+0x84>
 8005500:	250a      	movs	r5, #10
 8005502:	e011      	b.n	8005528 <_puts_r+0x88>
 8005504:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <_puts_r+0xd4>)
 8005506:	429c      	cmp	r4, r3
 8005508:	d101      	bne.n	800550e <_puts_r+0x6e>
 800550a:	68ac      	ldr	r4, [r5, #8]
 800550c:	e7da      	b.n	80054c4 <_puts_r+0x24>
 800550e:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <_puts_r+0xd8>)
 8005510:	429c      	cmp	r4, r3
 8005512:	bf08      	it	eq
 8005514:	68ec      	ldreq	r4, [r5, #12]
 8005516:	e7d5      	b.n	80054c4 <_puts_r+0x24>
 8005518:	4621      	mov	r1, r4
 800551a:	4628      	mov	r0, r5
 800551c:	f000 f888 	bl	8005630 <__swsetup_r>
 8005520:	2800      	cmp	r0, #0
 8005522:	d0dd      	beq.n	80054e0 <_puts_r+0x40>
 8005524:	f04f 35ff 	mov.w	r5, #4294967295
 8005528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800552a:	07da      	lsls	r2, r3, #31
 800552c:	d405      	bmi.n	800553a <_puts_r+0x9a>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	059b      	lsls	r3, r3, #22
 8005532:	d402      	bmi.n	800553a <_puts_r+0x9a>
 8005534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005536:	f000 faa2 	bl	8005a7e <__retarget_lock_release_recursive>
 800553a:	4628      	mov	r0, r5
 800553c:	bd70      	pop	{r4, r5, r6, pc}
 800553e:	2b00      	cmp	r3, #0
 8005540:	da04      	bge.n	800554c <_puts_r+0xac>
 8005542:	69a2      	ldr	r2, [r4, #24]
 8005544:	429a      	cmp	r2, r3
 8005546:	dc06      	bgt.n	8005556 <_puts_r+0xb6>
 8005548:	290a      	cmp	r1, #10
 800554a:	d004      	beq.n	8005556 <_puts_r+0xb6>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	7019      	strb	r1, [r3, #0]
 8005554:	e7c5      	b.n	80054e2 <_puts_r+0x42>
 8005556:	4622      	mov	r2, r4
 8005558:	4628      	mov	r0, r5
 800555a:	f000 f817 	bl	800558c <__swbuf_r>
 800555e:	3001      	adds	r0, #1
 8005560:	d1bf      	bne.n	80054e2 <_puts_r+0x42>
 8005562:	e7df      	b.n	8005524 <_puts_r+0x84>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	250a      	movs	r5, #10
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	6022      	str	r2, [r4, #0]
 800556c:	701d      	strb	r5, [r3, #0]
 800556e:	e7db      	b.n	8005528 <_puts_r+0x88>
 8005570:	080065b8 	.word	0x080065b8
 8005574:	080065d8 	.word	0x080065d8
 8005578:	08006598 	.word	0x08006598

0800557c <puts>:
 800557c:	4b02      	ldr	r3, [pc, #8]	; (8005588 <puts+0xc>)
 800557e:	4601      	mov	r1, r0
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	f7ff bf8d 	b.w	80054a0 <_puts_r>
 8005586:	bf00      	nop
 8005588:	2000000c 	.word	0x2000000c

0800558c <__swbuf_r>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	460e      	mov	r6, r1
 8005590:	4614      	mov	r4, r2
 8005592:	4605      	mov	r5, r0
 8005594:	b118      	cbz	r0, 800559e <__swbuf_r+0x12>
 8005596:	6983      	ldr	r3, [r0, #24]
 8005598:	b90b      	cbnz	r3, 800559e <__swbuf_r+0x12>
 800559a:	f000 f9d1 	bl	8005940 <__sinit>
 800559e:	4b21      	ldr	r3, [pc, #132]	; (8005624 <__swbuf_r+0x98>)
 80055a0:	429c      	cmp	r4, r3
 80055a2:	d12b      	bne.n	80055fc <__swbuf_r+0x70>
 80055a4:	686c      	ldr	r4, [r5, #4]
 80055a6:	69a3      	ldr	r3, [r4, #24]
 80055a8:	60a3      	str	r3, [r4, #8]
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	071a      	lsls	r2, r3, #28
 80055ae:	d52f      	bpl.n	8005610 <__swbuf_r+0x84>
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	b36b      	cbz	r3, 8005610 <__swbuf_r+0x84>
 80055b4:	6923      	ldr	r3, [r4, #16]
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	1ac0      	subs	r0, r0, r3
 80055ba:	6963      	ldr	r3, [r4, #20]
 80055bc:	b2f6      	uxtb	r6, r6
 80055be:	4283      	cmp	r3, r0
 80055c0:	4637      	mov	r7, r6
 80055c2:	dc04      	bgt.n	80055ce <__swbuf_r+0x42>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 f926 	bl	8005818 <_fflush_r>
 80055cc:	bb30      	cbnz	r0, 800561c <__swbuf_r+0x90>
 80055ce:	68a3      	ldr	r3, [r4, #8]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	60a3      	str	r3, [r4, #8]
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	6022      	str	r2, [r4, #0]
 80055da:	701e      	strb	r6, [r3, #0]
 80055dc:	6963      	ldr	r3, [r4, #20]
 80055de:	3001      	adds	r0, #1
 80055e0:	4283      	cmp	r3, r0
 80055e2:	d004      	beq.n	80055ee <__swbuf_r+0x62>
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	07db      	lsls	r3, r3, #31
 80055e8:	d506      	bpl.n	80055f8 <__swbuf_r+0x6c>
 80055ea:	2e0a      	cmp	r6, #10
 80055ec:	d104      	bne.n	80055f8 <__swbuf_r+0x6c>
 80055ee:	4621      	mov	r1, r4
 80055f0:	4628      	mov	r0, r5
 80055f2:	f000 f911 	bl	8005818 <_fflush_r>
 80055f6:	b988      	cbnz	r0, 800561c <__swbuf_r+0x90>
 80055f8:	4638      	mov	r0, r7
 80055fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <__swbuf_r+0x9c>)
 80055fe:	429c      	cmp	r4, r3
 8005600:	d101      	bne.n	8005606 <__swbuf_r+0x7a>
 8005602:	68ac      	ldr	r4, [r5, #8]
 8005604:	e7cf      	b.n	80055a6 <__swbuf_r+0x1a>
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <__swbuf_r+0xa0>)
 8005608:	429c      	cmp	r4, r3
 800560a:	bf08      	it	eq
 800560c:	68ec      	ldreq	r4, [r5, #12]
 800560e:	e7ca      	b.n	80055a6 <__swbuf_r+0x1a>
 8005610:	4621      	mov	r1, r4
 8005612:	4628      	mov	r0, r5
 8005614:	f000 f80c 	bl	8005630 <__swsetup_r>
 8005618:	2800      	cmp	r0, #0
 800561a:	d0cb      	beq.n	80055b4 <__swbuf_r+0x28>
 800561c:	f04f 37ff 	mov.w	r7, #4294967295
 8005620:	e7ea      	b.n	80055f8 <__swbuf_r+0x6c>
 8005622:	bf00      	nop
 8005624:	080065b8 	.word	0x080065b8
 8005628:	080065d8 	.word	0x080065d8
 800562c:	08006598 	.word	0x08006598

08005630 <__swsetup_r>:
 8005630:	4b32      	ldr	r3, [pc, #200]	; (80056fc <__swsetup_r+0xcc>)
 8005632:	b570      	push	{r4, r5, r6, lr}
 8005634:	681d      	ldr	r5, [r3, #0]
 8005636:	4606      	mov	r6, r0
 8005638:	460c      	mov	r4, r1
 800563a:	b125      	cbz	r5, 8005646 <__swsetup_r+0x16>
 800563c:	69ab      	ldr	r3, [r5, #24]
 800563e:	b913      	cbnz	r3, 8005646 <__swsetup_r+0x16>
 8005640:	4628      	mov	r0, r5
 8005642:	f000 f97d 	bl	8005940 <__sinit>
 8005646:	4b2e      	ldr	r3, [pc, #184]	; (8005700 <__swsetup_r+0xd0>)
 8005648:	429c      	cmp	r4, r3
 800564a:	d10f      	bne.n	800566c <__swsetup_r+0x3c>
 800564c:	686c      	ldr	r4, [r5, #4]
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005654:	0719      	lsls	r1, r3, #28
 8005656:	d42c      	bmi.n	80056b2 <__swsetup_r+0x82>
 8005658:	06dd      	lsls	r5, r3, #27
 800565a:	d411      	bmi.n	8005680 <__swsetup_r+0x50>
 800565c:	2309      	movs	r3, #9
 800565e:	6033      	str	r3, [r6, #0]
 8005660:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005664:	81a3      	strh	r3, [r4, #12]
 8005666:	f04f 30ff 	mov.w	r0, #4294967295
 800566a:	e03e      	b.n	80056ea <__swsetup_r+0xba>
 800566c:	4b25      	ldr	r3, [pc, #148]	; (8005704 <__swsetup_r+0xd4>)
 800566e:	429c      	cmp	r4, r3
 8005670:	d101      	bne.n	8005676 <__swsetup_r+0x46>
 8005672:	68ac      	ldr	r4, [r5, #8]
 8005674:	e7eb      	b.n	800564e <__swsetup_r+0x1e>
 8005676:	4b24      	ldr	r3, [pc, #144]	; (8005708 <__swsetup_r+0xd8>)
 8005678:	429c      	cmp	r4, r3
 800567a:	bf08      	it	eq
 800567c:	68ec      	ldreq	r4, [r5, #12]
 800567e:	e7e6      	b.n	800564e <__swsetup_r+0x1e>
 8005680:	0758      	lsls	r0, r3, #29
 8005682:	d512      	bpl.n	80056aa <__swsetup_r+0x7a>
 8005684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005686:	b141      	cbz	r1, 800569a <__swsetup_r+0x6a>
 8005688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800568c:	4299      	cmp	r1, r3
 800568e:	d002      	beq.n	8005696 <__swsetup_r+0x66>
 8005690:	4630      	mov	r0, r6
 8005692:	f000 fa5b 	bl	8005b4c <_free_r>
 8005696:	2300      	movs	r3, #0
 8005698:	6363      	str	r3, [r4, #52]	; 0x34
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056a0:	81a3      	strh	r3, [r4, #12]
 80056a2:	2300      	movs	r3, #0
 80056a4:	6063      	str	r3, [r4, #4]
 80056a6:	6923      	ldr	r3, [r4, #16]
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	89a3      	ldrh	r3, [r4, #12]
 80056ac:	f043 0308 	orr.w	r3, r3, #8
 80056b0:	81a3      	strh	r3, [r4, #12]
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	b94b      	cbnz	r3, 80056ca <__swsetup_r+0x9a>
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c0:	d003      	beq.n	80056ca <__swsetup_r+0x9a>
 80056c2:	4621      	mov	r1, r4
 80056c4:	4630      	mov	r0, r6
 80056c6:	f000 fa01 	bl	8005acc <__smakebuf_r>
 80056ca:	89a0      	ldrh	r0, [r4, #12]
 80056cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056d0:	f010 0301 	ands.w	r3, r0, #1
 80056d4:	d00a      	beq.n	80056ec <__swsetup_r+0xbc>
 80056d6:	2300      	movs	r3, #0
 80056d8:	60a3      	str	r3, [r4, #8]
 80056da:	6963      	ldr	r3, [r4, #20]
 80056dc:	425b      	negs	r3, r3
 80056de:	61a3      	str	r3, [r4, #24]
 80056e0:	6923      	ldr	r3, [r4, #16]
 80056e2:	b943      	cbnz	r3, 80056f6 <__swsetup_r+0xc6>
 80056e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056e8:	d1ba      	bne.n	8005660 <__swsetup_r+0x30>
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	0781      	lsls	r1, r0, #30
 80056ee:	bf58      	it	pl
 80056f0:	6963      	ldrpl	r3, [r4, #20]
 80056f2:	60a3      	str	r3, [r4, #8]
 80056f4:	e7f4      	b.n	80056e0 <__swsetup_r+0xb0>
 80056f6:	2000      	movs	r0, #0
 80056f8:	e7f7      	b.n	80056ea <__swsetup_r+0xba>
 80056fa:	bf00      	nop
 80056fc:	2000000c 	.word	0x2000000c
 8005700:	080065b8 	.word	0x080065b8
 8005704:	080065d8 	.word	0x080065d8
 8005708:	08006598 	.word	0x08006598

0800570c <__sflush_r>:
 800570c:	898a      	ldrh	r2, [r1, #12]
 800570e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005712:	4605      	mov	r5, r0
 8005714:	0710      	lsls	r0, r2, #28
 8005716:	460c      	mov	r4, r1
 8005718:	d458      	bmi.n	80057cc <__sflush_r+0xc0>
 800571a:	684b      	ldr	r3, [r1, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	dc05      	bgt.n	800572c <__sflush_r+0x20>
 8005720:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	dc02      	bgt.n	800572c <__sflush_r+0x20>
 8005726:	2000      	movs	r0, #0
 8005728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800572c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800572e:	2e00      	cmp	r6, #0
 8005730:	d0f9      	beq.n	8005726 <__sflush_r+0x1a>
 8005732:	2300      	movs	r3, #0
 8005734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005738:	682f      	ldr	r7, [r5, #0]
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	d032      	beq.n	80057a4 <__sflush_r+0x98>
 800573e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	075a      	lsls	r2, r3, #29
 8005744:	d505      	bpl.n	8005752 <__sflush_r+0x46>
 8005746:	6863      	ldr	r3, [r4, #4]
 8005748:	1ac0      	subs	r0, r0, r3
 800574a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800574c:	b10b      	cbz	r3, 8005752 <__sflush_r+0x46>
 800574e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005750:	1ac0      	subs	r0, r0, r3
 8005752:	2300      	movs	r3, #0
 8005754:	4602      	mov	r2, r0
 8005756:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005758:	6a21      	ldr	r1, [r4, #32]
 800575a:	4628      	mov	r0, r5
 800575c:	47b0      	blx	r6
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	d106      	bne.n	8005772 <__sflush_r+0x66>
 8005764:	6829      	ldr	r1, [r5, #0]
 8005766:	291d      	cmp	r1, #29
 8005768:	d82c      	bhi.n	80057c4 <__sflush_r+0xb8>
 800576a:	4a2a      	ldr	r2, [pc, #168]	; (8005814 <__sflush_r+0x108>)
 800576c:	40ca      	lsrs	r2, r1
 800576e:	07d6      	lsls	r6, r2, #31
 8005770:	d528      	bpl.n	80057c4 <__sflush_r+0xb8>
 8005772:	2200      	movs	r2, #0
 8005774:	6062      	str	r2, [r4, #4]
 8005776:	04d9      	lsls	r1, r3, #19
 8005778:	6922      	ldr	r2, [r4, #16]
 800577a:	6022      	str	r2, [r4, #0]
 800577c:	d504      	bpl.n	8005788 <__sflush_r+0x7c>
 800577e:	1c42      	adds	r2, r0, #1
 8005780:	d101      	bne.n	8005786 <__sflush_r+0x7a>
 8005782:	682b      	ldr	r3, [r5, #0]
 8005784:	b903      	cbnz	r3, 8005788 <__sflush_r+0x7c>
 8005786:	6560      	str	r0, [r4, #84]	; 0x54
 8005788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800578a:	602f      	str	r7, [r5, #0]
 800578c:	2900      	cmp	r1, #0
 800578e:	d0ca      	beq.n	8005726 <__sflush_r+0x1a>
 8005790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005794:	4299      	cmp	r1, r3
 8005796:	d002      	beq.n	800579e <__sflush_r+0x92>
 8005798:	4628      	mov	r0, r5
 800579a:	f000 f9d7 	bl	8005b4c <_free_r>
 800579e:	2000      	movs	r0, #0
 80057a0:	6360      	str	r0, [r4, #52]	; 0x34
 80057a2:	e7c1      	b.n	8005728 <__sflush_r+0x1c>
 80057a4:	6a21      	ldr	r1, [r4, #32]
 80057a6:	2301      	movs	r3, #1
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b0      	blx	r6
 80057ac:	1c41      	adds	r1, r0, #1
 80057ae:	d1c7      	bne.n	8005740 <__sflush_r+0x34>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0c4      	beq.n	8005740 <__sflush_r+0x34>
 80057b6:	2b1d      	cmp	r3, #29
 80057b8:	d001      	beq.n	80057be <__sflush_r+0xb2>
 80057ba:	2b16      	cmp	r3, #22
 80057bc:	d101      	bne.n	80057c2 <__sflush_r+0xb6>
 80057be:	602f      	str	r7, [r5, #0]
 80057c0:	e7b1      	b.n	8005726 <__sflush_r+0x1a>
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	e7ad      	b.n	8005728 <__sflush_r+0x1c>
 80057cc:	690f      	ldr	r7, [r1, #16]
 80057ce:	2f00      	cmp	r7, #0
 80057d0:	d0a9      	beq.n	8005726 <__sflush_r+0x1a>
 80057d2:	0793      	lsls	r3, r2, #30
 80057d4:	680e      	ldr	r6, [r1, #0]
 80057d6:	bf08      	it	eq
 80057d8:	694b      	ldreq	r3, [r1, #20]
 80057da:	600f      	str	r7, [r1, #0]
 80057dc:	bf18      	it	ne
 80057de:	2300      	movne	r3, #0
 80057e0:	eba6 0807 	sub.w	r8, r6, r7
 80057e4:	608b      	str	r3, [r1, #8]
 80057e6:	f1b8 0f00 	cmp.w	r8, #0
 80057ea:	dd9c      	ble.n	8005726 <__sflush_r+0x1a>
 80057ec:	6a21      	ldr	r1, [r4, #32]
 80057ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057f0:	4643      	mov	r3, r8
 80057f2:	463a      	mov	r2, r7
 80057f4:	4628      	mov	r0, r5
 80057f6:	47b0      	blx	r6
 80057f8:	2800      	cmp	r0, #0
 80057fa:	dc06      	bgt.n	800580a <__sflush_r+0xfe>
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005802:	81a3      	strh	r3, [r4, #12]
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	e78e      	b.n	8005728 <__sflush_r+0x1c>
 800580a:	4407      	add	r7, r0
 800580c:	eba8 0800 	sub.w	r8, r8, r0
 8005810:	e7e9      	b.n	80057e6 <__sflush_r+0xda>
 8005812:	bf00      	nop
 8005814:	20400001 	.word	0x20400001

08005818 <_fflush_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	690b      	ldr	r3, [r1, #16]
 800581c:	4605      	mov	r5, r0
 800581e:	460c      	mov	r4, r1
 8005820:	b913      	cbnz	r3, 8005828 <_fflush_r+0x10>
 8005822:	2500      	movs	r5, #0
 8005824:	4628      	mov	r0, r5
 8005826:	bd38      	pop	{r3, r4, r5, pc}
 8005828:	b118      	cbz	r0, 8005832 <_fflush_r+0x1a>
 800582a:	6983      	ldr	r3, [r0, #24]
 800582c:	b90b      	cbnz	r3, 8005832 <_fflush_r+0x1a>
 800582e:	f000 f887 	bl	8005940 <__sinit>
 8005832:	4b14      	ldr	r3, [pc, #80]	; (8005884 <_fflush_r+0x6c>)
 8005834:	429c      	cmp	r4, r3
 8005836:	d11b      	bne.n	8005870 <_fflush_r+0x58>
 8005838:	686c      	ldr	r4, [r5, #4]
 800583a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0ef      	beq.n	8005822 <_fflush_r+0xa>
 8005842:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005844:	07d0      	lsls	r0, r2, #31
 8005846:	d404      	bmi.n	8005852 <_fflush_r+0x3a>
 8005848:	0599      	lsls	r1, r3, #22
 800584a:	d402      	bmi.n	8005852 <_fflush_r+0x3a>
 800584c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800584e:	f000 f915 	bl	8005a7c <__retarget_lock_acquire_recursive>
 8005852:	4628      	mov	r0, r5
 8005854:	4621      	mov	r1, r4
 8005856:	f7ff ff59 	bl	800570c <__sflush_r>
 800585a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800585c:	07da      	lsls	r2, r3, #31
 800585e:	4605      	mov	r5, r0
 8005860:	d4e0      	bmi.n	8005824 <_fflush_r+0xc>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	059b      	lsls	r3, r3, #22
 8005866:	d4dd      	bmi.n	8005824 <_fflush_r+0xc>
 8005868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586a:	f000 f908 	bl	8005a7e <__retarget_lock_release_recursive>
 800586e:	e7d9      	b.n	8005824 <_fflush_r+0xc>
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <_fflush_r+0x70>)
 8005872:	429c      	cmp	r4, r3
 8005874:	d101      	bne.n	800587a <_fflush_r+0x62>
 8005876:	68ac      	ldr	r4, [r5, #8]
 8005878:	e7df      	b.n	800583a <_fflush_r+0x22>
 800587a:	4b04      	ldr	r3, [pc, #16]	; (800588c <_fflush_r+0x74>)
 800587c:	429c      	cmp	r4, r3
 800587e:	bf08      	it	eq
 8005880:	68ec      	ldreq	r4, [r5, #12]
 8005882:	e7da      	b.n	800583a <_fflush_r+0x22>
 8005884:	080065b8 	.word	0x080065b8
 8005888:	080065d8 	.word	0x080065d8
 800588c:	08006598 	.word	0x08006598

08005890 <std>:
 8005890:	2300      	movs	r3, #0
 8005892:	b510      	push	{r4, lr}
 8005894:	4604      	mov	r4, r0
 8005896:	e9c0 3300 	strd	r3, r3, [r0]
 800589a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800589e:	6083      	str	r3, [r0, #8]
 80058a0:	8181      	strh	r1, [r0, #12]
 80058a2:	6643      	str	r3, [r0, #100]	; 0x64
 80058a4:	81c2      	strh	r2, [r0, #14]
 80058a6:	6183      	str	r3, [r0, #24]
 80058a8:	4619      	mov	r1, r3
 80058aa:	2208      	movs	r2, #8
 80058ac:	305c      	adds	r0, #92	; 0x5c
 80058ae:	f7ff fdd7 	bl	8005460 <memset>
 80058b2:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <std+0x38>)
 80058b4:	6263      	str	r3, [r4, #36]	; 0x24
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <std+0x3c>)
 80058b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <std+0x40>)
 80058bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <std+0x44>)
 80058c0:	6224      	str	r4, [r4, #32]
 80058c2:	6323      	str	r3, [r4, #48]	; 0x30
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	bf00      	nop
 80058c8:	08006309 	.word	0x08006309
 80058cc:	0800632b 	.word	0x0800632b
 80058d0:	08006363 	.word	0x08006363
 80058d4:	08006387 	.word	0x08006387

080058d8 <_cleanup_r>:
 80058d8:	4901      	ldr	r1, [pc, #4]	; (80058e0 <_cleanup_r+0x8>)
 80058da:	f000 b8af 	b.w	8005a3c <_fwalk_reent>
 80058de:	bf00      	nop
 80058e0:	08005819 	.word	0x08005819

080058e4 <__sfmoreglue>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	2268      	movs	r2, #104	; 0x68
 80058e8:	1e4d      	subs	r5, r1, #1
 80058ea:	4355      	muls	r5, r2
 80058ec:	460e      	mov	r6, r1
 80058ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058f2:	f000 f997 	bl	8005c24 <_malloc_r>
 80058f6:	4604      	mov	r4, r0
 80058f8:	b140      	cbz	r0, 800590c <__sfmoreglue+0x28>
 80058fa:	2100      	movs	r1, #0
 80058fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005900:	300c      	adds	r0, #12
 8005902:	60a0      	str	r0, [r4, #8]
 8005904:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005908:	f7ff fdaa 	bl	8005460 <memset>
 800590c:	4620      	mov	r0, r4
 800590e:	bd70      	pop	{r4, r5, r6, pc}

08005910 <__sfp_lock_acquire>:
 8005910:	4801      	ldr	r0, [pc, #4]	; (8005918 <__sfp_lock_acquire+0x8>)
 8005912:	f000 b8b3 	b.w	8005a7c <__retarget_lock_acquire_recursive>
 8005916:	bf00      	nop
 8005918:	2000021d 	.word	0x2000021d

0800591c <__sfp_lock_release>:
 800591c:	4801      	ldr	r0, [pc, #4]	; (8005924 <__sfp_lock_release+0x8>)
 800591e:	f000 b8ae 	b.w	8005a7e <__retarget_lock_release_recursive>
 8005922:	bf00      	nop
 8005924:	2000021d 	.word	0x2000021d

08005928 <__sinit_lock_acquire>:
 8005928:	4801      	ldr	r0, [pc, #4]	; (8005930 <__sinit_lock_acquire+0x8>)
 800592a:	f000 b8a7 	b.w	8005a7c <__retarget_lock_acquire_recursive>
 800592e:	bf00      	nop
 8005930:	2000021e 	.word	0x2000021e

08005934 <__sinit_lock_release>:
 8005934:	4801      	ldr	r0, [pc, #4]	; (800593c <__sinit_lock_release+0x8>)
 8005936:	f000 b8a2 	b.w	8005a7e <__retarget_lock_release_recursive>
 800593a:	bf00      	nop
 800593c:	2000021e 	.word	0x2000021e

08005940 <__sinit>:
 8005940:	b510      	push	{r4, lr}
 8005942:	4604      	mov	r4, r0
 8005944:	f7ff fff0 	bl	8005928 <__sinit_lock_acquire>
 8005948:	69a3      	ldr	r3, [r4, #24]
 800594a:	b11b      	cbz	r3, 8005954 <__sinit+0x14>
 800594c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005950:	f7ff bff0 	b.w	8005934 <__sinit_lock_release>
 8005954:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005958:	6523      	str	r3, [r4, #80]	; 0x50
 800595a:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <__sinit+0x68>)
 800595c:	4a13      	ldr	r2, [pc, #76]	; (80059ac <__sinit+0x6c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	62a2      	str	r2, [r4, #40]	; 0x28
 8005962:	42a3      	cmp	r3, r4
 8005964:	bf04      	itt	eq
 8005966:	2301      	moveq	r3, #1
 8005968:	61a3      	streq	r3, [r4, #24]
 800596a:	4620      	mov	r0, r4
 800596c:	f000 f820 	bl	80059b0 <__sfp>
 8005970:	6060      	str	r0, [r4, #4]
 8005972:	4620      	mov	r0, r4
 8005974:	f000 f81c 	bl	80059b0 <__sfp>
 8005978:	60a0      	str	r0, [r4, #8]
 800597a:	4620      	mov	r0, r4
 800597c:	f000 f818 	bl	80059b0 <__sfp>
 8005980:	2200      	movs	r2, #0
 8005982:	60e0      	str	r0, [r4, #12]
 8005984:	2104      	movs	r1, #4
 8005986:	6860      	ldr	r0, [r4, #4]
 8005988:	f7ff ff82 	bl	8005890 <std>
 800598c:	68a0      	ldr	r0, [r4, #8]
 800598e:	2201      	movs	r2, #1
 8005990:	2109      	movs	r1, #9
 8005992:	f7ff ff7d 	bl	8005890 <std>
 8005996:	68e0      	ldr	r0, [r4, #12]
 8005998:	2202      	movs	r2, #2
 800599a:	2112      	movs	r1, #18
 800599c:	f7ff ff78 	bl	8005890 <std>
 80059a0:	2301      	movs	r3, #1
 80059a2:	61a3      	str	r3, [r4, #24]
 80059a4:	e7d2      	b.n	800594c <__sinit+0xc>
 80059a6:	bf00      	nop
 80059a8:	08006594 	.word	0x08006594
 80059ac:	080058d9 	.word	0x080058d9

080059b0 <__sfp>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	4607      	mov	r7, r0
 80059b4:	f7ff ffac 	bl	8005910 <__sfp_lock_acquire>
 80059b8:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <__sfp+0x84>)
 80059ba:	681e      	ldr	r6, [r3, #0]
 80059bc:	69b3      	ldr	r3, [r6, #24]
 80059be:	b913      	cbnz	r3, 80059c6 <__sfp+0x16>
 80059c0:	4630      	mov	r0, r6
 80059c2:	f7ff ffbd 	bl	8005940 <__sinit>
 80059c6:	3648      	adds	r6, #72	; 0x48
 80059c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	d503      	bpl.n	80059d8 <__sfp+0x28>
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	b30b      	cbz	r3, 8005a18 <__sfp+0x68>
 80059d4:	6836      	ldr	r6, [r6, #0]
 80059d6:	e7f7      	b.n	80059c8 <__sfp+0x18>
 80059d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059dc:	b9d5      	cbnz	r5, 8005a14 <__sfp+0x64>
 80059de:	4b16      	ldr	r3, [pc, #88]	; (8005a38 <__sfp+0x88>)
 80059e0:	60e3      	str	r3, [r4, #12]
 80059e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059e6:	6665      	str	r5, [r4, #100]	; 0x64
 80059e8:	f000 f847 	bl	8005a7a <__retarget_lock_init_recursive>
 80059ec:	f7ff ff96 	bl	800591c <__sfp_lock_release>
 80059f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059f8:	6025      	str	r5, [r4, #0]
 80059fa:	61a5      	str	r5, [r4, #24]
 80059fc:	2208      	movs	r2, #8
 80059fe:	4629      	mov	r1, r5
 8005a00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a04:	f7ff fd2c 	bl	8005460 <memset>
 8005a08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a10:	4620      	mov	r0, r4
 8005a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a14:	3468      	adds	r4, #104	; 0x68
 8005a16:	e7d9      	b.n	80059cc <__sfp+0x1c>
 8005a18:	2104      	movs	r1, #4
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	f7ff ff62 	bl	80058e4 <__sfmoreglue>
 8005a20:	4604      	mov	r4, r0
 8005a22:	6030      	str	r0, [r6, #0]
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d1d5      	bne.n	80059d4 <__sfp+0x24>
 8005a28:	f7ff ff78 	bl	800591c <__sfp_lock_release>
 8005a2c:	230c      	movs	r3, #12
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	e7ee      	b.n	8005a10 <__sfp+0x60>
 8005a32:	bf00      	nop
 8005a34:	08006594 	.word	0x08006594
 8005a38:	ffff0001 	.word	0xffff0001

08005a3c <_fwalk_reent>:
 8005a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a40:	4606      	mov	r6, r0
 8005a42:	4688      	mov	r8, r1
 8005a44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a48:	2700      	movs	r7, #0
 8005a4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a4e:	f1b9 0901 	subs.w	r9, r9, #1
 8005a52:	d505      	bpl.n	8005a60 <_fwalk_reent+0x24>
 8005a54:	6824      	ldr	r4, [r4, #0]
 8005a56:	2c00      	cmp	r4, #0
 8005a58:	d1f7      	bne.n	8005a4a <_fwalk_reent+0xe>
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a60:	89ab      	ldrh	r3, [r5, #12]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d907      	bls.n	8005a76 <_fwalk_reent+0x3a>
 8005a66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	d003      	beq.n	8005a76 <_fwalk_reent+0x3a>
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4630      	mov	r0, r6
 8005a72:	47c0      	blx	r8
 8005a74:	4307      	orrs	r7, r0
 8005a76:	3568      	adds	r5, #104	; 0x68
 8005a78:	e7e9      	b.n	8005a4e <_fwalk_reent+0x12>

08005a7a <__retarget_lock_init_recursive>:
 8005a7a:	4770      	bx	lr

08005a7c <__retarget_lock_acquire_recursive>:
 8005a7c:	4770      	bx	lr

08005a7e <__retarget_lock_release_recursive>:
 8005a7e:	4770      	bx	lr

08005a80 <__swhatbuf_r>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	460e      	mov	r6, r1
 8005a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a88:	2900      	cmp	r1, #0
 8005a8a:	b096      	sub	sp, #88	; 0x58
 8005a8c:	4614      	mov	r4, r2
 8005a8e:	461d      	mov	r5, r3
 8005a90:	da08      	bge.n	8005aa4 <__swhatbuf_r+0x24>
 8005a92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	602a      	str	r2, [r5, #0]
 8005a9a:	061a      	lsls	r2, r3, #24
 8005a9c:	d410      	bmi.n	8005ac0 <__swhatbuf_r+0x40>
 8005a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aa2:	e00e      	b.n	8005ac2 <__swhatbuf_r+0x42>
 8005aa4:	466a      	mov	r2, sp
 8005aa6:	f000 fc95 	bl	80063d4 <_fstat_r>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	dbf1      	blt.n	8005a92 <__swhatbuf_r+0x12>
 8005aae:	9a01      	ldr	r2, [sp, #4]
 8005ab0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ab4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ab8:	425a      	negs	r2, r3
 8005aba:	415a      	adcs	r2, r3
 8005abc:	602a      	str	r2, [r5, #0]
 8005abe:	e7ee      	b.n	8005a9e <__swhatbuf_r+0x1e>
 8005ac0:	2340      	movs	r3, #64	; 0x40
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	b016      	add	sp, #88	; 0x58
 8005ac8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005acc <__smakebuf_r>:
 8005acc:	898b      	ldrh	r3, [r1, #12]
 8005ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ad0:	079d      	lsls	r5, r3, #30
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	d507      	bpl.n	8005ae8 <__smakebuf_r+0x1c>
 8005ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	6163      	str	r3, [r4, #20]
 8005ae4:	b002      	add	sp, #8
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	ab01      	add	r3, sp, #4
 8005aea:	466a      	mov	r2, sp
 8005aec:	f7ff ffc8 	bl	8005a80 <__swhatbuf_r>
 8005af0:	9900      	ldr	r1, [sp, #0]
 8005af2:	4605      	mov	r5, r0
 8005af4:	4630      	mov	r0, r6
 8005af6:	f000 f895 	bl	8005c24 <_malloc_r>
 8005afa:	b948      	cbnz	r0, 8005b10 <__smakebuf_r+0x44>
 8005afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b00:	059a      	lsls	r2, r3, #22
 8005b02:	d4ef      	bmi.n	8005ae4 <__smakebuf_r+0x18>
 8005b04:	f023 0303 	bic.w	r3, r3, #3
 8005b08:	f043 0302 	orr.w	r3, r3, #2
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	e7e3      	b.n	8005ad8 <__smakebuf_r+0xc>
 8005b10:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <__smakebuf_r+0x7c>)
 8005b12:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	6020      	str	r0, [r4, #0]
 8005b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1c:	81a3      	strh	r3, [r4, #12]
 8005b1e:	9b00      	ldr	r3, [sp, #0]
 8005b20:	6163      	str	r3, [r4, #20]
 8005b22:	9b01      	ldr	r3, [sp, #4]
 8005b24:	6120      	str	r0, [r4, #16]
 8005b26:	b15b      	cbz	r3, 8005b40 <__smakebuf_r+0x74>
 8005b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f000 fc63 	bl	80063f8 <_isatty_r>
 8005b32:	b128      	cbz	r0, 8005b40 <__smakebuf_r+0x74>
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	81a3      	strh	r3, [r4, #12]
 8005b40:	89a0      	ldrh	r0, [r4, #12]
 8005b42:	4305      	orrs	r5, r0
 8005b44:	81a5      	strh	r5, [r4, #12]
 8005b46:	e7cd      	b.n	8005ae4 <__smakebuf_r+0x18>
 8005b48:	080058d9 	.word	0x080058d9

08005b4c <_free_r>:
 8005b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	d044      	beq.n	8005bdc <_free_r+0x90>
 8005b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b56:	9001      	str	r0, [sp, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b5e:	bfb8      	it	lt
 8005b60:	18e4      	addlt	r4, r4, r3
 8005b62:	f000 fc6b 	bl	800643c <__malloc_lock>
 8005b66:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <_free_r+0x94>)
 8005b68:	9801      	ldr	r0, [sp, #4]
 8005b6a:	6813      	ldr	r3, [r2, #0]
 8005b6c:	b933      	cbnz	r3, 8005b7c <_free_r+0x30>
 8005b6e:	6063      	str	r3, [r4, #4]
 8005b70:	6014      	str	r4, [r2, #0]
 8005b72:	b003      	add	sp, #12
 8005b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b78:	f000 bc66 	b.w	8006448 <__malloc_unlock>
 8005b7c:	42a3      	cmp	r3, r4
 8005b7e:	d908      	bls.n	8005b92 <_free_r+0x46>
 8005b80:	6825      	ldr	r5, [r4, #0]
 8005b82:	1961      	adds	r1, r4, r5
 8005b84:	428b      	cmp	r3, r1
 8005b86:	bf01      	itttt	eq
 8005b88:	6819      	ldreq	r1, [r3, #0]
 8005b8a:	685b      	ldreq	r3, [r3, #4]
 8005b8c:	1949      	addeq	r1, r1, r5
 8005b8e:	6021      	streq	r1, [r4, #0]
 8005b90:	e7ed      	b.n	8005b6e <_free_r+0x22>
 8005b92:	461a      	mov	r2, r3
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	b10b      	cbz	r3, 8005b9c <_free_r+0x50>
 8005b98:	42a3      	cmp	r3, r4
 8005b9a:	d9fa      	bls.n	8005b92 <_free_r+0x46>
 8005b9c:	6811      	ldr	r1, [r2, #0]
 8005b9e:	1855      	adds	r5, r2, r1
 8005ba0:	42a5      	cmp	r5, r4
 8005ba2:	d10b      	bne.n	8005bbc <_free_r+0x70>
 8005ba4:	6824      	ldr	r4, [r4, #0]
 8005ba6:	4421      	add	r1, r4
 8005ba8:	1854      	adds	r4, r2, r1
 8005baa:	42a3      	cmp	r3, r4
 8005bac:	6011      	str	r1, [r2, #0]
 8005bae:	d1e0      	bne.n	8005b72 <_free_r+0x26>
 8005bb0:	681c      	ldr	r4, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	6053      	str	r3, [r2, #4]
 8005bb6:	4421      	add	r1, r4
 8005bb8:	6011      	str	r1, [r2, #0]
 8005bba:	e7da      	b.n	8005b72 <_free_r+0x26>
 8005bbc:	d902      	bls.n	8005bc4 <_free_r+0x78>
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	6003      	str	r3, [r0, #0]
 8005bc2:	e7d6      	b.n	8005b72 <_free_r+0x26>
 8005bc4:	6825      	ldr	r5, [r4, #0]
 8005bc6:	1961      	adds	r1, r4, r5
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	bf04      	itt	eq
 8005bcc:	6819      	ldreq	r1, [r3, #0]
 8005bce:	685b      	ldreq	r3, [r3, #4]
 8005bd0:	6063      	str	r3, [r4, #4]
 8005bd2:	bf04      	itt	eq
 8005bd4:	1949      	addeq	r1, r1, r5
 8005bd6:	6021      	streq	r1, [r4, #0]
 8005bd8:	6054      	str	r4, [r2, #4]
 8005bda:	e7ca      	b.n	8005b72 <_free_r+0x26>
 8005bdc:	b003      	add	sp, #12
 8005bde:	bd30      	pop	{r4, r5, pc}
 8005be0:	20000220 	.word	0x20000220

08005be4 <sbrk_aligned>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	4e0e      	ldr	r6, [pc, #56]	; (8005c20 <sbrk_aligned+0x3c>)
 8005be8:	460c      	mov	r4, r1
 8005bea:	6831      	ldr	r1, [r6, #0]
 8005bec:	4605      	mov	r5, r0
 8005bee:	b911      	cbnz	r1, 8005bf6 <sbrk_aligned+0x12>
 8005bf0:	f000 fb7a 	bl	80062e8 <_sbrk_r>
 8005bf4:	6030      	str	r0, [r6, #0]
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	f000 fb75 	bl	80062e8 <_sbrk_r>
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	d00a      	beq.n	8005c18 <sbrk_aligned+0x34>
 8005c02:	1cc4      	adds	r4, r0, #3
 8005c04:	f024 0403 	bic.w	r4, r4, #3
 8005c08:	42a0      	cmp	r0, r4
 8005c0a:	d007      	beq.n	8005c1c <sbrk_aligned+0x38>
 8005c0c:	1a21      	subs	r1, r4, r0
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 fb6a 	bl	80062e8 <_sbrk_r>
 8005c14:	3001      	adds	r0, #1
 8005c16:	d101      	bne.n	8005c1c <sbrk_aligned+0x38>
 8005c18:	f04f 34ff 	mov.w	r4, #4294967295
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	20000224 	.word	0x20000224

08005c24 <_malloc_r>:
 8005c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c28:	1ccd      	adds	r5, r1, #3
 8005c2a:	f025 0503 	bic.w	r5, r5, #3
 8005c2e:	3508      	adds	r5, #8
 8005c30:	2d0c      	cmp	r5, #12
 8005c32:	bf38      	it	cc
 8005c34:	250c      	movcc	r5, #12
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	4607      	mov	r7, r0
 8005c3a:	db01      	blt.n	8005c40 <_malloc_r+0x1c>
 8005c3c:	42a9      	cmp	r1, r5
 8005c3e:	d905      	bls.n	8005c4c <_malloc_r+0x28>
 8005c40:	230c      	movs	r3, #12
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	2600      	movs	r6, #0
 8005c46:	4630      	mov	r0, r6
 8005c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c4c:	4e2e      	ldr	r6, [pc, #184]	; (8005d08 <_malloc_r+0xe4>)
 8005c4e:	f000 fbf5 	bl	800643c <__malloc_lock>
 8005c52:	6833      	ldr	r3, [r6, #0]
 8005c54:	461c      	mov	r4, r3
 8005c56:	bb34      	cbnz	r4, 8005ca6 <_malloc_r+0x82>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f7ff ffc2 	bl	8005be4 <sbrk_aligned>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	4604      	mov	r4, r0
 8005c64:	d14d      	bne.n	8005d02 <_malloc_r+0xde>
 8005c66:	6834      	ldr	r4, [r6, #0]
 8005c68:	4626      	mov	r6, r4
 8005c6a:	2e00      	cmp	r6, #0
 8005c6c:	d140      	bne.n	8005cf0 <_malloc_r+0xcc>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	4631      	mov	r1, r6
 8005c72:	4638      	mov	r0, r7
 8005c74:	eb04 0803 	add.w	r8, r4, r3
 8005c78:	f000 fb36 	bl	80062e8 <_sbrk_r>
 8005c7c:	4580      	cmp	r8, r0
 8005c7e:	d13a      	bne.n	8005cf6 <_malloc_r+0xd2>
 8005c80:	6821      	ldr	r1, [r4, #0]
 8005c82:	3503      	adds	r5, #3
 8005c84:	1a6d      	subs	r5, r5, r1
 8005c86:	f025 0503 	bic.w	r5, r5, #3
 8005c8a:	3508      	adds	r5, #8
 8005c8c:	2d0c      	cmp	r5, #12
 8005c8e:	bf38      	it	cc
 8005c90:	250c      	movcc	r5, #12
 8005c92:	4629      	mov	r1, r5
 8005c94:	4638      	mov	r0, r7
 8005c96:	f7ff ffa5 	bl	8005be4 <sbrk_aligned>
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d02b      	beq.n	8005cf6 <_malloc_r+0xd2>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	442b      	add	r3, r5
 8005ca2:	6023      	str	r3, [r4, #0]
 8005ca4:	e00e      	b.n	8005cc4 <_malloc_r+0xa0>
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	1b52      	subs	r2, r2, r5
 8005caa:	d41e      	bmi.n	8005cea <_malloc_r+0xc6>
 8005cac:	2a0b      	cmp	r2, #11
 8005cae:	d916      	bls.n	8005cde <_malloc_r+0xba>
 8005cb0:	1961      	adds	r1, r4, r5
 8005cb2:	42a3      	cmp	r3, r4
 8005cb4:	6025      	str	r5, [r4, #0]
 8005cb6:	bf18      	it	ne
 8005cb8:	6059      	strne	r1, [r3, #4]
 8005cba:	6863      	ldr	r3, [r4, #4]
 8005cbc:	bf08      	it	eq
 8005cbe:	6031      	streq	r1, [r6, #0]
 8005cc0:	5162      	str	r2, [r4, r5]
 8005cc2:	604b      	str	r3, [r1, #4]
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	f104 060b 	add.w	r6, r4, #11
 8005cca:	f000 fbbd 	bl	8006448 <__malloc_unlock>
 8005cce:	f026 0607 	bic.w	r6, r6, #7
 8005cd2:	1d23      	adds	r3, r4, #4
 8005cd4:	1af2      	subs	r2, r6, r3
 8005cd6:	d0b6      	beq.n	8005c46 <_malloc_r+0x22>
 8005cd8:	1b9b      	subs	r3, r3, r6
 8005cda:	50a3      	str	r3, [r4, r2]
 8005cdc:	e7b3      	b.n	8005c46 <_malloc_r+0x22>
 8005cde:	6862      	ldr	r2, [r4, #4]
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	bf0c      	ite	eq
 8005ce4:	6032      	streq	r2, [r6, #0]
 8005ce6:	605a      	strne	r2, [r3, #4]
 8005ce8:	e7ec      	b.n	8005cc4 <_malloc_r+0xa0>
 8005cea:	4623      	mov	r3, r4
 8005cec:	6864      	ldr	r4, [r4, #4]
 8005cee:	e7b2      	b.n	8005c56 <_malloc_r+0x32>
 8005cf0:	4634      	mov	r4, r6
 8005cf2:	6876      	ldr	r6, [r6, #4]
 8005cf4:	e7b9      	b.n	8005c6a <_malloc_r+0x46>
 8005cf6:	230c      	movs	r3, #12
 8005cf8:	603b      	str	r3, [r7, #0]
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	f000 fba4 	bl	8006448 <__malloc_unlock>
 8005d00:	e7a1      	b.n	8005c46 <_malloc_r+0x22>
 8005d02:	6025      	str	r5, [r4, #0]
 8005d04:	e7de      	b.n	8005cc4 <_malloc_r+0xa0>
 8005d06:	bf00      	nop
 8005d08:	20000220 	.word	0x20000220

08005d0c <__sfputc_r>:
 8005d0c:	6893      	ldr	r3, [r2, #8]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	b410      	push	{r4}
 8005d14:	6093      	str	r3, [r2, #8]
 8005d16:	da08      	bge.n	8005d2a <__sfputc_r+0x1e>
 8005d18:	6994      	ldr	r4, [r2, #24]
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	db01      	blt.n	8005d22 <__sfputc_r+0x16>
 8005d1e:	290a      	cmp	r1, #10
 8005d20:	d103      	bne.n	8005d2a <__sfputc_r+0x1e>
 8005d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d26:	f7ff bc31 	b.w	800558c <__swbuf_r>
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	1c58      	adds	r0, r3, #1
 8005d2e:	6010      	str	r0, [r2, #0]
 8005d30:	7019      	strb	r1, [r3, #0]
 8005d32:	4608      	mov	r0, r1
 8005d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <__sfputs_r>:
 8005d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	460f      	mov	r7, r1
 8005d40:	4614      	mov	r4, r2
 8005d42:	18d5      	adds	r5, r2, r3
 8005d44:	42ac      	cmp	r4, r5
 8005d46:	d101      	bne.n	8005d4c <__sfputs_r+0x12>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e007      	b.n	8005d5c <__sfputs_r+0x22>
 8005d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d50:	463a      	mov	r2, r7
 8005d52:	4630      	mov	r0, r6
 8005d54:	f7ff ffda 	bl	8005d0c <__sfputc_r>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d1f3      	bne.n	8005d44 <__sfputs_r+0xa>
 8005d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d60 <_vfiprintf_r>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	460d      	mov	r5, r1
 8005d66:	b09d      	sub	sp, #116	; 0x74
 8005d68:	4614      	mov	r4, r2
 8005d6a:	4698      	mov	r8, r3
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	b118      	cbz	r0, 8005d78 <_vfiprintf_r+0x18>
 8005d70:	6983      	ldr	r3, [r0, #24]
 8005d72:	b90b      	cbnz	r3, 8005d78 <_vfiprintf_r+0x18>
 8005d74:	f7ff fde4 	bl	8005940 <__sinit>
 8005d78:	4b89      	ldr	r3, [pc, #548]	; (8005fa0 <_vfiprintf_r+0x240>)
 8005d7a:	429d      	cmp	r5, r3
 8005d7c:	d11b      	bne.n	8005db6 <_vfiprintf_r+0x56>
 8005d7e:	6875      	ldr	r5, [r6, #4]
 8005d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d82:	07d9      	lsls	r1, r3, #31
 8005d84:	d405      	bmi.n	8005d92 <_vfiprintf_r+0x32>
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	059a      	lsls	r2, r3, #22
 8005d8a:	d402      	bmi.n	8005d92 <_vfiprintf_r+0x32>
 8005d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d8e:	f7ff fe75 	bl	8005a7c <__retarget_lock_acquire_recursive>
 8005d92:	89ab      	ldrh	r3, [r5, #12]
 8005d94:	071b      	lsls	r3, r3, #28
 8005d96:	d501      	bpl.n	8005d9c <_vfiprintf_r+0x3c>
 8005d98:	692b      	ldr	r3, [r5, #16]
 8005d9a:	b9eb      	cbnz	r3, 8005dd8 <_vfiprintf_r+0x78>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f7ff fc46 	bl	8005630 <__swsetup_r>
 8005da4:	b1c0      	cbz	r0, 8005dd8 <_vfiprintf_r+0x78>
 8005da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da8:	07dc      	lsls	r4, r3, #31
 8005daa:	d50e      	bpl.n	8005dca <_vfiprintf_r+0x6a>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	b01d      	add	sp, #116	; 0x74
 8005db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db6:	4b7b      	ldr	r3, [pc, #492]	; (8005fa4 <_vfiprintf_r+0x244>)
 8005db8:	429d      	cmp	r5, r3
 8005dba:	d101      	bne.n	8005dc0 <_vfiprintf_r+0x60>
 8005dbc:	68b5      	ldr	r5, [r6, #8]
 8005dbe:	e7df      	b.n	8005d80 <_vfiprintf_r+0x20>
 8005dc0:	4b79      	ldr	r3, [pc, #484]	; (8005fa8 <_vfiprintf_r+0x248>)
 8005dc2:	429d      	cmp	r5, r3
 8005dc4:	bf08      	it	eq
 8005dc6:	68f5      	ldreq	r5, [r6, #12]
 8005dc8:	e7da      	b.n	8005d80 <_vfiprintf_r+0x20>
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	0598      	lsls	r0, r3, #22
 8005dce:	d4ed      	bmi.n	8005dac <_vfiprintf_r+0x4c>
 8005dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dd2:	f7ff fe54 	bl	8005a7e <__retarget_lock_release_recursive>
 8005dd6:	e7e9      	b.n	8005dac <_vfiprintf_r+0x4c>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9309      	str	r3, [sp, #36]	; 0x24
 8005ddc:	2320      	movs	r3, #32
 8005dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de6:	2330      	movs	r3, #48	; 0x30
 8005de8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005fac <_vfiprintf_r+0x24c>
 8005dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005df0:	f04f 0901 	mov.w	r9, #1
 8005df4:	4623      	mov	r3, r4
 8005df6:	469a      	mov	sl, r3
 8005df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dfc:	b10a      	cbz	r2, 8005e02 <_vfiprintf_r+0xa2>
 8005dfe:	2a25      	cmp	r2, #37	; 0x25
 8005e00:	d1f9      	bne.n	8005df6 <_vfiprintf_r+0x96>
 8005e02:	ebba 0b04 	subs.w	fp, sl, r4
 8005e06:	d00b      	beq.n	8005e20 <_vfiprintf_r+0xc0>
 8005e08:	465b      	mov	r3, fp
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f7ff ff93 	bl	8005d3a <__sfputs_r>
 8005e14:	3001      	adds	r0, #1
 8005e16:	f000 80aa 	beq.w	8005f6e <_vfiprintf_r+0x20e>
 8005e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e1c:	445a      	add	r2, fp
 8005e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e20:	f89a 3000 	ldrb.w	r3, [sl]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80a2 	beq.w	8005f6e <_vfiprintf_r+0x20e>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e34:	f10a 0a01 	add.w	sl, sl, #1
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	9307      	str	r3, [sp, #28]
 8005e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e40:	931a      	str	r3, [sp, #104]	; 0x68
 8005e42:	4654      	mov	r4, sl
 8005e44:	2205      	movs	r2, #5
 8005e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4a:	4858      	ldr	r0, [pc, #352]	; (8005fac <_vfiprintf_r+0x24c>)
 8005e4c:	f7fa f9d0 	bl	80001f0 <memchr>
 8005e50:	9a04      	ldr	r2, [sp, #16]
 8005e52:	b9d8      	cbnz	r0, 8005e8c <_vfiprintf_r+0x12c>
 8005e54:	06d1      	lsls	r1, r2, #27
 8005e56:	bf44      	itt	mi
 8005e58:	2320      	movmi	r3, #32
 8005e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e5e:	0713      	lsls	r3, r2, #28
 8005e60:	bf44      	itt	mi
 8005e62:	232b      	movmi	r3, #43	; 0x2b
 8005e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e68:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e6e:	d015      	beq.n	8005e9c <_vfiprintf_r+0x13c>
 8005e70:	9a07      	ldr	r2, [sp, #28]
 8005e72:	4654      	mov	r4, sl
 8005e74:	2000      	movs	r0, #0
 8005e76:	f04f 0c0a 	mov.w	ip, #10
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e80:	3b30      	subs	r3, #48	; 0x30
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d94e      	bls.n	8005f24 <_vfiprintf_r+0x1c4>
 8005e86:	b1b0      	cbz	r0, 8005eb6 <_vfiprintf_r+0x156>
 8005e88:	9207      	str	r2, [sp, #28]
 8005e8a:	e014      	b.n	8005eb6 <_vfiprintf_r+0x156>
 8005e8c:	eba0 0308 	sub.w	r3, r0, r8
 8005e90:	fa09 f303 	lsl.w	r3, r9, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	46a2      	mov	sl, r4
 8005e9a:	e7d2      	b.n	8005e42 <_vfiprintf_r+0xe2>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	1d19      	adds	r1, r3, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	9103      	str	r1, [sp, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bfbb      	ittet	lt
 8005ea8:	425b      	neglt	r3, r3
 8005eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8005eae:	9307      	strge	r3, [sp, #28]
 8005eb0:	9307      	strlt	r3, [sp, #28]
 8005eb2:	bfb8      	it	lt
 8005eb4:	9204      	strlt	r2, [sp, #16]
 8005eb6:	7823      	ldrb	r3, [r4, #0]
 8005eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8005eba:	d10c      	bne.n	8005ed6 <_vfiprintf_r+0x176>
 8005ebc:	7863      	ldrb	r3, [r4, #1]
 8005ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8005ec0:	d135      	bne.n	8005f2e <_vfiprintf_r+0x1ce>
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	1d1a      	adds	r2, r3, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	9203      	str	r2, [sp, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bfb8      	it	lt
 8005ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ed2:	3402      	adds	r4, #2
 8005ed4:	9305      	str	r3, [sp, #20]
 8005ed6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fbc <_vfiprintf_r+0x25c>
 8005eda:	7821      	ldrb	r1, [r4, #0]
 8005edc:	2203      	movs	r2, #3
 8005ede:	4650      	mov	r0, sl
 8005ee0:	f7fa f986 	bl	80001f0 <memchr>
 8005ee4:	b140      	cbz	r0, 8005ef8 <_vfiprintf_r+0x198>
 8005ee6:	2340      	movs	r3, #64	; 0x40
 8005ee8:	eba0 000a 	sub.w	r0, r0, sl
 8005eec:	fa03 f000 	lsl.w	r0, r3, r0
 8005ef0:	9b04      	ldr	r3, [sp, #16]
 8005ef2:	4303      	orrs	r3, r0
 8005ef4:	3401      	adds	r4, #1
 8005ef6:	9304      	str	r3, [sp, #16]
 8005ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005efc:	482c      	ldr	r0, [pc, #176]	; (8005fb0 <_vfiprintf_r+0x250>)
 8005efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f02:	2206      	movs	r2, #6
 8005f04:	f7fa f974 	bl	80001f0 <memchr>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d03f      	beq.n	8005f8c <_vfiprintf_r+0x22c>
 8005f0c:	4b29      	ldr	r3, [pc, #164]	; (8005fb4 <_vfiprintf_r+0x254>)
 8005f0e:	bb1b      	cbnz	r3, 8005f58 <_vfiprintf_r+0x1f8>
 8005f10:	9b03      	ldr	r3, [sp, #12]
 8005f12:	3307      	adds	r3, #7
 8005f14:	f023 0307 	bic.w	r3, r3, #7
 8005f18:	3308      	adds	r3, #8
 8005f1a:	9303      	str	r3, [sp, #12]
 8005f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1e:	443b      	add	r3, r7
 8005f20:	9309      	str	r3, [sp, #36]	; 0x24
 8005f22:	e767      	b.n	8005df4 <_vfiprintf_r+0x94>
 8005f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f28:	460c      	mov	r4, r1
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	e7a5      	b.n	8005e7a <_vfiprintf_r+0x11a>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	3401      	adds	r4, #1
 8005f32:	9305      	str	r3, [sp, #20]
 8005f34:	4619      	mov	r1, r3
 8005f36:	f04f 0c0a 	mov.w	ip, #10
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f40:	3a30      	subs	r2, #48	; 0x30
 8005f42:	2a09      	cmp	r2, #9
 8005f44:	d903      	bls.n	8005f4e <_vfiprintf_r+0x1ee>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0c5      	beq.n	8005ed6 <_vfiprintf_r+0x176>
 8005f4a:	9105      	str	r1, [sp, #20]
 8005f4c:	e7c3      	b.n	8005ed6 <_vfiprintf_r+0x176>
 8005f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f52:	4604      	mov	r4, r0
 8005f54:	2301      	movs	r3, #1
 8005f56:	e7f0      	b.n	8005f3a <_vfiprintf_r+0x1da>
 8005f58:	ab03      	add	r3, sp, #12
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <_vfiprintf_r+0x258>)
 8005f60:	a904      	add	r1, sp, #16
 8005f62:	4630      	mov	r0, r6
 8005f64:	f3af 8000 	nop.w
 8005f68:	4607      	mov	r7, r0
 8005f6a:	1c78      	adds	r0, r7, #1
 8005f6c:	d1d6      	bne.n	8005f1c <_vfiprintf_r+0x1bc>
 8005f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f70:	07d9      	lsls	r1, r3, #31
 8005f72:	d405      	bmi.n	8005f80 <_vfiprintf_r+0x220>
 8005f74:	89ab      	ldrh	r3, [r5, #12]
 8005f76:	059a      	lsls	r2, r3, #22
 8005f78:	d402      	bmi.n	8005f80 <_vfiprintf_r+0x220>
 8005f7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f7c:	f7ff fd7f 	bl	8005a7e <__retarget_lock_release_recursive>
 8005f80:	89ab      	ldrh	r3, [r5, #12]
 8005f82:	065b      	lsls	r3, r3, #25
 8005f84:	f53f af12 	bmi.w	8005dac <_vfiprintf_r+0x4c>
 8005f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f8a:	e711      	b.n	8005db0 <_vfiprintf_r+0x50>
 8005f8c:	ab03      	add	r3, sp, #12
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	462a      	mov	r2, r5
 8005f92:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <_vfiprintf_r+0x258>)
 8005f94:	a904      	add	r1, sp, #16
 8005f96:	4630      	mov	r0, r6
 8005f98:	f000 f880 	bl	800609c <_printf_i>
 8005f9c:	e7e4      	b.n	8005f68 <_vfiprintf_r+0x208>
 8005f9e:	bf00      	nop
 8005fa0:	080065b8 	.word	0x080065b8
 8005fa4:	080065d8 	.word	0x080065d8
 8005fa8:	08006598 	.word	0x08006598
 8005fac:	080065f8 	.word	0x080065f8
 8005fb0:	08006602 	.word	0x08006602
 8005fb4:	00000000 	.word	0x00000000
 8005fb8:	08005d3b 	.word	0x08005d3b
 8005fbc:	080065fe 	.word	0x080065fe

08005fc0 <_printf_common>:
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	4616      	mov	r6, r2
 8005fc6:	4699      	mov	r9, r3
 8005fc8:	688a      	ldr	r2, [r1, #8]
 8005fca:	690b      	ldr	r3, [r1, #16]
 8005fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	bfb8      	it	lt
 8005fd4:	4613      	movlt	r3, r2
 8005fd6:	6033      	str	r3, [r6, #0]
 8005fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fdc:	4607      	mov	r7, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	b10a      	cbz	r2, 8005fe6 <_printf_common+0x26>
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	0699      	lsls	r1, r3, #26
 8005fea:	bf42      	ittt	mi
 8005fec:	6833      	ldrmi	r3, [r6, #0]
 8005fee:	3302      	addmi	r3, #2
 8005ff0:	6033      	strmi	r3, [r6, #0]
 8005ff2:	6825      	ldr	r5, [r4, #0]
 8005ff4:	f015 0506 	ands.w	r5, r5, #6
 8005ff8:	d106      	bne.n	8006008 <_printf_common+0x48>
 8005ffa:	f104 0a19 	add.w	sl, r4, #25
 8005ffe:	68e3      	ldr	r3, [r4, #12]
 8006000:	6832      	ldr	r2, [r6, #0]
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	42ab      	cmp	r3, r5
 8006006:	dc26      	bgt.n	8006056 <_printf_common+0x96>
 8006008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800600c:	1e13      	subs	r3, r2, #0
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	bf18      	it	ne
 8006012:	2301      	movne	r3, #1
 8006014:	0692      	lsls	r2, r2, #26
 8006016:	d42b      	bmi.n	8006070 <_printf_common+0xb0>
 8006018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800601c:	4649      	mov	r1, r9
 800601e:	4638      	mov	r0, r7
 8006020:	47c0      	blx	r8
 8006022:	3001      	adds	r0, #1
 8006024:	d01e      	beq.n	8006064 <_printf_common+0xa4>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	68e5      	ldr	r5, [r4, #12]
 800602a:	6832      	ldr	r2, [r6, #0]
 800602c:	f003 0306 	and.w	r3, r3, #6
 8006030:	2b04      	cmp	r3, #4
 8006032:	bf08      	it	eq
 8006034:	1aad      	subeq	r5, r5, r2
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	6922      	ldr	r2, [r4, #16]
 800603a:	bf0c      	ite	eq
 800603c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006040:	2500      	movne	r5, #0
 8006042:	4293      	cmp	r3, r2
 8006044:	bfc4      	itt	gt
 8006046:	1a9b      	subgt	r3, r3, r2
 8006048:	18ed      	addgt	r5, r5, r3
 800604a:	2600      	movs	r6, #0
 800604c:	341a      	adds	r4, #26
 800604e:	42b5      	cmp	r5, r6
 8006050:	d11a      	bne.n	8006088 <_printf_common+0xc8>
 8006052:	2000      	movs	r0, #0
 8006054:	e008      	b.n	8006068 <_printf_common+0xa8>
 8006056:	2301      	movs	r3, #1
 8006058:	4652      	mov	r2, sl
 800605a:	4649      	mov	r1, r9
 800605c:	4638      	mov	r0, r7
 800605e:	47c0      	blx	r8
 8006060:	3001      	adds	r0, #1
 8006062:	d103      	bne.n	800606c <_printf_common+0xac>
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606c:	3501      	adds	r5, #1
 800606e:	e7c6      	b.n	8005ffe <_printf_common+0x3e>
 8006070:	18e1      	adds	r1, r4, r3
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	2030      	movs	r0, #48	; 0x30
 8006076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800607a:	4422      	add	r2, r4
 800607c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006084:	3302      	adds	r3, #2
 8006086:	e7c7      	b.n	8006018 <_printf_common+0x58>
 8006088:	2301      	movs	r3, #1
 800608a:	4622      	mov	r2, r4
 800608c:	4649      	mov	r1, r9
 800608e:	4638      	mov	r0, r7
 8006090:	47c0      	blx	r8
 8006092:	3001      	adds	r0, #1
 8006094:	d0e6      	beq.n	8006064 <_printf_common+0xa4>
 8006096:	3601      	adds	r6, #1
 8006098:	e7d9      	b.n	800604e <_printf_common+0x8e>
	...

0800609c <_printf_i>:
 800609c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	7e0f      	ldrb	r7, [r1, #24]
 80060a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060a4:	2f78      	cmp	r7, #120	; 0x78
 80060a6:	4691      	mov	r9, r2
 80060a8:	4680      	mov	r8, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	469a      	mov	sl, r3
 80060ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060b2:	d807      	bhi.n	80060c4 <_printf_i+0x28>
 80060b4:	2f62      	cmp	r7, #98	; 0x62
 80060b6:	d80a      	bhi.n	80060ce <_printf_i+0x32>
 80060b8:	2f00      	cmp	r7, #0
 80060ba:	f000 80d8 	beq.w	800626e <_printf_i+0x1d2>
 80060be:	2f58      	cmp	r7, #88	; 0x58
 80060c0:	f000 80a3 	beq.w	800620a <_printf_i+0x16e>
 80060c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060cc:	e03a      	b.n	8006144 <_printf_i+0xa8>
 80060ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060d2:	2b15      	cmp	r3, #21
 80060d4:	d8f6      	bhi.n	80060c4 <_printf_i+0x28>
 80060d6:	a101      	add	r1, pc, #4	; (adr r1, 80060dc <_printf_i+0x40>)
 80060d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060dc:	08006135 	.word	0x08006135
 80060e0:	08006149 	.word	0x08006149
 80060e4:	080060c5 	.word	0x080060c5
 80060e8:	080060c5 	.word	0x080060c5
 80060ec:	080060c5 	.word	0x080060c5
 80060f0:	080060c5 	.word	0x080060c5
 80060f4:	08006149 	.word	0x08006149
 80060f8:	080060c5 	.word	0x080060c5
 80060fc:	080060c5 	.word	0x080060c5
 8006100:	080060c5 	.word	0x080060c5
 8006104:	080060c5 	.word	0x080060c5
 8006108:	08006255 	.word	0x08006255
 800610c:	08006179 	.word	0x08006179
 8006110:	08006237 	.word	0x08006237
 8006114:	080060c5 	.word	0x080060c5
 8006118:	080060c5 	.word	0x080060c5
 800611c:	08006277 	.word	0x08006277
 8006120:	080060c5 	.word	0x080060c5
 8006124:	08006179 	.word	0x08006179
 8006128:	080060c5 	.word	0x080060c5
 800612c:	080060c5 	.word	0x080060c5
 8006130:	0800623f 	.word	0x0800623f
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	1d1a      	adds	r2, r3, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	602a      	str	r2, [r5, #0]
 800613c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006144:	2301      	movs	r3, #1
 8006146:	e0a3      	b.n	8006290 <_printf_i+0x1f4>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	6829      	ldr	r1, [r5, #0]
 800614c:	0606      	lsls	r6, r0, #24
 800614e:	f101 0304 	add.w	r3, r1, #4
 8006152:	d50a      	bpl.n	800616a <_printf_i+0xce>
 8006154:	680e      	ldr	r6, [r1, #0]
 8006156:	602b      	str	r3, [r5, #0]
 8006158:	2e00      	cmp	r6, #0
 800615a:	da03      	bge.n	8006164 <_printf_i+0xc8>
 800615c:	232d      	movs	r3, #45	; 0x2d
 800615e:	4276      	negs	r6, r6
 8006160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006164:	485e      	ldr	r0, [pc, #376]	; (80062e0 <_printf_i+0x244>)
 8006166:	230a      	movs	r3, #10
 8006168:	e019      	b.n	800619e <_printf_i+0x102>
 800616a:	680e      	ldr	r6, [r1, #0]
 800616c:	602b      	str	r3, [r5, #0]
 800616e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006172:	bf18      	it	ne
 8006174:	b236      	sxthne	r6, r6
 8006176:	e7ef      	b.n	8006158 <_printf_i+0xbc>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	6820      	ldr	r0, [r4, #0]
 800617c:	1d19      	adds	r1, r3, #4
 800617e:	6029      	str	r1, [r5, #0]
 8006180:	0601      	lsls	r1, r0, #24
 8006182:	d501      	bpl.n	8006188 <_printf_i+0xec>
 8006184:	681e      	ldr	r6, [r3, #0]
 8006186:	e002      	b.n	800618e <_printf_i+0xf2>
 8006188:	0646      	lsls	r6, r0, #25
 800618a:	d5fb      	bpl.n	8006184 <_printf_i+0xe8>
 800618c:	881e      	ldrh	r6, [r3, #0]
 800618e:	4854      	ldr	r0, [pc, #336]	; (80062e0 <_printf_i+0x244>)
 8006190:	2f6f      	cmp	r7, #111	; 0x6f
 8006192:	bf0c      	ite	eq
 8006194:	2308      	moveq	r3, #8
 8006196:	230a      	movne	r3, #10
 8006198:	2100      	movs	r1, #0
 800619a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800619e:	6865      	ldr	r5, [r4, #4]
 80061a0:	60a5      	str	r5, [r4, #8]
 80061a2:	2d00      	cmp	r5, #0
 80061a4:	bfa2      	ittt	ge
 80061a6:	6821      	ldrge	r1, [r4, #0]
 80061a8:	f021 0104 	bicge.w	r1, r1, #4
 80061ac:	6021      	strge	r1, [r4, #0]
 80061ae:	b90e      	cbnz	r6, 80061b4 <_printf_i+0x118>
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	d04d      	beq.n	8006250 <_printf_i+0x1b4>
 80061b4:	4615      	mov	r5, r2
 80061b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061ba:	fb03 6711 	mls	r7, r3, r1, r6
 80061be:	5dc7      	ldrb	r7, [r0, r7]
 80061c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061c4:	4637      	mov	r7, r6
 80061c6:	42bb      	cmp	r3, r7
 80061c8:	460e      	mov	r6, r1
 80061ca:	d9f4      	bls.n	80061b6 <_printf_i+0x11a>
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d10b      	bne.n	80061e8 <_printf_i+0x14c>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	07de      	lsls	r6, r3, #31
 80061d4:	d508      	bpl.n	80061e8 <_printf_i+0x14c>
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	6861      	ldr	r1, [r4, #4]
 80061da:	4299      	cmp	r1, r3
 80061dc:	bfde      	ittt	le
 80061de:	2330      	movle	r3, #48	; 0x30
 80061e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061e8:	1b52      	subs	r2, r2, r5
 80061ea:	6122      	str	r2, [r4, #16]
 80061ec:	f8cd a000 	str.w	sl, [sp]
 80061f0:	464b      	mov	r3, r9
 80061f2:	aa03      	add	r2, sp, #12
 80061f4:	4621      	mov	r1, r4
 80061f6:	4640      	mov	r0, r8
 80061f8:	f7ff fee2 	bl	8005fc0 <_printf_common>
 80061fc:	3001      	adds	r0, #1
 80061fe:	d14c      	bne.n	800629a <_printf_i+0x1fe>
 8006200:	f04f 30ff 	mov.w	r0, #4294967295
 8006204:	b004      	add	sp, #16
 8006206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620a:	4835      	ldr	r0, [pc, #212]	; (80062e0 <_printf_i+0x244>)
 800620c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006210:	6829      	ldr	r1, [r5, #0]
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	f851 6b04 	ldr.w	r6, [r1], #4
 8006218:	6029      	str	r1, [r5, #0]
 800621a:	061d      	lsls	r5, r3, #24
 800621c:	d514      	bpl.n	8006248 <_printf_i+0x1ac>
 800621e:	07df      	lsls	r7, r3, #31
 8006220:	bf44      	itt	mi
 8006222:	f043 0320 	orrmi.w	r3, r3, #32
 8006226:	6023      	strmi	r3, [r4, #0]
 8006228:	b91e      	cbnz	r6, 8006232 <_printf_i+0x196>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	f023 0320 	bic.w	r3, r3, #32
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	2310      	movs	r3, #16
 8006234:	e7b0      	b.n	8006198 <_printf_i+0xfc>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	f043 0320 	orr.w	r3, r3, #32
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	2378      	movs	r3, #120	; 0x78
 8006240:	4828      	ldr	r0, [pc, #160]	; (80062e4 <_printf_i+0x248>)
 8006242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006246:	e7e3      	b.n	8006210 <_printf_i+0x174>
 8006248:	0659      	lsls	r1, r3, #25
 800624a:	bf48      	it	mi
 800624c:	b2b6      	uxthmi	r6, r6
 800624e:	e7e6      	b.n	800621e <_printf_i+0x182>
 8006250:	4615      	mov	r5, r2
 8006252:	e7bb      	b.n	80061cc <_printf_i+0x130>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	6826      	ldr	r6, [r4, #0]
 8006258:	6961      	ldr	r1, [r4, #20]
 800625a:	1d18      	adds	r0, r3, #4
 800625c:	6028      	str	r0, [r5, #0]
 800625e:	0635      	lsls	r5, r6, #24
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	d501      	bpl.n	8006268 <_printf_i+0x1cc>
 8006264:	6019      	str	r1, [r3, #0]
 8006266:	e002      	b.n	800626e <_printf_i+0x1d2>
 8006268:	0670      	lsls	r0, r6, #25
 800626a:	d5fb      	bpl.n	8006264 <_printf_i+0x1c8>
 800626c:	8019      	strh	r1, [r3, #0]
 800626e:	2300      	movs	r3, #0
 8006270:	6123      	str	r3, [r4, #16]
 8006272:	4615      	mov	r5, r2
 8006274:	e7ba      	b.n	80061ec <_printf_i+0x150>
 8006276:	682b      	ldr	r3, [r5, #0]
 8006278:	1d1a      	adds	r2, r3, #4
 800627a:	602a      	str	r2, [r5, #0]
 800627c:	681d      	ldr	r5, [r3, #0]
 800627e:	6862      	ldr	r2, [r4, #4]
 8006280:	2100      	movs	r1, #0
 8006282:	4628      	mov	r0, r5
 8006284:	f7f9 ffb4 	bl	80001f0 <memchr>
 8006288:	b108      	cbz	r0, 800628e <_printf_i+0x1f2>
 800628a:	1b40      	subs	r0, r0, r5
 800628c:	6060      	str	r0, [r4, #4]
 800628e:	6863      	ldr	r3, [r4, #4]
 8006290:	6123      	str	r3, [r4, #16]
 8006292:	2300      	movs	r3, #0
 8006294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006298:	e7a8      	b.n	80061ec <_printf_i+0x150>
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	462a      	mov	r2, r5
 800629e:	4649      	mov	r1, r9
 80062a0:	4640      	mov	r0, r8
 80062a2:	47d0      	blx	sl
 80062a4:	3001      	adds	r0, #1
 80062a6:	d0ab      	beq.n	8006200 <_printf_i+0x164>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	079b      	lsls	r3, r3, #30
 80062ac:	d413      	bmi.n	80062d6 <_printf_i+0x23a>
 80062ae:	68e0      	ldr	r0, [r4, #12]
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	4298      	cmp	r0, r3
 80062b4:	bfb8      	it	lt
 80062b6:	4618      	movlt	r0, r3
 80062b8:	e7a4      	b.n	8006204 <_printf_i+0x168>
 80062ba:	2301      	movs	r3, #1
 80062bc:	4632      	mov	r2, r6
 80062be:	4649      	mov	r1, r9
 80062c0:	4640      	mov	r0, r8
 80062c2:	47d0      	blx	sl
 80062c4:	3001      	adds	r0, #1
 80062c6:	d09b      	beq.n	8006200 <_printf_i+0x164>
 80062c8:	3501      	adds	r5, #1
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	9903      	ldr	r1, [sp, #12]
 80062ce:	1a5b      	subs	r3, r3, r1
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dcf2      	bgt.n	80062ba <_printf_i+0x21e>
 80062d4:	e7eb      	b.n	80062ae <_printf_i+0x212>
 80062d6:	2500      	movs	r5, #0
 80062d8:	f104 0619 	add.w	r6, r4, #25
 80062dc:	e7f5      	b.n	80062ca <_printf_i+0x22e>
 80062de:	bf00      	nop
 80062e0:	08006609 	.word	0x08006609
 80062e4:	0800661a 	.word	0x0800661a

080062e8 <_sbrk_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4d06      	ldr	r5, [pc, #24]	; (8006304 <_sbrk_r+0x1c>)
 80062ec:	2300      	movs	r3, #0
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	f7fb fa0a 	bl	800170c <_sbrk>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_sbrk_r+0x1a>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_sbrk_r+0x1a>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	20000228 	.word	0x20000228

08006308 <__sread>:
 8006308:	b510      	push	{r4, lr}
 800630a:	460c      	mov	r4, r1
 800630c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006310:	f000 f8a0 	bl	8006454 <_read_r>
 8006314:	2800      	cmp	r0, #0
 8006316:	bfab      	itete	ge
 8006318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800631a:	89a3      	ldrhlt	r3, [r4, #12]
 800631c:	181b      	addge	r3, r3, r0
 800631e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006322:	bfac      	ite	ge
 8006324:	6563      	strge	r3, [r4, #84]	; 0x54
 8006326:	81a3      	strhlt	r3, [r4, #12]
 8006328:	bd10      	pop	{r4, pc}

0800632a <__swrite>:
 800632a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632e:	461f      	mov	r7, r3
 8006330:	898b      	ldrh	r3, [r1, #12]
 8006332:	05db      	lsls	r3, r3, #23
 8006334:	4605      	mov	r5, r0
 8006336:	460c      	mov	r4, r1
 8006338:	4616      	mov	r6, r2
 800633a:	d505      	bpl.n	8006348 <__swrite+0x1e>
 800633c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006340:	2302      	movs	r3, #2
 8006342:	2200      	movs	r2, #0
 8006344:	f000 f868 	bl	8006418 <_lseek_r>
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800634e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	4632      	mov	r2, r6
 8006356:	463b      	mov	r3, r7
 8006358:	4628      	mov	r0, r5
 800635a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800635e:	f000 b817 	b.w	8006390 <_write_r>

08006362 <__sseek>:
 8006362:	b510      	push	{r4, lr}
 8006364:	460c      	mov	r4, r1
 8006366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800636a:	f000 f855 	bl	8006418 <_lseek_r>
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	bf15      	itete	ne
 8006374:	6560      	strne	r0, [r4, #84]	; 0x54
 8006376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800637a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800637e:	81a3      	strheq	r3, [r4, #12]
 8006380:	bf18      	it	ne
 8006382:	81a3      	strhne	r3, [r4, #12]
 8006384:	bd10      	pop	{r4, pc}

08006386 <__sclose>:
 8006386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800638a:	f000 b813 	b.w	80063b4 <_close_r>
	...

08006390 <_write_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	; (80063b0 <_write_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fb f963 	bl	800166a <_write>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_write_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_write_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	20000228 	.word	0x20000228

080063b4 <_close_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d06      	ldr	r5, [pc, #24]	; (80063d0 <_close_r+0x1c>)
 80063b8:	2300      	movs	r3, #0
 80063ba:	4604      	mov	r4, r0
 80063bc:	4608      	mov	r0, r1
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	f7fb f96f 	bl	80016a2 <_close>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_close_r+0x1a>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_close_r+0x1a>
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	20000228 	.word	0x20000228

080063d4 <_fstat_r>:
 80063d4:	b538      	push	{r3, r4, r5, lr}
 80063d6:	4d07      	ldr	r5, [pc, #28]	; (80063f4 <_fstat_r+0x20>)
 80063d8:	2300      	movs	r3, #0
 80063da:	4604      	mov	r4, r0
 80063dc:	4608      	mov	r0, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	602b      	str	r3, [r5, #0]
 80063e2:	f7fb f96a 	bl	80016ba <_fstat>
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	d102      	bne.n	80063f0 <_fstat_r+0x1c>
 80063ea:	682b      	ldr	r3, [r5, #0]
 80063ec:	b103      	cbz	r3, 80063f0 <_fstat_r+0x1c>
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	bd38      	pop	{r3, r4, r5, pc}
 80063f2:	bf00      	nop
 80063f4:	20000228 	.word	0x20000228

080063f8 <_isatty_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d06      	ldr	r5, [pc, #24]	; (8006414 <_isatty_r+0x1c>)
 80063fc:	2300      	movs	r3, #0
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	602b      	str	r3, [r5, #0]
 8006404:	f7fb f969 	bl	80016da <_isatty>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_isatty_r+0x1a>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b103      	cbz	r3, 8006412 <_isatty_r+0x1a>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	20000228 	.word	0x20000228

08006418 <_lseek_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4d07      	ldr	r5, [pc, #28]	; (8006438 <_lseek_r+0x20>)
 800641c:	4604      	mov	r4, r0
 800641e:	4608      	mov	r0, r1
 8006420:	4611      	mov	r1, r2
 8006422:	2200      	movs	r2, #0
 8006424:	602a      	str	r2, [r5, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	f7fb f962 	bl	80016f0 <_lseek>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_lseek_r+0x1e>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_lseek_r+0x1e>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	20000228 	.word	0x20000228

0800643c <__malloc_lock>:
 800643c:	4801      	ldr	r0, [pc, #4]	; (8006444 <__malloc_lock+0x8>)
 800643e:	f7ff bb1d 	b.w	8005a7c <__retarget_lock_acquire_recursive>
 8006442:	bf00      	nop
 8006444:	2000021c 	.word	0x2000021c

08006448 <__malloc_unlock>:
 8006448:	4801      	ldr	r0, [pc, #4]	; (8006450 <__malloc_unlock+0x8>)
 800644a:	f7ff bb18 	b.w	8005a7e <__retarget_lock_release_recursive>
 800644e:	bf00      	nop
 8006450:	2000021c 	.word	0x2000021c

08006454 <_read_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d07      	ldr	r5, [pc, #28]	; (8006474 <_read_r+0x20>)
 8006458:	4604      	mov	r4, r0
 800645a:	4608      	mov	r0, r1
 800645c:	4611      	mov	r1, r2
 800645e:	2200      	movs	r2, #0
 8006460:	602a      	str	r2, [r5, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	f7fb f8e4 	bl	8001630 <_read>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_read_r+0x1e>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_read_r+0x1e>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	20000228 	.word	0x20000228

08006478 <_init>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	bf00      	nop
 800647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647e:	bc08      	pop	{r3}
 8006480:	469e      	mov	lr, r3
 8006482:	4770      	bx	lr

08006484 <_fini>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	bf00      	nop
 8006488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648a:	bc08      	pop	{r3}
 800648c:	469e      	mov	lr, r3
 800648e:	4770      	bx	lr
